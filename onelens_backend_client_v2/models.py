# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-07-21T12:32:11+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import (
    UUID4,
    UUID5,
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    conint,
    constr,
)


class APIEnableMetricsResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description="Whether the operation was successful", title="Success"
    )


class APISendEmailToEnableMemoryMetricsRequest(BaseModel):
    to_email: str = Field(..., description="To email", title="To Email")
    subject: str = Field(..., description="Subject of the email", title="Subject")
    content: str = Field(..., description="Content of the email", title="Content")
    tenant_provider_id: UUID4 = Field(
        ..., description="Tenant provider ID", title="Tenant Provider Id"
    )


class APISendEmailToEnableMemoryMetricsResponse(BaseModel):
    status: str = Field(..., description="Status of the email", title="Status")


class APIUpdateFeatureStatusEnabledRequest(BaseModel):
    id: UUID4 = Field(..., title="Id")


class APIUpdateMetricsControlResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description="Whether the operation was successful", title="Success"
    )


class AccountType(str, Enum):
    member = "member"
    master = "master"


class AchievedSavingsDetails(BaseModel):
    cost_at_ticket_creation: Optional[float] = Field(
        None, description="Cost at ticket creation", title="Cost At Ticket Creation"
    )
    cost_at_ticket_closure: Optional[float] = Field(
        None, description="Cost at ticket closure", title="Cost At Ticket Closure"
    )
    daily_achieved_savings: Optional[float] = Field(
        None, description="Daily achieved savings", title="Daily Achieved Savings"
    )
    monthly_achieved_savings: Optional[float] = Field(
        None, description="Monthly achieved savings", title="Monthly Achieved Savings"
    )
    cost_before_ticket_closure: Optional[float] = Field(
        None,
        description="Cost before ticket closure",
        title="Cost Before Ticket Closure",
    )
    cost_after_ticket_closure: Optional[float] = Field(
        None, description="Cost after ticket closure", title="Cost After Ticket Closure"
    )


class AchievedSavingsEvidenceDataPoint(BaseModel):
    cost: float = Field(..., title="Cost")
    date: datetime = Field(..., title="Date")


class ActivatePolicyTemplateRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class ActivatePolicyTemplateResponse(BaseModel):
    pass


class ActivityLogFormat(BaseModel):
    title: str = Field(
        ...,
        description="Dynamic title for the activity log entry. Example: 'Ticket closed due to modification'",
        title="Title",
    )
    note: Optional[str] = Field(
        None,
        description="Optional note providing additional context about the activity",
        title="Note",
    )


class AddTenantPolicyExclusionsResponseV2(BaseModel):
    pass


class AgentRunStats(BaseModel):
    start_time: datetime = Field(..., title="Start Time")
    end_time: datetime = Field(..., title="End Time")
    data_size: Optional[conint(ge=0)] = Field(0, title="Data Size")
    processed_records: Optional[conint(ge=0)] = Field(0, title="Processed Records")
    failed_records: Optional[conint(ge=0)] = Field(0, title="Failed Records")
    retries: Optional[conint(ge=0)] = Field(0, title="Retries")


class AgentRunStatus(str, Enum):
    SUCCESS = "SUCCESS"
    FAILED = "FAILED"


class AndItem(BaseModel):
    gte: Optional[List] = Field(None, title="Gte")
    gt: Optional[List] = Field(None, title="Gt")


class AnomalyDetectionDimension(str, Enum):
    ACCOUNT_REGION = "ACCOUNT_REGION"
    COST_CENTER = "COST_CENTER"


class AnomalyPrimaryDetectionConfig(BaseModel):
    dimension: Optional[AnomalyDetectionDimension] = Field(
        "ACCOUNT_REGION",
        description="The primary dimension for anomaly detection (ACCOUNT_REGION or COST_CENTER)",
        examples=["ACCOUNT_REGION", "COST_CENTER"],
    )


class AnomalyRcaIdsMixin(BaseModel):
    anomaly_id: UUID5 = Field(
        ..., description="The unique identifier of the anomaly", title="Anomaly Id"
    )
    rca_ids: List[UUID5] = Field(
        ..., description="List of rca ids associated with the anomaly", title="Rca Ids"
    )
    actual_cost: float = Field(
        ...,
        description="Actual cost of the resource because of the anomaly",
        title="Actual Cost",
    )
    expected_cost: float = Field(
        ...,
        description="Expected cost of the resource without the anomaly",
        title="Expected Cost",
    )


class AnomalySourceType(str, Enum):
    USAGE = "USAGE"
    RESOURCE_CREATION = "RESOURCE_CREATION"
    RESOURCE_MODIFICATION = "RESOURCE_MODIFICATION"
    DATA_TRANSFER = "DATA_TRANSFER"


class AnomalyTicketStatus(str, Enum):
    OPEN = "OPEN"
    ACKNOWLEDGED = "ACKNOWLEDGED"
    INVALID = "INVALID"
    CLOSED = "CLOSED"


class ApiProcessorPayload(BaseModel):
    payload_key: str = Field(
        ..., description="Key to use for the payload", title="Payload Key"
    )
    query_params: Optional[Dict[str, Any]] = Field(
        None, description="Query parameters", title="Query Params"
    )
    body: Optional[Dict[str, Any]] = Field(
        None, description="Request body", title="Body"
    )
    include_metrics: Optional[bool] = Field(
        None, description="Whether to include metrics", title="Include Metrics"
    )
    include_values: Optional[bool] = Field(
        None, description="Whether to include values", title="Include Values"
    )


class Auth0UserConnection(str, Enum):
    Username_Password_Authentication = "Username-Password-Authentication"


class AuthorRole(str, Enum):
    USER = "USER"
    ASSISTANT = "ASSISTANT"
    SYSTEM = "SYSTEM"
    TOOL = "TOOL"


class AwsService(str, Enum):
    aws_ec2 = "aws_ec2"
    aws_ebs = "aws_ebs"
    aws_rds = "aws_rds"
    aws_s3 = "aws_s3"
    aws_dynamodb = "aws_dynamodb"
    aws_elasticache = "aws_elasticache"
    aws_es = "aws_es"
    aws_cloudwatch = "aws_cloudwatch"
    aws_elasticloadbalancing = "aws_elasticloadbalancing"
    aws_vpc = "aws_vpc"
    aws_account = "aws_account"
    aws_amplifybackend = "aws_amplifybackend"
    aws_amplifyuibuilder = "aws_amplifyuibuilder"
    aws_amplify = "aws_amplify"
    aws_appmesh = "aws_appmesh"
    aws_apprunner = "aws_apprunner"
    aws_a2c = "aws_a2c"
    aws_appconfig = "aws_appconfig"
    aws_appfabric = "aws_appfabric"
    aws_appsync = "aws_appsync"
    aws_mgn = "aws_mgn"
    aws_artifact = "aws_artifact"
    aws_auditmanager = "aws_auditmanager"
    aws_backup = "aws_backup"
    aws_batch = "aws_batch"
    aws_billingconductor = "aws_billingconductor"
    aws_budgets = "aws_budgets"
    aws_bugbust = "aws_bugbust"
    aws_acm = "aws_acm"
    aws_chatbot = "aws_chatbot"
    aws_cleanrooms = "aws_cleanrooms"
    aws_servicediscovery = "aws_servicediscovery"
    aws_cloud9 = "aws_cloud9"
    aws_cloudformation = "aws_cloudformation"
    aws_cloudhsm = "aws_cloudhsm"
    aws_cloudshell = "aws_cloudshell"
    aws_cloudtrail = "aws_cloudtrail"
    aws_rum = "aws_rum"
    aws_codeartifact = "aws_codeartifact"
    aws_codebuild = "aws_codebuild"
    aws_codecommit = "aws_codecommit"
    aws_codedeploy = "aws_codedeploy"
    aws_codepipeline = "aws_codepipeline"
    aws_codestar = "aws_codestar"
    aws_config = "aws_config"
    aws_awsconnector = "aws_awsconnector"
    aws_consoleapp = "aws_consoleapp"
    aws_consolidatedbilling = "aws_consolidatedbilling"
    aws_controltower = "aws_controltower"
    aws_ce = "aws_ce"
    aws_cur = "aws_cur"
    aws_dataexchange = "aws_dataexchange"
    aws_datapipeline = "aws_datapipeline"
    aws_datasync = "aws_datasync"
    aws_dms = "aws_dms"
    aws_deepcomposer = "aws_deepcomposer"
    aws_deeplens = "aws_deeplens"
    aws_deepracer = "aws_deepracer"
    aws_devicefarm = "aws_devicefarm"
    aws_directconnect = "aws_directconnect"
    aws_ds = "aws_ds"
    aws_elasticbeanstalk = "aws_elasticbeanstalk"
    aws_drs = "aws_drs"
    aws_mediaconnect = "aws_mediaconnect"
    aws_mediaconvert = "aws_mediaconvert"
    aws_medialive = "aws_medialive"
    aws_mediapackagev2 = "aws_mediapackagev2"
    aws_mediapackage = "aws_mediapackage"
    aws_mediastore = "aws_mediastore"
    aws_mediatailor = "aws_mediatailor"
    aws_entityresolution = "aws_entityresolution"
    aws_fis = "aws_fis"
    aws_fms = "aws_fms"
    aws_globalaccelerator = "aws_globalaccelerator"
    aws_databrew = "aws_databrew"
    aws_glue = "aws_glue"
    aws_groundstation = "aws_groundstation"
    aws_health = "aws_health"
    aws_healthlake = "aws_healthlake"
    aws_omics = "aws_omics"
    aws_sso = "aws_sso"
    aws_iq = "aws_iq"
    aws_identitystore = "aws_identitystore"
    aws_iam = "aws_iam"
    aws_rolesanywhere = "aws_rolesanywhere"
    aws_iot1click = "aws_iot1click"
    aws_iotanalytics = "aws_iotanalytics"
    aws_iotdeviceadvisor = "aws_iotdeviceadvisor"
    aws_iotevents = "aws_iotevents"
    aws_iotfleethub = "aws_iotfleethub"
    aws_iotfleetwise = "aws_iotfleetwise"
    aws_greengrass = "aws_greengrass"
    aws_iotjobsdata = "aws_iotjobsdata"
    aws_iotroborunner = "aws_iotroborunner"
    aws_iotsitewise = "aws_iotsitewise"
    aws_iottwinmaker = "aws_iottwinmaker"
    aws_iotwireless = "aws_iotwireless"
    aws_iot = "aws_iot"
    aws_kms = "aws_kms"
    aws_lakeformation = "aws_lakeformation"
    aws_lambda = "aws_lambda"
    aws_m2 = "aws_m2"
    aws_serviceextract = "aws_serviceextract"
    aws_mapcredits = "aws_mapcredits"
    aws_mgh = "aws_mgh"
    aws_mobilehub = "aws_mobilehub"
    aws_networkmanager = "aws_networkmanager"
    aws_opsworks = "aws_opsworks"
    aws_organizations = "aws_organizations"
    aws_outposts = "aws_outposts"
    aws_panorama = "aws_panorama"
    aws_pi = "aws_pi"
    aws_proton = "aws_proton"
    aws_rbin = "aws_rbin"
    aws_resiliencehub = "aws_resiliencehub"
    aws_ram = "aws_ram"
    aws_robomaker = "aws_robomaker"
    aws_sqlworkbench = "aws_sqlworkbench"
    aws_savingsplans = "aws_savingsplans"
    aws_secretsmanager = "aws_secretsmanager"
    aws_securityhub = "aws_securityhub"
    aws_sts = "aws_sts"
    aws_sms = "aws_sms"
    aws_serverlessrepo = "aws_serverlessrepo"
    aws_servicecatalog = "aws_servicecatalog"
    aws_shield = "aws_shield"
    aws_signer = "aws_signer"
    aws_simspaceweaver = "aws_simspaceweaver"
    aws_states = "aws_states"
    aws_storagegateway = "aws_storagegateway"
    aws_scn = "aws_scn"
    aws_supportplans = "aws_supportplans"
    aws_sustainability = "aws_sustainability"
    aws_ssm = "aws_ssm"
    aws_tnb = "aws_tnb"
    aws_tiros = "aws_tiros"
    aws_transfer = "aws_transfer"
    aws_trustedadvisor = "aws_trustedadvisor"
    aws_notifications = "aws_notifications"
    aws_wafv2 = "aws_wafv2"
    aws_waf = "aws_waf"
    aws_wellarchitected = "aws_wellarchitected"
    aws_wickr = "aws_wickr"
    aws_xray = "aws_xray"
    aws_a4b = "aws_a4b"
    aws_apigateway = "aws_apigateway"
    aws_appflow = "aws_appflow"
    aws_appstream = "aws_appstream"
    aws_athena = "aws_athena"
    aws_bedrock = "aws_bedrock"
    aws_braket = "aws_braket"
    aws_chime = "aws_chime"
    aws_clouddirectory = "aws_clouddirectory"
    aws_cloudfront = "aws_cloudfront"
    aws_cloudsearch = "aws_cloudsearch"
    aws_evidently = "aws_evidently"
    aws_internetmonitor = "aws_internetmonitor"
    aws_logs = "aws_logs"
    aws_oam = "aws_oam"
    aws_synthetics = "aws_synthetics"
    aws_codecatalyst = "aws_codecatalyst"
    aws_codeguru = "aws_codeguru"
    aws_codewhisperer = "aws_codewhisperer"
    aws_comprehendmedical = "aws_comprehendmedical"
    aws_comprehend = "aws_comprehend"
    aws_cases = "aws_cases"
    aws_profile = "aws_profile"
    aws_voiceid = "aws_voiceid"
    aws_wisdom = "aws_wisdom"
    aws_connect = "aws_connect"
    aws_dlm = "aws_dlm"
    aws_datazonecontrol = "aws_datazonecontrol"
    aws_datazone = "aws_datazone"
    aws_detective = "aws_detective"
    aws_dax = "aws_dax"
    aws_autoscaling = "aws_autoscaling"
    aws_imagebuilder = "aws_imagebuilder"
    aws_ecr = "aws_ecr"
    aws_ecs = "aws_ecs"
    aws_elasticfilesystem = "aws_elasticfilesystem"
    aws_eks = "aws_eks"
    aws_elasticmapreduce = "aws_elasticmapreduce"
    aws_elastictranscoder = "aws_elastictranscoder"
    aws_pipes = "aws_pipes"
    aws_scheduler = "aws_scheduler"
    aws_schemas = "aws_schemas"
    aws_events = "aws_events"
    aws_fsx = "aws_fsx"
    aws_finspace = "aws_finspace"
    aws_forecast = "aws_forecast"
    aws_frauddetector = "aws_frauddetector"
    aws_freertos = "aws_freertos"
    aws_gamelift = "aws_gamelift"
    aws_gamesparks = "aws_gamesparks"
    aws_groundtruthlabeling = "aws_groundtruthlabeling"
    aws_guardduty = "aws_guardduty"
    aws_honeycode = "aws_honeycode"
    aws_inspector2 = "aws_inspector2"
    aws_ivschat = "aws_ivschat"
    aws_ivs = "aws_ivs"
    aws_kendra = "aws_kendra"
    aws_cassandra = "aws_cassandra"
    aws_kinesisanalytics = "aws_kinesisanalytics"
    aws_kinesis = "aws_kinesis"
    aws_firehose = "aws_firehose"
    aws_kinesisvideo = "aws_kinesisvideo"
    aws_lex = "aws_lex"
    aws_lightsail = "aws_lightsail"
    aws_geo = "aws_geo"
    aws_lookoutequipment = "aws_lookoutequipment"
    aws_lookoutmetrics = "aws_lookoutmetrics"
    aws_lookoutvision = "aws_lookoutvision"
    aws_mq = "aws_mq"
    aws_machinelearning = "aws_machinelearning"
    aws_macie2 = "aws_macie2"
    aws_managedblockchain = "aws_managedblockchain"
    aws_grafana = "aws_grafana"
    aws_aps = "aws_aps"
    aws_kafka = "aws_kafka"
    aws_kafkaconnect = "aws_kafkaconnect"
    aws_airflow = "aws_airflow"
    aws_memorydb = "aws_memorydb"
    aws_monitron = "aws_monitron"
    aws_nimble = "aws_nimble"
    aws_osis = "aws_osis"
    aws_aoss = "aws_aoss"
    aws_personalize = "aws_personalize"
    aws_mobiletargeting = "aws_mobiletargeting"
    aws_polly = "aws_polly"
    aws_qldb = "aws_qldb"
    aws_quicksight = "aws_quicksight"
    aws_rhelkb = "aws_rhelkb"
    aws_redshift = "aws_redshift"
    aws_rekognition = "aws_rekognition"
    aws_route53resolver = "aws_route53resolver"
    aws_route53 = "aws_route53"
    aws_glacier = "aws_glacier"
    aws_ses = "aws_ses"
    aws_sns = "aws_sns"
    aws_sqs = "aws_sqs"
    aws_sagemaker = "aws_sagemaker"
    aws_securitylake = "aws_securitylake"
    aws_swf = "aws_swf"
    aws_sdb = "aws_sdb"
    aws_textract = "aws_textract"
    aws_timestream = "aws_timestream"
    aws_transcribe = "aws_transcribe"
    aws_translate = "aws_translate"
    aws_verifiedpermissions = "aws_verifiedpermissions"
    aws_worklink = "aws_worklink"
    aws_workmailmessageflow = "aws_workmailmessageflow"
    aws_workmail = "aws_workmail"
    aws_workspaces = "aws_workspaces"
    aws_mediaimport = "aws_mediaimport"
    aws_dbqms = "aws_dbqms"
    aws_servicequotas = "aws_servicequotas"


class BillingType(str, Enum):
    Free = "Free"
    Paid = "Paid"
    Trial = "Trial"
    Internal = "Internal"
    POC = "POC"
    Internal_POC = "Internal_POC"


class BulkDeleteCustomFieldRequest(BaseModel):
    ids: List[UUID] = Field(..., title="Ids")


class BulkDeleteResponse(BaseModel):
    deleted_count: int = Field(..., title="Deleted Count")
    errors: Optional[List[Dict[str, Any]]] = Field([], title="Errors")


class BulkUpdateTenantTicketsErrorMixin(BaseModel):
    ticket_id: UUID = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    description: str = Field(
        ..., description="Description of the error", title="Description"
    )
    code: int = Field(..., description="Status code of the error", title="Code")


class CURDataAggregationType(str, Enum):
    SUM_ACTUAL_COST = "SUM_ACTUAL_COST"
    sum_unblended_cost = "sum_unblended_cost"
    sum_blended_cost = "sum_blended_cost"
    sum_net_unblended_cost = "sum_net_unblended_cost"
    sum_usage_amount = "sum_usage_amount"
    data_transfer_out_amount = "data_transfer_out_amount"
    max_usage_start_date = "max_usage_start_date"
    min_usage_start_date = "min_usage_start_date"


class CURDataMetrics(BaseModel):
    measures: Dict[str, Any] = Field(..., title="Measures")
    timestamp: datetime = Field(..., title="Timestamp")


class CURLineItemResult(BaseModel):
    resource_id: UUID = Field(..., title="Resource Id")
    line_item_usage_amount: float = Field(..., title="Line Item Usage Amount")
    line_item_usage_type: str = Field(..., title="Line Item Usage Type")
    line_item_usage_operation: Optional[str] = Field(
        None, title="Line Item Usage Operation"
    )
    line_item_usage_start_date: datetime = Field(
        ..., title="Line Item Usage Start Date"
    )
    line_item_unblended_cost: float = Field(..., title="Line Item Unblended Cost")


class CURSavedViewItem(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    name: constr(min_length=3) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: Optional[Dict[str, Any]] = Field(
        ..., description="Payload of the saved view", title="Payload"
    )
    is_default: Optional[bool] = Field(
        False, description="Whether the saved view is default", title="Is Default"
    )
    is_system_defined: Optional[bool] = Field(
        False,
        description="Whether the saved view is system defined",
        title="Is System Defined",
    )
    created_at: datetime = Field(..., description="Created at", title="Created At")
    updated_at: datetime = Field(..., description="Updated at", title="Updated At")


class ChangeManagerEventName(str, Enum):
    ENABLE_MEM_METRICS = "ENABLE_MEM_METRICS"
    DISABLE_MEM_METRICS = "DISABLE_MEM_METRICS"
    CREATE_SCHEDULE = "CREATE_SCHEDULE"


class ChangeReason(str, Enum):
    PRICING_VARIANT_CHANGE = "PRICING_VARIANT_CHANGE"
    TERMINATION = "TERMINATION"
    USAGE_AMOUNT_CHANGE = "USAGE_AMOUNT_CHANGE"
    USAGE_TYPE_DELETION = "USAGE_TYPE_DELETION"
    DEACTIVATION = "DEACTIVATION"


class ChangeType(str, Enum):
    CONFIG_CHANGES = "CONFIG_CHANGES"
    DECOMMISSIONING = "DECOMMISSIONING"
    SCALING = "SCALING"
    SCHEDULING = "SCHEDULING"
    APPLICATION_CHANGES = "APPLICATION_CHANGES"
    UPGRADE = "UPGRADE"
    MIGRATION = "MIGRATION"


class CloudAccountMetadata(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the cloud account metadata.", title="Ol Id"
    )
    account_name: Optional[str] = Field(
        None, description="Account name", title="Account Name"
    )
    cloud_id: Optional[str] = Field(None, description="Cloud id", title="Cloud Id")
    run_id: Optional[UUID4] = Field(None, description="The run id.", title="Run Id")
    last_updated_at: Optional[datetime] = Field(
        None, description="The last updated at.", title="Last Updated At"
    )


class CloudAccountMetadataFilters(BaseModel):
    cloud_ids: Optional[List[str]] = Field(
        None, description="Cloud IDs", title="Cloud Ids"
    )
    account_names: Optional[List[str]] = Field(
        None, description="Account names", title="Account Names"
    )


class CloudMetadataType(str, Enum):
    CLOUD_ID = "CLOUD_ID"
    REGION = "REGION"
    SERVICE = "SERVICE"
    TAG_KEY = "TAG_KEY"
    TAG_VALUE = "TAG_VALUE"


class CloudwatchMetricDataPoint(BaseModel):
    label: Optional[str] = Field(..., title="Label")
    timestamps: List[int] = Field(..., title="Timestamps")
    values: List[float] = Field(..., title="Values")


class CloudwatchMetricDataResponse(BaseModel):
    metrics: Dict[str, CloudwatchMetricDataPoint] = Field(..., title="Metrics")


class CloudwatchMetricDimension(BaseModel):
    name: str = Field(..., title="Name")
    value: str = Field(..., title="Value")


class CloudwatchSupportedMetricsRequest(BaseModel):
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    service: str = Field(..., description="Service", title="Service")
    region: str = Field(..., description="Region", title="Region")
    resource: str = Field(..., description="Resource", title="Resource")


class ClusterData(BaseModel):
    ol_cluster_id: Optional[UUID] = Field(
        ..., description="Unique identifier for the cluster", title="Ol Cluster Id"
    )
    name: str = Field(..., description="Name of the cluster", title="Name")
    version: str = Field(..., description="Kubernetes version", title="Version")
    account_id: str = Field(..., description="AWS account ID", title="Account Id")
    region: str = Field(..., description="AWS region", title="Region")
    tags: Dict[str, str] = Field(..., description="Cluster tags", title="Tags")
    status: str = Field(..., description="Current cluster status", title="Status")
    current_period_cost: float = Field(
        ..., description="Cost for the current period", title="Current Period Cost"
    )
    previous_period_cost: float = Field(
        ..., description="Cost for the previous period", title="Previous Period Cost"
    )
    potential_savings: float = Field(
        ..., description="Potential cost savings identified", title="Potential Savings"
    )
    efficiency_score: float = Field(
        ..., description="Calculated efficiency score", title="Efficiency Score"
    )
    last_updated: Optional[datetime] = Field(
        None, description="Last updated timestamp", title="Last Updated"
    )
    connected_on: Optional[datetime] = Field(
        None, description="Cluster connected on timestamp", title="Connected On"
    )


class EntityType(str, Enum):
    node = "node"
    namespace = "namespace"
    pod = "pod"
    container = "container"
    deployment = "deployment"
    statefulset = "statefulset"
    cronjob = "cronjob"
    daemonset = "daemonset"


class ClusterEntitiesStats(BaseModel):
    entity_type: EntityType = Field(
        ..., description="Type of the entity", title="Entity Type"
    )
    label: str = Field(..., description="Label of the entity", title="Label")
    tool_tip: str = Field(..., description="Tooltip of the entity", title="Tool Tip")
    count: int = Field(..., description="Count of the entities", title="Count")


class ClusterInfraStats(BaseModel):
    num_nodes: int = Field(..., description="Number of nodes", title="Num Nodes")
    ec2_cost: float = Field(..., description="Total EC2 cost", title="Ec2 Cost")
    idle_cost: float = Field(
        ..., description="Cost of idle resources", title="Idle Cost"
    )
    spot_usage_cost: float = Field(
        ..., description="Cost of spot instances", title="Spot Usage Cost"
    )


class ClusterMetadata(BaseModel):
    ol_cluster_id: UUID = Field(
        ..., description="Unique identifier for the cluster", title="Ol Cluster Id"
    )
    name: str = Field(..., description="Name of the cluster", title="Name")
    version: str = Field(..., description="Kubernetes version", title="Version")
    account_id: str = Field(..., description="AWS account ID", title="Account Id")
    region: str = Field(..., description="AWS region", title="Region")
    tags: Dict[str, str] = Field(..., description="Cluster tags", title="Tags")
    status: str = Field(..., description="Current cluster status", title="Status")
    last_updated: Optional[datetime] = Field(
        None, description="Last updated timestamp", title="Last Updated"
    )
    connected_on: Optional[datetime] = Field(
        None, description="Connected on timestamp", title="Connected On"
    )


class Column(BaseModel):
    name: str = Field(..., description="Column name", title="Name")
    description: Optional[str] = Field(
        None, description="Description of the column", title="Description"
    )
    type: Optional[str] = Field(
        None, description="Data type of the column", title="Type"
    )
    operator: Optional[str] = Field(
        None, description="Operator for the column", title="Operator"
    )
    example_values: Optional[List[str]] = Field(
        None, description="Example values for the column", title="Example Values"
    )
    is_categorical: Optional[bool] = Field(
        False, description="Whether the column is categorical", title="Is Categorical"
    )
    is_visible: Optional[bool] = Field(
        True, description="Whether the column is visible", title="Is Visible"
    )
    allowed_values: Optional[List[str]] = Field(
        None, description="Allowed values for the column", title="Allowed Values"
    )


class ConnectionStatus(str, Enum):
    ACTIVE = "ACTIVE"
    IN_ACTIVE = "IN_ACTIVE"


class ConnectionType(str, Enum):
    MAIN = "MAIN"
    REPLICA = "REPLICA"
    CLICKHOUSE = "CLICKHOUSE"


class Containers(BaseModel):
    name: str = Field(..., description="Name of the container", title="Name")
    is_init_container: Optional[bool] = Field(
        False,
        description="Whether the container is an init container",
        title="Is Init Container",
    )


class CostAnalyzerGraphRequest(BaseModel):
    filters: List[Dict[str, Any]] = Field(
        ..., description="Filters for the cost analyzer graph", title="Filters"
    )
    group_by: List[str] = Field(
        ..., description="Group by for the cost analyzer graph", title="Group By"
    )


class CostAnalyzerGraphResponse(BaseModel):
    data: List[Dict[str, Any]] = Field(
        ...,
        description="List of dictionaries containing cost analyzer stats",
        title="Data",
    )


class CostAnalyzerStatsRequest(BaseModel):
    filters: List[Dict[str, Any]] = Field(
        ..., description="Filters for the cost analyzer stats", title="Filters"
    )
    group_by: List[str] = Field(
        ..., description="Group by for the cost analyzer stats", title="Group By"
    )


class CostAnalyzerStatsResponse(BaseModel):
    data: List[Dict[str, Any]] = Field(
        ...,
        description="List of dictionaries containing cost analyzer stats",
        title="Data",
    )


class CostDelta(BaseModel):
    amount: float = Field(..., description="Amount of the cost delta", title="Amount")
    percentage: float = Field(
        ..., description="Percentage of the cost delta", title="Percentage"
    )


class CostSummary(BaseModel):
    tenant_id: UUID = Field(..., description="Tenant identifier", title="Tenant Id")
    tenant_name: Optional[str] = Field(
        None, description="Name of the tenant", title="Tenant Name"
    )
    cost_date: date = Field(
        ..., description="Date of the cost summary", title="Cost Date"
    )
    aws_cost: float = Field(
        ..., description="Total AWS cost for the date", title="Aws Cost"
    )
    onelens_cost: float = Field(
        ..., description="Total OneLens cost for the date", title="Onelens Cost"
    )
    cost_difference: str = Field(
        ...,
        description="Difference between AWS and OneLens costs in dollars with $ symbol",
        title="Cost Difference",
    )
    cost_difference_percentage: str = Field(
        ...,
        description="Percentage difference between AWS and OneLens costs with % symbol",
        title="Cost Difference Percentage",
    )


class CountEntity(BaseModel):
    conflicting: int = Field(..., title="Conflicting")
    unique: int = Field(..., title="Unique")
    total: int = Field(..., title="Total")


class CreateActionTypePullRequest(BaseModel):
    title: str = Field(..., description="The title of the pull request.", title="Title")
    description: str = Field(
        ..., description="The description of the pull request.", title="Description"
    )
    source_branch: str = Field(
        ..., description="The source branch of the pull request.", title="Source Branch"
    )
    branch_name: str = Field(
        ..., description="The branch name of the pull request.", title="Branch Name"
    )
    alias: str = Field(
        ...,
        description="The unique identifier alias of the action type.",
        title="Alias",
    )
    commit_message: str = Field(
        ..., description="Action type change commit message", title="Commit Message"
    )


class CreateActionTypePullResponse(BaseModel):
    pr_link: AnyUrl = Field(
        ..., description="The action type pull request link.", title="Pr Link"
    )


class CreateCURSavedViewAPIRequest(BaseModel):
    name: constr(max_length=30) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3, max_length=30) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: Optional[Dict[str, Any]] = Field(
        ..., description="Payload of the saved view", title="Payload"
    )
    filter_criteria: Optional[Dict[str, Any]] = Field(
        None, description="Filter criteria for the saved view", title="Filter Criteria"
    )


class CreateCURSavedViewRequest(BaseModel):
    name: constr(max_length=30) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3, max_length=30) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: Optional[Dict[str, Any]] = Field(
        ..., description="Payload of the saved view", title="Payload"
    )
    filter_criteria: Optional[Dict[str, Any]] = Field(
        None, description="Filter criteria for the saved view", title="Filter Criteria"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class CreateCURSavedViewResponse(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    name: constr(min_length=3) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: Optional[Dict[str, Any]] = Field(
        ..., description="Payload of the saved view", title="Payload"
    )
    is_default: Optional[bool] = Field(
        False, description="Whether the saved view is default", title="Is Default"
    )
    is_system_defined: Optional[bool] = Field(
        False,
        description="Whether the saved view is system defined",
        title="Is System Defined",
    )
    created_at: datetime = Field(..., description="Created at", title="Created At")
    updated_at: datetime = Field(..., description="Updated at", title="Updated At")


class CreateDefaultHierarchyRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class CreateDefaultHierarchyResponse(BaseModel):
    pass


class CreateDeltaEventConfigRequest(BaseModel):
    environment: Optional[str] = Field("PROD", title="Environment")
    type: str = Field(..., title="Type")
    noun01: Optional[str] = Field(None, title="Noun01")
    config: Dict[str, Any] = Field(..., title="Config")


class Category(str, Enum):
    ROOT = "ROOT"
    BUSINESS_UNIT = "BUSINESS_UNIT"
    DEPARTMENT = "DEPARTMENT"
    DIVISION = "DIVISION"
    PRODUCT = "PRODUCT"
    TEAM = "TEAM"
    APPLICATION = "APPLICATION"
    CUSTOM = "CUSTOM"
    SERVICE = "SERVICE"
    ENVIRONMENT = "ENVIRONMENT"
    RESIDUAL = "RESIDUAL"
    CLOUD_ID = "CLOUD_ID"
    REGION = "REGION"
    PROJECT = "PROJECT"
    OTHER = "OTHER"


class CreateHierarchyRootNodeAPIRequest(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")


class CreateHierarchyRootNodeRequest(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class CreateHierarchyRootNodeResponse(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    name: constr(max_length=30) = Field(..., title="Name")


class CreateOrganizationRequest(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the organization", title="Name"
    )


class CreatePolicyTemplatePullRequest(BaseModel):
    title: str = Field(..., description="The title of the pull request.", title="Title")
    description: str = Field(
        ..., description="The description of the pull request.", title="Description"
    )
    source_branch: str = Field(
        ..., description="The source branch of the pull request.", title="Source Branch"
    )
    branch_name: str = Field(
        ..., description="The branch name of the pull request.", title="Branch Name"
    )
    alias: str = Field(
        ...,
        description="The unique identifier of the policy template by alias.",
        title="Alias",
    )
    commit_message: str = Field(
        ..., description="Change commit message", title="Commit Message"
    )


class CreatePolicyTemplatePullResponse(BaseModel):
    pr_link: AnyUrl = Field(
        ..., description="The policy pull request link.", title="Pr Link"
    )


class CreateRecommenadtionUnitPullResponse(BaseModel):
    pr_link: AnyUrl = Field(
        ..., description="The recommendation unit pull request link.", title="Pr Link"
    )


class CreateRecommendationUnitPullRequest(BaseModel):
    title: str = Field(..., description="The title of the pull request.", title="Title")
    description: str = Field(
        ..., description="The description of the pull request.", title="Description"
    )
    source_branch: str = Field(
        ..., description="The source branch of the pull request.", title="Source Branch"
    )
    branch_name: str = Field(
        ..., description="The branch name of the pull request.", title="Branch Name"
    )
    id: str = Field(
        ...,
        description="The unique identifier of the recommendation unit template by alias.",
        title="Id",
    )
    commit_message: str = Field(
        ..., description="Recommendation change commit message", title="Commit Message"
    )


class CreateResourceHierarchyMappingsFromQueryRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    query: Optional[str] = Field(
        None, description="The query to create mappings from", title="Query"
    )
    node_id: UUID = Field(..., description="Resource Catalog Ol Id", title="Node Id")


class CreateResourceHierarchyMappingsFromQueryResponse(BaseModel):
    pass


class CreateTenantAccountDailyCostRequest(BaseModel):
    id: UUID = Field(
        ...,
        description="Unique identifier for the tenant account daily cost",
        title="Id",
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    account_id: str = Field(
        ..., description="Unique identifier for the account", title="Account Id"
    )
    cost_on: date = Field(..., description="Date of the cost", title="Cost On")
    aws_cost: float = Field(..., description="AWS cost", title="Aws Cost")
    onelens_cost: float = Field(..., description="OneLens cost", title="Onelens Cost")


class CreateTenantAccountDailyCostResponse(BaseModel):
    id: UUID = Field(
        ...,
        description="Unique identifier for the tenant account daily cost",
        title="Id",
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    account_id: str = Field(
        ..., description="Unique identifier for the account", title="Account Id"
    )
    cost_on: date = Field(..., description="Date of the cost", title="Cost On")
    aws_cost: float = Field(..., description="AWS cost", title="Aws Cost")
    onelens_cost: float = Field(..., description="OneLens cost", title="Onelens Cost")
    created_at: Optional[datetime] = Field(
        ..., description="Created at", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at", title="Updated At"
    )


class CreateTenantAccountDeltaExportBulkResponse(BaseModel):
    pass


class CreateTenantConnectionRequest(BaseModel):
    connection_string: str = Field(
        ..., description="database connection string", title="Connection String"
    )
    tenant_id: UUID4 = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    connection_type: str = Field(
        ..., description="Type of the connection", title="Connection Type"
    )


class CreateTenantCustomTicketResponse(BaseModel):
    ticket_id: UUID4 = Field(..., description="Id of the ticket", title="Ticket Id")
    ticket_alias: int = Field(
        ..., description="Alias of the ticket", title="Ticket Alias"
    )


class CreateTenantDailyCostRequest(BaseModel):
    id: UUID = Field(
        ..., description="Unique identifier for the tenant daily cost", title="Id"
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    cost_on: date = Field(..., description="Date of the cost", title="Cost On")
    aws_cost: float = Field(..., description="AWS cost", title="Aws Cost")
    onelens_cost: float = Field(..., description="OneLens cost", title="Onelens Cost")


class CreateTenantDailyCostResponse(BaseModel):
    id: UUID = Field(
        ..., description="Unique identifier for the tenant daily cost", title="Id"
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    cost_on: date = Field(..., description="Date of the cost", title="Cost On")
    aws_cost: float = Field(..., description="AWS cost", title="Aws Cost")
    onelens_cost: float = Field(..., description="OneLens cost", title="Onelens Cost")
    created_at: Optional[datetime] = Field(
        ..., description="Created at", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at", title="Updated At"
    )


class CreateTenantEmbedAppsLinksRequest(BaseModel):
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")


class CreateTenantRequestWithUser(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: UUID4 = Field(
        ..., description="Organization id of the tenant", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    user_id: UUID4 = Field(
        ..., description="Unique identifier for the user in onelens", title="User Id"
    )


class CreateTenantTicketsResponse(BaseModel):
    pass


class CreateThreadRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="Unique identifier of the tenant", title="Tenant Id"
    )
    name: Optional[str] = Field(
        None, description="Optional name for the thread", title="Name"
    )
    agent_type: str = Field(..., description="Type of the workflow", title="Agent Type")
    user_id: Optional[UUID] = Field(
        None,
        description="Unique identifier of the user, required if agent_type is not provided to create a new thread for the user",
        title="User Id",
    )


class CreateUserTenantMappingRequest(BaseModel):
    user_id: UUID4 = Field(
        ..., description="Unique identifier for the user in onelens.", title="User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="Unique identifier for the tenant.", title="Tenant Id"
    )


class CreateUserTenantMappingResponse(BaseModel):
    user_id: UUID4 = Field(
        ..., description="Unique identifier for the user in onelens.", title="User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="Unique identifier for the tenant.", title="Tenant Id"
    )


class CurBucketVersion(str, Enum):
    v1 = "v1"
    v2 = "v2"


class CustomTicketAttributes(BaseModel):
    label: str = Field(
        ..., description="The label of the custom ticket attribute", title="Label"
    )
    value: str = Field(
        ..., description="The value of the custom ticket attribute", title="Value"
    )
    props: Optional[Dict[str, Any]] = Field(
        {}, description="The properties of the custom ticket attribute", title="Props"
    )


class CustomTicketPresignedUrlType(str, Enum):
    DOWNLOAD = "DOWNLOAD"
    UPLOAD = "UPLOAD"


class CustomTicketResourceDetails(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    resource_id: Optional[str] = Field(
        None, description="Id of the Resource", title="Resource Id"
    )
    resource_url_template: str = Field(
        ..., description="Resource url template", title="Resource Url Template"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")
    tags: Optional[Dict[str, Any]] = Field(
        None, description="Resource tags.", title="Tags"
    )
    additional_info: Dict[str, Any] = Field(
        ..., description="Additional info of the resource.", title="Additional Info"
    )
    run_id: Optional[UUID4] = Field(None, description="The run id.", title="Run Id")
    last_updated_at: Optional[datetime] = Field(
        None, description="The last updated at.", title="Last Updated At"
    )
    account_name: Optional[str] = Field(
        None, description="Cloud name of the account", title="Account Name"
    )
    tagged_resource: Optional[bool] = Field(
        False,
        description="true if the resource have tags tagged resource",
        title="Tagged Resource",
    )
    resource_created_at: Optional[datetime] = Field(
        None, description="The resource creation date", title="Resource Created At"
    )
    resource_updated_at: Optional[datetime] = Field(
        None, description="The resource updating date", title="Resource Updated At"
    )
    lifecycle_policies: Optional[List[Dict[str, Any]]] = Field(
        None, description="List of lifecycle policies", title="Lifecycle Policies"
    )
    conflicting_lifecycle_policies: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="List of conflicting lifecycle policies",
        title="Conflicting Lifecycle Policies",
    )


class CustomTicketResponseModel(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    ticket_id: Optional[str] = Field(
        None, description="The unique identifier of the ticket", title="Ticket Id"
    )
    status: Optional[str] = Field(
        None, description="Status of the ticket", title="Status"
    )
    state: Optional[str] = Field(None, description="State of the ticket", title="State")
    violation_attributes: Optional[Dict[str, Any]] = Field(
        None, description="Attributes of the violation", title="Violation Attributes"
    )
    ticket_category: Optional[str] = Field(
        None, description="Category of the ticket", title="Ticket Category"
    )
    violation_attributes_details: Optional[Dict[str, Any]] = Field(
        None,
        description="Details of the violation attributes",
        title="Violation Attributes Details",
    )
    entity_id: Optional[str] = Field(
        None, description="The id of the resource", title="Entity Id"
    )
    entity_name: Optional[str] = Field(
        None, description="Name of the resource", title="Entity Name"
    )
    region: Optional[str] = Field(
        None, description="Region of the resource", title="Region"
    )
    service: Optional[str] = Field(
        None, description="Service of the resource", title="Service"
    )
    service_display_name: Optional[str] = Field(
        None, description="Service display name", title="Service Display Name"
    )
    account_id: Optional[str] = Field(
        None, description="Account Id managing the resource", title="Account Id"
    )
    recommendation_unit_title: Optional[str] = Field(
        None, description="Recommendation title", title="Recommendation Unit Title"
    )
    potential_savings: Optional[float] = Field(
        None, description="Potential savings of the ticket", title="Potential Savings"
    )
    resource_id: Optional[str] = Field(
        None, description="Id of the resource", title="Resource Id"
    )
    account_name: Optional[str] = Field(
        None, description="Account name", title="Account Name"
    )
    policy_id: Optional[str] = Field(None, description="Policy id", title="Policy Id")
    policy_title: Optional[str] = Field(
        None, description="Policy title", title="Policy Title"
    )
    policy_display_alias: Optional[str] = Field(
        None, description="Policy alias", title="Policy Display Alias"
    )
    policy_labels: Optional[List[str]] = Field(
        None, description="Policy labels", title="Policy Labels"
    )
    effort: Optional[str] = Field(None, description="Effort required", title="Effort")
    ticket_alias: Optional[str] = Field(
        None, description="Ticket alias", title="Ticket Alias"
    )
    first_run_at: Optional[datetime] = Field(
        None, description="First run time", title="First Run At"
    )
    node_ids: Optional[List[str]] = Field(
        None, description="List of node ids", title="Node Ids"
    )
    category: Optional[str] = Field(None, description="Category", title="Category")
    risk: Optional[str] = Field(None, description="Risk", title="Risk")
    subcategory: Optional[str] = Field(
        None, description="Subcategory", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="Change type", title="Change Type"
    )
    monthly_achieved_savings: Optional[float] = Field(
        None, description="Monthly achieved savings", title="Monthly Achieved Savings"
    )
    violation_closure_details: Optional[Dict[str, Any]] = Field(
        None, description="Violation closure details", title="Violation Closure Details"
    )
    last_run_at: Optional[datetime] = Field(
        None, description="Last run time", title="Last Run At"
    )
    ticket_closure_date: Optional[datetime] = Field(
        None, description="Ticket closure date", title="Ticket Closure Date"
    )
    impact_on_performance: Optional[str] = Field(
        None, description="Impact on performance", title="Impact On Performance"
    )
    priority: Optional[str] = Field(None, description="Priority", title="Priority")
    ticket_type: Optional[str] = Field(
        None, description="Ticket type", title="Ticket Type"
    )
    objective: Optional[str] = Field(None, description="Objective", title="Objective")
    ticket_owner: Optional[str] = Field(
        None, description="Ticket owner", title="Ticket Owner"
    )
    compatibility_issues: Optional[str] = Field(
        None, description="Compatibility issues", title="Compatibility Issues"
    )
    downtime_required: Optional[float] = Field(
        None, description="Downtime required", title="Downtime Required"
    )


class CustomTicketService(BaseModel):
    service: str = Field(..., description="Service", title="Service")
    service_display_name: str = Field(
        ..., description="Service display name", title="Service Display Name"
    )


class DeactivatePolicyTemplateRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class DeactivatePolicyTemplateResponse(BaseModel):
    pass


class DefaultCURServiceNamespaceMap(BaseModel):
    namespace: str = Field(
        ..., description="CloudWatch namespace for the service", title="Namespace"
    )
    dimensions: List[str] = Field(
        ..., description="CloudWatch dimensions for the service", title="Dimensions"
    )


class DeleteCURSavedViewRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class DeleteCURSavedViewResponse(BaseModel):
    pass


class DeleteExpiredTenantPolicyExclusionsAPIRequest(BaseModel):
    policy_ids: Optional[List[UUID4]] = Field(
        [], description="The list of tenant policy ids.", title="Policy Ids"
    )


class DeleteExpiredTenantPolicyExclusionsRequest(BaseModel):
    policy_ids: Optional[List[UUID4]] = Field(
        [], description="The list of tenant policy ids.", title="Policy Ids"
    )
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class DeleteExpiredTenantPolicyExclusionsResponse(BaseModel):
    pass


class DeleteHierarchyNodeRequest(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class DeleteHierarchyNodeResponse(BaseModel):
    pass


class DeleteResourceHierarchyMappingsByNodeIdsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_ids: List[UUID4] = Field(
        ..., description="The ids of the nodes.", title="Node Ids"
    )


class DeleteResourceHierarchyMappingsByNodeIdsResponse(BaseModel):
    pass


class DeleteSavedViewRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class DeleteSavedViewResponse(BaseModel):
    pass


class DeleteTenantAccountDailyCostRequest(BaseModel):
    id: UUID = Field(
        ...,
        description="Unique identifier for the tenant account daily cost",
        title="Id",
    )


class DeleteTenantEmbedAppsLinksResponse(BaseModel):
    pass


class DeleteTenantPolicyExclusionsResponseV2(BaseModel):
    pass


class DeleteTenantSettingsRequest(BaseModel):
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")
    settings_key: str = Field(
        ..., description="Key of the setting to delete", title="Settings Key"
    )


class DeleteTenantSettingsResponse(BaseModel):
    pass


class DeltaEventConfigDTO(BaseModel):
    id: UUID = Field(..., title="Id")
    environment: str = Field(..., title="Environment")
    noun01: Optional[str] = Field(None, title="Noun01")
    type: str = Field(..., title="Type")
    version: int = Field(..., title="Version")
    config: Dict[str, Any] = Field(..., title="Config")
    created_at: datetime = Field(..., title="Created At")
    updated_at: datetime = Field(..., title="Updated At")


class DeltaEventResource(BaseModel):
    tags: Dict[str, Any] = Field(..., description="Resource tags", title="Tags")
    account_id: str = Field(..., description="Account ID", title="Account Id")
    account_name: str = Field(..., description="Account name", title="Account Name")
    region: str = Field(..., description="Region", title="Region")
    resource_id: str = Field(..., description="Resource ID", title="Resource Id")
    usage_type: str = Field(..., description="Usage type", title="Usage Type")
    service: str = Field(..., description="Service", title="Service")
    first_usage: Union[datetime, str] = Field(
        ..., description="First usage", title="First Usage"
    )
    cost: float = Field(..., description="Cost", title="Cost")


class DeltaEventsMetricName(str, Enum):
    resource_usage_cost = "resource_usage_cost"
    no_resource_cost = "no_resource_cost"
    total_cost = "total_cost"


class DeprecatePolicyTemplateRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class DeprecatePolicyTemplateResponse(BaseModel):
    pass


class DetectChangeResponse(BaseModel):
    changed_from: Optional[str] = Field(
        None, description="Original value before change", title="Changed From"
    )
    changed_to: Optional[str] = Field(
        None, description="New value after change", title="Changed To"
    )
    resource_terminated: Optional[bool] = Field(
        None,
        description="Whether the resource was terminated",
        title="Resource Terminated",
    )
    date_of_change: Optional[datetime] = Field(
        None, description="Date when the change occurred", title="Date Of Change"
    )
    reason_for_closure: Optional[ChangeReason] = Field(
        None, description="Reason for the change"
    )
    data_found: Optional[bool] = Field(
        None, description="Whether data was found", title="Data Found"
    )
    usage_type: Optional[Union[List[str], str]] = Field(
        None, description="Usage type of the change", title="Usage Type"
    )


class DetectorMethods(str, Enum):
    REGRESSION_RESIDUAL = "REGRESSION_RESIDUAL"
    IQR = "IQR"
    ZSCORE = "ZSCORE"
    PERIOD_OVER_PERIOD_DELTA = "PERIOD_OVER_PERIOD_DELTA"
    REGRESSION_RESIDUAL_VECTORIZED = "REGRESSION_RESIDUAL_VECTORIZED"
    OTHER = "OTHER"


class DimensionGroupBy(BaseModel):
    key: str = Field(..., title="Key")
    type: str = Field(..., title="Type")


class Direction(str, Enum):
    asc = "asc"
    desc = "desc"


class DisableFeatureByNameRequest(BaseModel):
    tenant_id: UUID4 = Field(..., title="Tenant Id")
    feature_name: str = Field(
        ..., description="Name of the feature", title="Feature Name"
    )


class DisableMetricsResponse(BaseModel):
    success: Optional[bool] = Field(
        None, description="Whether the operation was successful", title="Success"
    )


class DisableTenantAnomalySettingsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_id: Optional[Any] = Field(
        None, description="The id of the node.", title="Node Id"
    )


class DisableTenantPolicyRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )


class DisableTenantPolicyResponse(BaseModel):
    pass


class DisableTenantUserRequest(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class Effort(str, Enum):
    Easy = "Easy"
    Medium = "Medium"
    Hard = "Hard"


class EmbeddingType(str, Enum):
    TAGS = "TAGS"


class EnableAllPoliciesRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class EnableAllPoliciesResponse(BaseModel):
    pass


class EnableFeatureByNameRequest(BaseModel):
    tenant_id: UUID4 = Field(..., title="Tenant Id")
    feature_name: str = Field(
        ..., description="Name of the feature", title="Feature Name"
    )


class EnableTenantAnomalySettingsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_id: Optional[Any] = Field(
        None, description="The id of the node.", title="Node Id"
    )


class EnableTenantPolicyRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )


class EnableTenantPolicyResponse(BaseModel):
    pass


class EnableTenantUserRequest(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class EntityName(BaseModel):
    title: str = Field(..., title="Title")
    subtitle: str = Field(..., title="Subtitle")


class EntityTypeModel(str, Enum):
    anomaly = "anomaly"
    ticket = "ticket"
    policy = "policy"
    setting = "setting"
    alert = "alert"
    dashboard = "dashboard"
    report = "report"
    user = "user"
    tenant = "tenant"


class EventType(str, Enum):
    ANOMALY = "ANOMALY"
    ALERT = "ALERT"
    COST_DELTA = "COST_DELTA"
    NEW_RES = "NEW_RES"


class ExampleQuery(BaseModel):
    query: str = Field(..., description="Example query", title="Query")
    description: str = Field(
        ..., description="Description of the example query", title="Description"
    )
    title: str = Field(..., description="Title of the example query", title="Title")


class ExportFileType(str, Enum):
    csv = "csv"
    xlsx = "xlsx"
    pdf = "pdf"


class FeatureIntegrationStatus(str, Enum):
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"
    INITIATED = "INITIATED"
    NOT_STARTED = "NOT_STARTED"


class Features(BaseModel):
    enable_in_policy: Optional[bool] = Field(False, title="Enable In Policy")
    enable_in_anomalies: Optional[bool] = Field(False, title="Enable In Anomalies")


class FeedbackModel(BaseModel):
    value: Optional[str] = Field(
        None,
        description="Indicates whether the feedback is positive (True) or negative (False).",
        title="Value",
    )


class FileUploadType(BaseModel):
    file_name: str = Field(..., description="File name", title="File Name")
    file_system_name: str = Field(
        ..., description="File system name", title="File System Name"
    )
    content_type: Optional[str] = Field(
        None, description="Content type", title="Content Type"
    )
    file_size: Optional[int] = Field(None, description="File size", title="File Size")


class GcpService(str, Enum):
    GCE = "GCE"
    GCS = "GCS"
    GKE = "GKE"


class GenerateSQLRequest(BaseModel):
    query: str = Field(..., description="User query", title="Query")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    service: str = Field(..., description="AWS service", title="Service")
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    selected_tables: List[str] = Field(
        ..., description="Selected tables", title="Selected Tables"
    )
    metrics: Optional[List[Dict[str, Any]]] = Field(
        ..., description="List of metrics required", title="Metrics"
    )
    is_follow_up: Optional[bool] = Field(
        False,
        description="Whether the user query is a follow-up question",
        title="Is Follow Up",
    )
    previous_query: Optional[str] = Field(
        None,
        description="Previous query if it is a follow-up question",
        title="Previous Query",
    )


class GenerationStatus(str, Enum):
    SUCCESS = "SUCCESS"
    FAILURE = "FAILURE"
    UNSUPPORTED_QUERY = "UNSUPPORTED_QUERY"
    INVALID_QUERY = "INVALID_QUERY"
    AMBIGUOUS_QUERY = "AMBIGUOUS_QUERY"


class GenericActionTypeEnum(str, Enum):
    DISABLE_RESOURCE = "DISABLE_RESOURCE"
    CHANGE_RESOURCE_VARIANT = "CHANGE_RESOURCE_VARIANT"
    CHANGE_RESOURCE_VARIANT_AGNOSTIC_COST = "CHANGE_RESOURCE_VARIANT_AGNOSTIC_COST"
    CHANGE_RESOURCE_VARIANT_USAGE_OPERATION = "CHANGE_RESOURCE_VARIANT_USAGE_OPERATION"
    REDUCE_PROVISIONED_CAPACITY = "REDUCE_PROVISIONED_CAPACITY"
    REDUCE_USAGE = "REDUCE_USAGE"
    MIGRATE_WORKLOAD = "MIGRATE_WORKLOAD"
    AUTOSCALE = "AUTOSCALE"
    DISABLE_USAGE_TYPE = "DISABLE_USAGE_TYPE"
    STOP_RESOURCE = "STOP_RESOURCE"


class GetAgentRunConfigRequest(BaseModel):
    registration_id: UUID = Field(
        ..., description="ID of the cluster registration", title="Registration Id"
    )
    cluster_token: str = Field(
        ..., description="Token for cluster authentication", title="Cluster Token"
    )


class GetAgentTypesRequest(BaseModel):
    pass


class GetAgentTypesResponse(BaseModel):
    agent_types: List[str] = Field(
        ...,
        description="List of agent types available for the context",
        title="Agent Types",
    )


class GetAgregattedTenantAccountDailyCostsRequest(BaseModel):
    tenant_id: Optional[UUID] = Field(
        None, description="Optional unique identifier for the tenant", title="Tenant Id"
    )
    account_id: Optional[str] = Field(
        None, description="Unique identifier for the account", title="Account Id"
    )
    cost_from: Optional[date] = Field(
        None, description="Start date for the cost range", title="Cost From"
    )
    cost_to: Optional[date] = Field(
        None, description="End date for the cost range", title="Cost To"
    )
    from_date: Optional[date] = Field(
        None, description="Alternative name for start date", title="From Date"
    )
    to_date: Optional[date] = Field(
        None, description="Alternative name for end date", title="To Date"
    )


class GetAgregattedTenantAccountDailyCostsResponse(BaseModel):
    cost_summaries: List[CostSummary] = Field(
        ...,
        description="List of daily cost summaries within the specified date range, sorted by date ascending",
        title="Cost Summaries",
    )


class GetAllFeaturesRequest(BaseModel):
    pass


class GetAllParentNodesRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_ids: List[UUID4] = Field(
        ..., description="The id of the node.", title="Node Ids"
    )


class GetAllTablesRequest(BaseModel):
    pass


class GetAllTenantConnectionsRequest(BaseModel):
    connection_type: ConnectionType = Field(..., description="Type of the connection")


class GetAllThreadsFilters(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="Unique identifier of the tenant", title="Tenant Id"
    )
    user_ids: Optional[List[UUID]] = Field(
        None, description="Unique identifiers of the users", title="User Ids"
    )
    agent_types: Optional[List[str]] = Field(
        None, description="Types of the workflows", title="Agent Types"
    )
    name: Optional[str] = Field(None, description="Name of the thread", title="Name")


class GetCURDataCostTimeSeriesResponse(BaseModel):
    raw_data: List = Field(..., title="Raw Data")


class GetCURDataMetricsConfigAPIRequest(BaseModel):
    resource_id: UUID = Field(..., title="Resource Id")


class GetCURDataMetricsConfigRequest(BaseModel):
    resource_id: UUID = Field(..., title="Resource Id")
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class GetCURDataMetricsResponse(BaseModel):
    measures_list: List[str] = Field(..., title="Measures List")
    metrics: List[CURDataMetrics] = Field(..., title="Metrics")
    unit: Optional[str] = Field(None, title="Unit")


class GetCURDataQueryResponse(BaseModel):
    query: str = Field(..., title="Query")


class GetCURSavedViewsResponse(BaseModel):
    saved_views: List[CURSavedViewItem] = Field(
        ..., description="List of saved views", title="Saved Views"
    )


class GetCloudAccountMetadataRequest(BaseModel):
    filters: CloudAccountMetadataFilters = Field(..., description="Filters")
    tenant_id: Optional[UUID4] = Field(None, title="Tenant Id")


class GetCloudAccountMetadataResponse(BaseModel):
    cloud_accounts_metadata: List[CloudAccountMetadata] = Field(
        ..., description="List of cloud accounts", title="Cloud Accounts Metadata"
    )


class GetCloudMetadataResponse(BaseModel):
    cloud_ids: List = Field(..., description="List of Cloud IDs", title="Cloud Ids")
    regions: List = Field(..., description="List of regions", title="Regions")
    services: List = Field(..., description="List of services", title="Services")
    tag_keys: List = Field(..., description="List of tag keys", title="Tag Keys")
    tag_values: List = Field(..., description="List of tag values", title="Tag Values")


class GetCloudMetadataWithoutTagsResponse(BaseModel):
    cloud_ids: List = Field(..., description="List of Cloud IDs", title="Cloud Ids")
    regions: List = Field(..., description="List of regions", title="Regions")
    services: List = Field(..., description="List of services", title="Services")


class GetClusterCostBreakdownRequest(BaseModel):
    tenant_id: Optional[UUID] = Field(
        None, description="ID of the tenant", title="Tenant Id"
    )
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    from_date: str = Field(..., description="Start date", title="From Date")
    to_date: str = Field(..., description="End date", title="To Date")


class GetClusterCostBreakdownResponse(BaseModel):
    data: List[Dict[str, Any]] = Field(
        ..., description="Cost breakdown data", title="Data"
    )


class GetClusterEntitiesStatsResponse(BaseModel):
    stats: List[ClusterEntitiesStats] = Field(
        ..., description="Statistics for entities", title="Stats"
    )


class GetClusterInfraStatsResponse(BaseModel):
    stats: ClusterInfraStats = Field(..., description="Infrastructure statistics")


class GetClusterMetadataRequest(BaseModel):
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")


class GetClusterStatsResponse(BaseModel):
    current_period_cost: float = Field(
        ..., description="Cost for the current period", title="Current Period Cost"
    )
    previous_period_cost: float = Field(
        ..., description="Cost for the previous period", title="Previous Period Cost"
    )
    potential_saving: float = Field(
        ..., description="Potential cost savings identified", title="Potential Saving"
    )
    cluster_count: int = Field(
        ..., description="Total number of clusters", title="Cluster Count"
    )
    efficiency_score: float = Field(
        ..., description="Calculated efficiency score", title="Efficiency Score"
    )
    cost_delta: CostDelta = Field(
        ..., description="Cost delta between current and previous period"
    )


class Granularity(str, Enum):
    hour = "hour"
    day = "day"
    week = "week"
    month = "month"
    year = "year"


class GetClustersResponse(BaseModel):
    clusters: List[ClusterData] = Field(
        ..., description="List of cluster information", title="Clusters"
    )


class GetCustomTicketDetailsRequest(BaseModel):
    tenant_id: UUID = Field(..., title="Tenant Id")
    ticket_id: UUID = Field(..., title="Ticket Id")


class GetDeltaEventDetailRequest(BaseModel):
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    event_id: UUID = Field(..., description="ID of the delta event", title="Event Id")


class GetDeltaEventLifecycleHistoryRequest(BaseModel):
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    event_id: UUID = Field(..., description="ID of the delta event", title="Event Id")


class GetDeltaEventsStatsResponse(BaseModel):
    total_events: int = Field(
        ..., description="Total number of events", title="Total Events"
    )
    total_anomaly_events: int = Field(
        ..., description="Total number of anomaly events", title="Total Anomaly Events"
    )
    total_alert_events: int = Field(
        ..., description="Total number of alert events", title="Total Alert Events"
    )
    total_cost_impact: float = Field(
        ...,
        description="Total cost impact from delta events",
        title="Total Cost Impact",
    )
    status_counts: Optional[Dict[str, Any]] = Field(
        None, description="Count of events by lifecycle status", title="Status Counts"
    )


class GetHierarchyNodeByIdRequest(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    with_info: Optional[bool] = Field(
        True,
        description="Whether to include additional info in the response.",
        title="With Info",
    )


class GetHierarchyNodeMetricsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_ids: List[UUID4] = Field(
        ..., description="The ids of the nodes.", title="Node Ids"
    )
    breakdown: Optional[bool] = Field(
        False, description="Whether to breakdown the metrics.", title="Breakdown"
    )


class GetIsFeatureAvailableRequest(BaseModel):
    entity_id: str = Field(..., title="Entity Id")


class GetIsFeatureAvailableResponse(BaseModel):
    is_available: bool = Field(..., title="Is Available")


class GetMessagesRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="Unique identifier of the tenant", title="Tenant Id"
    )
    thread_id: UUID4 = Field(
        ..., description="Unique identifier of the thread", title="Thread Id"
    )
    agent_type: str = Field(..., description="Type of the workflow", title="Agent Type")


class GetMetricsControlWebhookResponse(BaseModel):
    status: str = Field(
        ...,
        description="The status of the change manager request webhook",
        title="Status",
    )


class GetPipelineRunConfigRequestFilters(BaseModel):
    tenant_id: Optional[UUID] = Field(
        None, description="ID of the tenant", title="Tenant Id"
    )
    cluster_id: Optional[UUID] = Field(
        None, description="ID of the cluster", title="Cluster Id"
    )
    run_id: Optional[UUID] = Field(None, description="ID of the run", title="Run Id")
    from_time: Optional[datetime] = Field(
        None, description="From time", title="From Time"
    )


class GetPolicyTemplateByAliasRequest(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )


class GetPolicyTemplateByIDRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class GetPolicyTemplatePackByIdRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template pack", title="Id"
    )


class GetPolicyTicketStatsSubGroupBy(BaseModel):
    field_name: str = Field(
        ..., description="Field name to be fetched", title="Field Name"
    )
    field_value: Optional[float] = Field(
        None, description="Value of the field", title="Field Value"
    )
    field_display_name: Optional[str] = Field(
        None, description="Display name of the field", title="Field Display Name"
    )


class GetPolicyTicketsExportToResponseType(BaseModel):
    url: str = Field(..., description="downloadable url", title="Url")
    extenstion: str = Field(
        ..., description="The file extension of the file", title="Extenstion"
    )
    bucket_name: str = Field(
        ..., description="The name of the bucket", title="Bucket Name"
    )
    file_name: str = Field(..., description="The name of the file", title="File Name")


class GetPresignedUrlForCustomTicketAPIRequest(BaseModel):
    file_name: Optional[str] = Field(
        None,
        description="Name of the file. When user uploads a file, this is the name of the file",
        title="File Name",
    )
    system_file_name: Optional[str] = Field(
        None,
        description="System name of the file, that's present in S3. Will be available for Download",
        title="System File Name",
    )
    type: CustomTicketPresignedUrlType = Field(
        ..., description="Type of request: Download, Upload, Delete"
    )
    ticket_alias: Optional[str] = Field(
        None,
        description="Alias of the ticket. When downloading an already uploaded file, we'll need ticket_alias to generate key. Assuming no ticket alias is provided, we'll assume the file is present in temp-data folder",
        title="Ticket Alias",
    )
    expires_in: Optional[int] = Field(
        None,
        description="Expires in seconds. Default is 3600 seconds (1 hour)",
        title="Expires In",
    )


class GetPresignedUrlForCustomTicketRequest(BaseModel):
    file_name: Optional[str] = Field(
        None,
        description="Name of the file. When user uploads a file, this is the name of the file",
        title="File Name",
    )
    system_file_name: Optional[str] = Field(
        None,
        description="System name of the file, that's present in S3. Will be available for Download",
        title="System File Name",
    )
    type: CustomTicketPresignedUrlType = Field(
        ..., description="Type of request: Download, Upload, Delete"
    )
    ticket_alias: Optional[str] = Field(
        None,
        description="Alias of the ticket. When downloading an already uploaded file, we'll need ticket_alias to generate key. Assuming no ticket alias is provided, we'll assume the file is present in temp-data folder",
        title="Ticket Alias",
    )
    expires_in: Optional[int] = Field(
        None,
        description="Expires in seconds. Default is 3600 seconds (1 hour)",
        title="Expires In",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetPresignedUrlForCustomTicketResponse(BaseModel):
    presigned_url: str = Field(
        ..., description="Presigned URL for the operation", title="Presigned Url"
    )
    file_system_name: Optional[str] = Field(
        None,
        description="System name of the file, that's present in S3",
        title="File System Name",
    )
    expiration: int = Field(
        ..., description="Expiration time in seconds", title="Expiration"
    )


class GetRecommendationTicketRequest(BaseModel):
    ticket_id: UUID4 = Field(..., description="Ticket ID", title="Ticket Id")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetRecommendationUnitByIdRequest(BaseModel):
    id: str = Field(..., description="Recommendation Unit ID", title="Id")


class GetRecommendationUnitByIdsRequest(BaseModel):
    ids: List[str] = Field(..., description="Recommendation Unit IDs", title="Ids")


class GetRecommendationUnitsRequest(BaseModel):
    ids: List[str] = Field(..., description="Recommendation Unit ID", title="Ids")


class GetRegistrationCommandRequest(BaseModel):
    cluster_id: UUID = Field(
        ..., description="ID of the cluster to filter by", title="Cluster Id"
    )
    tenant_id: UUID = Field(
        ..., description="ID of the tenant requesting registration", title="Tenant Id"
    )


class GetRegistrationCommandResponse(BaseModel):
    command: str = Field(
        ..., description="Bash command for cluster registration", title="Command"
    )


class GetResourceAPIRequest(BaseModel):
    ol_id: Optional[UUID] = Field(
        None, description="The id of the resource catalog.", title="Ol Id"
    )
    crn: Optional[str] = Field(
        None, description="The crn of the resource catalog.", title="Crn"
    )


class GetResourceByIdRequest(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class GetResourceCatalogCostDataStatsResponse(BaseModel):
    metric_value: Optional[float] = Field(
        None, description="Fetched metric value", title="Metric Value"
    )


class GetResourceCatalogCountStatsResponse(BaseModel):
    metric_value: int = Field(
        ..., description="Fetched metric value", title="Metric Value"
    )


class GetResourceCatalogRequest(BaseModel):
    query: str = Field(..., description="User query", title="Query")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetResourceDetailsFromARNForCURAPIRequest(BaseModel):
    arn: str = Field(..., title="Arn")
    start_date: Optional[datetime] = Field(
        None,
        description="Start date for the CUR data query. Defaults to 30 days ago if not provided.",
        title="Start Date",
    )
    end_date: Optional[datetime] = Field(
        None,
        description="End date for the CUR data query. Defaults to current date if not provided.",
        title="End Date",
    )


class GetResourceDetailsFromARNForCURRequest(BaseModel):
    arn: str = Field(..., title="Arn")
    start_date: Optional[datetime] = Field(
        None,
        description="Start date for the CUR data query. Defaults to 30 days ago if not provided.",
        title="Start Date",
    )
    end_date: Optional[datetime] = Field(
        None,
        description="End date for the CUR data query. Defaults to current date if not provided.",
        title="End Date",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetResourceDetailsFromARNForCURResponse(BaseModel):
    account_name: Optional[str] = Field(
        None, description="From line_item_usage_account_name", title="Account Name"
    )
    account_id: Optional[str] = Field(
        None, description="From line_item_usage_account_id", title="Account Id"
    )
    region: Optional[str] = Field(
        None, description="From product_region", title="Region"
    )
    service: Optional[str] = Field(
        None, description="From line_item_product_code", title="Service"
    )
    service_display_name: Optional[str] = Field(
        None, description="From product_product_name", title="Service Display Name"
    )
    resource_id: Optional[str] = Field(
        None, description="From line_item_resource_id", title="Resource Id"
    )
    aggregated_cost: Optional[float] = Field(
        None, description="Sum of line_item_unblended_cost", title="Aggregated Cost"
    )


class GetResourceHierarchyMappingByOlIdRequest(BaseModel):
    resource_catalog_ol_id: UUID = Field(
        ..., description="Resource Catalog Ol Id", title="Resource Catalog Ol Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetResourceHierarchyMappingByOlIdResponse(BaseModel):
    resource_catalog_ol_id: UUID = Field(
        ..., description="Resource Catalog Ol Id", title="Resource Catalog Ol Id"
    )
    node_id: UUID = Field(..., description="The id of the node.", title="Node Id")


class GetResourceIdsListForNodeIdsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_ids: List[UUID4] = Field(
        ..., description="The ids of the nodes.", title="Node Ids"
    )


class GetResourceIdsListForNodeIdsResponse(BaseModel):
    resource_ids: List[UUID] = Field(
        ..., description="The ids of the resources.", title="Resource Ids"
    )


class GetResourceRequest(BaseModel):
    ol_id: Optional[UUID] = Field(
        None, description="The id of the resource catalog.", title="Ol Id"
    )
    crn: Optional[str] = Field(
        None, description="The crn of the resource catalog.", title="Crn"
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class GetS3AgentMetricsDataResponse(BaseModel):
    storage_cost: float = Field(
        ...,
        description="Total cost of storing objects in the bucket",
        title="Storage Cost",
    )
    retrieval_cost: float = Field(
        ...,
        description="Total cost of retrieving objects (Tier 2 requests) from the bucket",
        title="Retrieval Cost",
    )
    average_object_size: float = Field(
        ...,
        description="Average size of objects in bytes, calculated as total size divided by number of objects",
        title="Average Object Size",
    )
    number_of_objects: int = Field(
        ...,
        description="Total number of objects in the bucket or prefix. Sourced from S3 metrics or Storage Lens",
        title="Number Of Objects",
    )
    total_size: float = Field(
        ...,
        description="Total size of all objects in bytes. Sourced from S3 metrics or Storage Lens",
        title="Total Size",
    )
    tier2_requests_count: int = Field(
        ...,
        description="Number of Tier 2 (GetObject) requests made to the bucket",
        title="Tier2 Requests Count",
    )
    storage_classes: List[str] = Field(
        ...,
        description="Storage classes of the bucket (e.g. Standard, Intelligent-Tiering, Glacier)",
        title="Storage Classes",
    )
    lifecycle_policies: List[Dict[str, Any]] = Field(
        ...,
        description="Lifecycle policies applied to the bucket",
        title="Lifecycle Policies",
    )


class GetS3OptimisationInsightsRequest(BaseModel):
    resource_id: str = Field(
        ..., description="The id of the resource.", title="Resource Id"
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="The id of the tenant.", title="Tenant Id"
    )


class GetS3StatsRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="The id of the tenant.", title="Tenant Id"
    )
    resource_id: str = Field(
        ..., description="The id of the resource.", title="Resource Id"
    )


class GetServiceAndResourceTypeRequest(BaseModel):
    query: str = Field(..., description="User query", title="Query")


class GetServiceAndResourceTypeResponse(BaseModel):
    service: str = Field(..., description="Service type", title="Service")
    resource_type: str = Field(..., description="Resource type", title="Resource Type")


class GetSinglePolicyTicketForNotificationResponse(BaseModel):
    ticket: Dict[str, Any] = Field(..., title="Ticket")
    resource: Optional[Dict[str, Any]] = Field(
        None, description="Resource data of the ticket", title="Resource"
    )
    policy: Optional[Dict[str, Any]] = Field(
        None, description="Policy data of the ticket", title="Policy"
    )
    recommendation: Optional[Dict[str, Any]] = Field(
        None, description="Recommendation data of the ticket", title="Recommendation"
    )
    cost: Optional[Dict[str, Any]] = Field(
        None, description="Cost data of the ticket", title="Cost"
    )
    resource_cost_center: Optional[List[UUID]] = Field(
        None, description="List of cost center ids", title="Resource Cost Center"
    )
    anomaly_cost: Optional[Dict[str, Any]] = Field(
        None, description="Anomaly cost impact of the ticket", title="Anomaly Cost"
    )
    org_cost_center: Optional[Dict[str, Any]] = Field(
        None, description="List of cost center ids", title="Org Cost Center"
    )
    virtual_tags: Optional[List[UUID]] = Field(
        None,
        description="List of virtual tag value IDs associated with the resource",
        title="Virtual Tags",
    )


class GetSinglePolicyViolationsResponse(BaseModel):
    policy_id: UUID = Field(
        ..., description="The unique identifier of the policy", title="Policy Id"
    )
    policy_title: str = Field(..., description="Policy name", title="Policy Title")
    policy_labels: Optional[List[str]] = Field(
        [], description="List of policy labels", title="Policy Labels"
    )
    policy_services: List[str] = Field(
        ..., description="List of services", title="Policy Services"
    )
    potential_savings: Optional[float] = Field(
        None,
        description="Potential savings possible for the current policy violation",
        title="Potential Savings",
    )
    achieved_savings: Optional[float] = Field(
        None,
        description="Achieved savings for the current policy violation",
        title="Achieved Savings",
    )
    resources: int = Field(
        ...,
        description="Number of resources affected by the policy violation",
        title="Resources",
    )


class GetSingleTenantTicketAuditResponse(BaseModel):
    trigger_id: UUID4 = Field(
        ..., description="The unique identifier of the trigger", title="Trigger Id"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    created_at: datetime = Field(
        ..., description="Creation datetime of the ticket", title="Created At"
    )
    id: UUID4 = Field(..., description="The unique identifier of the audit", title="Id")
    op: str = Field(..., description="The operation performed", title="Op")
    record: Dict[str, Any] = Field(..., description="The new record", title="Record")
    old_record: Optional[Dict[str, Any]] = Field(
        None, description="The old record", title="Old Record"
    )


class GetStateRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="Unique identifier of the tenant", title="Tenant Id"
    )
    thread_id: UUID4 = Field(
        ..., description="Unique identifier of the thread", title="Thread Id"
    )
    agent_type: str = Field(..., description="Type of the workflow", title="Agent Type")


class GetStateResponse(BaseModel):
    output_state: Dict[str, Any] = Field(
        ..., description="Current state of the agent", title="Output State"
    )


class GetStorageLensEnabledRequest(BaseModel):
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class GetStorageLensEnabledResponse(BaseModel):
    is_storage_lens_enabled: bool = Field(..., title="Is Storage Lens Enabled")
    cloud_ids: Optional[List[str]] = Field(
        None, description="The cloud ids.", title="Cloud Ids"
    )


class GetTableMetadataRequest(BaseModel):
    table_names: List[str] = Field(..., description="Table names", title="Table Names")


class GetTagsResponse(BaseModel):
    tags: Dict[str, Dict[str, Any]] = Field(
        ..., description="A dictionary of tags", title="Tags"
    )


class GetTenantAchievedSavingsStatusAPIResponse(BaseModel):
    has_achieved_savings: bool = Field(
        ...,
        description="Whether the tenant has any achieved savings",
        title="Has Achieved Savings",
    )


class GetTenantAchievedSavingsStatusRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTenantAchievedSavingsStatusResponse(BaseModel):
    has_achieved_savings: bool = Field(
        ...,
        description="Whether the tenant has any achieved savings",
        title="Has Achieved Savings",
    )


class GetTenantByIDRequest(BaseModel):
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")


class GetTenantConnectionRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    connection_type: str = Field(
        ..., description="Type of the connection", title="Connection Type"
    )


class GetTenantConnectionResponse(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    connection_type: ConnectionType = Field(..., description="Type of the connection")
    username: str = Field(
        ..., description="Username for the connection", title="Username"
    )
    password: str = Field(
        ..., description="Password for the connection", title="Password"
    )
    host: str = Field(..., description="Host for the connection", title="Host")
    port: int = Field(..., description="Port for the connection", title="Port")
    database: str = Field(..., description="Database name", title="Database")
    status: ConnectionStatus = Field(..., description="Status of the connection")


class GetTenantEmbedAppsLinksRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    id: UUID4 = Field(..., description="The unique identifier of the link", title="Id")


class GetTenantPolicyByIdRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantPolicySettingsDiffAPIRequest(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    date_from: datetime = Field(
        ..., description="The date from which to fetch the diff.", title="Date From"
    )
    date_to: datetime = Field(
        ..., description="The date to which to fetch the diff.", title="Date To"
    )


class GetTenantPolicySettingsDiffRequest(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    date_from: datetime = Field(
        ..., description="The date from which to fetch the diff.", title="Date From"
    )
    date_to: datetime = Field(
        ..., description="The date to which to fetch the diff.", title="Date To"
    )
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class GetTenantPolicySettingsDiffResponse(BaseModel):
    diff: Dict[str, Any] = Field(
        ..., description="The diff of the tenant policy settings.", title="Diff"
    )


class GetTenantPolicyStatsResponse(BaseModel):
    policy_count: int = Field(..., description="Fetched metric", title="Policy Count")
    services_count: int = Field(
        ..., description="Fetched metric", title="Services Count"
    )
    last_month_policy_count: int = Field(
        ..., description="Fetched metric", title="Last Month Policy Count"
    )


class GetTenantPolicyWithSummaryRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantProviderByIDRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the Tenant Provider", title="Id"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")


class GetTenantSettingsRequest(BaseModel):
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")
    settings_key: List[str] = Field(
        ...,
        description="List of setting keys to retrieve.",
        min_length=1,
        title="Settings Key",
    )


class GetTenantUserByIDRequest(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetThreadByIdRequest(BaseModel):
    thread_id: UUID4 = Field(
        ..., description="Unique identifier of the thread", title="Thread Id"
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="Unique identifier of the tenant", title="Tenant Id"
    )


class GetTicketByIdPolicyDetailsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )


class GetTicketClosureEvidenceDataAPIRequest(BaseModel):
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )


class GetTicketClosureEvidenceDataRequest(BaseModel):
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTicketMetadataForClosureAPIRequest(BaseModel):
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )


class GetTicketMetadataForClosureRequest(BaseModel):
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    tenant_id: UUID = Field(..., title="Tenant Id")


class GetTicketStatsSubGroupBy(BaseModel):
    field_name: str = Field(
        ..., description="Field name to be fetched", title="Field Name"
    )
    field_value: Optional[float] = Field(
        None, description="Value of the field", title="Field Value"
    )
    field_display_name: Optional[str] = Field(
        None, description="Display name of the field", title="Field Display Name"
    )


class GetUntaggedResourceCatalogCountStatsResponse(BaseModel):
    metric_value: int = Field(
        ...,
        description="The count of untagged resource catalogs.",
        title="Metric Value",
    )


class GetUserCustomTicketByIdRequest(BaseModel):
    tenant_id: UUID = Field(..., title="Tenant Id")
    ticket_id: UUID = Field(..., title="Ticket Id")


class GetWorkloadStatsResponse(BaseModel):
    total_workload_count: int = Field(
        ..., description="Total number of workloads", title="Total Workload Count"
    )
    total_namespace_count: int = Field(
        ..., description="Total number of namespaces", title="Total Namespace Count"
    )
    total_cost: float = Field(
        ..., description="Total cost across all workloads", title="Total Cost"
    )
    total_potential_savings: float = Field(
        ...,
        description="Total potential savings across all workloads",
        title="Total Potential Savings",
    )
    total_efficiency: float = Field(
        ...,
        description="Total efficiency across all workloads",
        title="Total Efficiency",
    )


class GroupByType(str, Enum):
    NODE = "NODE"
    GENERAL = "GENERAL"


class GroupData(BaseModel):
    group_type: Optional[str] = Field(None, title="Group Type")
    group_name: str = Field(..., title="Group Name")
    total_value: float = Field(..., title="Total Value")
    previous_period_value: float = Field(..., title="Previous Period Value")
    delta: float = Field(..., title="Delta")
    delta_percentage: float = Field(..., title="Delta Percentage")
    time_series: List[Dict[str, Any]] = Field(..., title="Time Series")
    groups: Optional[List[GroupData]] = Field(None, title="Groups")


class HierarchyNodePathItem(BaseModel):
    node_id: Union[UUID4, str] = Field(
        ..., description="The id of the node.", title="Node Id"
    )
    name: str = Field(..., description="The name of the node.", title="Name")


class HierarchyNodeResourceFilters(BaseModel):
    key: int = Field(..., title="Key")
    field: str = Field(..., title="Field")
    operator: str = Field(..., title="Operator")
    value: Union[List, str] = Field(..., title="Value")
    json_key: Optional[str] = Field(None, title="Json Key")


class HierarchyNodeResourceMetrics(BaseModel):
    total: Optional[int] = Field(
        None, description="The total count of the resource.", title="Total"
    )
    unique: Optional[int] = Field(
        None, description="The unique count of the resource.", title="Unique"
    )
    conflicting: Optional[int] = Field(
        None, description="The conflict count of the resource.", title="Conflicting"
    )


class HierarchyNodeState(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class HierarchySharedNodeStrategy(str, Enum):
    EQUAL = "EQUAL"


class HierarchyState(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    DRAFT = "DRAFT"


class HierarchyType(str, Enum):
    DEFAULT = "DEFAULT"
    CUSTOM = "CUSTOM"
    CUR_DEFAULT = "CUR_DEFAULT"
    CUR_BACKUP = "CUR_BACKUP"


class ImpactOnPerformance(str, Enum):
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class InsertDeltaEventLifecycleHistoryRequest(BaseModel):
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    event_id: UUID = Field(
        ..., description="Ticket ID that's being edited", title="Event Id"
    )
    user_id: UUID = Field(
        ..., description="User id who performed the action", title="User Id"
    )
    action: str = Field(..., description="Type of action performed", title="Action")
    details: Optional[Dict[str, Any]] = Field(
        None, description="Details about the action", title="Details"
    )


class InsertTicketActivitiesRequest(BaseModel):
    tenant_id: UUID4 = Field(..., description="ID of the tenant", title="Tenant Id")
    trigger_id: UUID4 = Field(..., description="ID of the trigger", title="Trigger Id")


class InsightMetricsData(BaseModel):
    id: Optional[str] = Field(None, description="ID of the resource", title="Id")
    name: Optional[str] = Field(None, description="Name of the resource", title="Name")
    region: Optional[str] = Field(
        None, description="Region of the resource", title="Region"
    )
    total_cost: Optional[float] = Field(
        None, description="Total cost of the resource", title="Total Cost"
    )
    total_size: Optional[int] = Field(
        None, description="Total size of the resource in bytes", title="Total Size"
    )
    storage_cost: Optional[Dict[str, float]] = Field(
        None, description="Storage costs breakdown", title="Storage Cost"
    )
    total_objects: Optional[int] = Field(
        None, description="Total number of objects", title="Total Objects"
    )
    lifecycle_rules: Optional[List[Dict[str, Any]]] = Field(
        None, description="Lifecycle rules for the resource", title="Lifecycle Rules"
    )
    head_object_cost: Optional[float] = Field(
        None, description="Cost for head object requests", title="Head Object Cost"
    )
    get_requests_cost: Optional[float] = Field(
        None, description="Cost for get requests", title="Get Requests Cost"
    )
    head_object_count: Optional[int] = Field(
        None, description="Count of head object requests", title="Head Object Count"
    )
    put_requests_cost: Optional[float] = Field(
        None, description="Cost for put requests", title="Put Requests Cost"
    )
    copy_requests_cost: Optional[float] = Field(
        None, description="Cost for copy requests", title="Copy Requests Cost"
    )
    get_requests_count: Optional[int] = Field(
        None, description="Count of get requests", title="Get Requests Count"
    )
    list_requests_cost: Optional[float] = Field(
        None, description="Cost for list requests", title="List Requests Cost"
    )
    post_requests_cost: Optional[float] = Field(
        None, description="Cost for post requests", title="Post Requests Cost"
    )
    put_requests_count: Optional[int] = Field(
        None, description="Count of put requests", title="Put Requests Count"
    )
    versioning_enabled: Optional[bool] = Field(
        None, description="Whether versioning is enabled", title="Versioning Enabled"
    )
    average_object_size: Optional[float] = Field(
        None, description="Average size of objects", title="Average Object Size"
    )
    list_requests_count: Optional[int] = Field(
        None, description="Count of list requests", title="List Requests Count"
    )
    post_requests_count: Optional[int] = Field(
        None, description="Count of post requests", title="Post Requests Count"
    )
    delete_requests_cost: Optional[float] = Field(
        None, description="Cost for delete requests", title="Delete Requests Cost"
    )
    select_requests_cost: Optional[float] = Field(
        None, description="Cost for select requests", title="Select Requests Cost"
    )
    multipart_upload_cost: Optional[float] = Field(
        None, description="Cost for multipart uploads", title="Multipart Upload Cost"
    )
    data_transfer_out_cost: Optional[float] = Field(
        None, description="Cost for data transfer out", title="Data Transfer Out Cost"
    )
    lifecycle_transition_cost: Optional[float] = Field(
        None,
        description="Cost for lifecycle transitions",
        title="Lifecycle Transition Cost",
    )


class InsightsCategory(str, Enum):
    high_transition_cost = "high_transition_cost"
    high_standard_storage_cost = "high_standard_storage_cost"
    high_read_cost = "high_read_cost"
    high_write_cost = "high_write_cost"
    expire_versions = "expire_versions"
    high_data_transfer_out_cost = "high_data_transfer_out_cost"
    incomplete_multipart_upload = "incomplete_multipart_upload"
    non_current_version_transition = "non_current_version_transition"
    disabled_lifecycle_policy = "disabled_lifecycle_policy"
    high_list_request_cost = "high_list_request_cost"


class Join(BaseModel):
    current_table_column: str = Field(..., title="Current Table Column")
    join_table: str = Field(..., title="Join Table")
    join_table_column: str = Field(..., title="Join Table Column")


class JsonDimensionValues(BaseModel):
    keys: List[str] = Field(..., title="Keys")
    values: Dict[str, List[Optional[str]]] = Field(..., title="Values")


class KubernetesProcessorPayload(BaseModel):
    payload_key: str = Field(
        ..., description="Key to use for the payload", title="Payload Key"
    )
    api_version: str = Field(
        ..., description="Kubernetes API version", title="Api Version"
    )
    kind: str = Field(..., description="Kubernetes resource kind", title="Kind")
    params: Dict[str, Any] = Field(
        ..., description="Parameters for the Kubernetes API", title="Params"
    )


class LastRunAtUpdateItem(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    last_run_at: datetime = Field(
        ...,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class LifecycleHistoryEntry(BaseModel):
    id: UUID = Field(..., description="ID of the history entry", title="Id")
    event_id: UUID = Field(..., description="ID of the delta event", title="Event Id")
    user_id: Optional[UUID] = Field(
        None, description="User id who performed the action", title="User Id"
    )
    username: Optional[str] = Field(
        None, description="Username who performed the action", title="Username"
    )
    action: str = Field(..., description="Type of action performed", title="Action")
    details: Optional[Dict[str, Any]] = Field(
        None, description="Details about the action", title="Details"
    )
    created_at: datetime = Field(
        ..., description="When the action was performed", title="Created At"
    )
    created_by: Optional[UUID] = Field(
        None, description="User who created the entry", title="Created By"
    )


class LifecycleStatus(str, Enum):
    Open = "Open"
    Acknowledged = "Acknowledged"
    Dismissed = "Dismissed"
    Resolved = "Resolved"


class LinkDetails(BaseModel):
    link: str = Field(..., description="The link URL", title="Link")
    linkText: str = Field(
        ..., description="The text to display for the link", title="Linktext"
    )


class ListDeltaEventConfigsResponse(BaseModel):
    configs: List[DeltaEventConfigDTO] = Field(..., title="Configs")


class LogAgentRunResponse(BaseModel):
    pass


class LogPipelineRunResponse(BaseModel):
    pass


class MarkCURViewAsDefaultRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class MarkCURViewAsDefaultResponse(BaseModel):
    pass


class MarkViewAsDefaultRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class MarkViewAsDefaultResponse(BaseModel):
    pass


class MessageAuthor(BaseModel):
    user_id: Optional[UUID] = Field(
        None, description="Unique identifier of the user", title="User Id"
    )
    role: AuthorRole = Field(..., description="Role of the author (USER or ASSISTANT)")


class MessagePartType(str, Enum):
    TEXT = "TEXT"
    JSON = "JSON"
    ERROR = "ERROR"
    TOOL_REQUEST = "TOOL_REQUEST"
    TOOL_RESPONSE = "TOOL_RESPONSE"
    WIDGET = "WIDGET"
    FORM_RESPONSE = "FORM_RESPONSE"
    FEEDBACK = "FEEDBACK"


class MetricFeatureStatus(str, Enum):
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"
    FETCH_ERROR = "FETCH_ERROR"


class MetricFeatureTheme(str, Enum):
    METRICS_ENABLED = "METRICS_ENABLED"
    METRICS_NOT_ENABLED = "METRICS_NOT_ENABLED"
    METRICS_INTEGRATION_ENABLED = "METRICS_INTEGRATION_ENABLED"
    METRICS_STOPPED = "METRICS_STOPPED"
    METRICS_FETCH_ERROR = "METRICS_FETCH_ERROR"


class MetricName(str, Enum):
    mem_used_percent = "mem_used_percent"
    Memory___Committed_Bytes_In_Use = "Memory % Committed Bytes In Use"


class MetricsAggregationType(str, Enum):
    p99_maximum = "p99_maximum"
    p95_maximum = "p95_maximum"
    p90_maximum = "p90_maximum"
    avg_maximum = "avg_maximum"
    sum_maximum = "sum_maximum"
    max_maximum = "max_maximum"
    avg_average = "avg_average"
    min_minimum = "min_minimum"
    sum_sum = "sum_sum"
    sum_average = "sum_average"
    maximum = "maximum"
    average = "average"
    minimum = "minimum"
    sum = "sum"


class MetricsAvailability(BaseModel):
    instance_id: str = Field(
        ..., description="The unique identifier of the instance", title="Instance Id"
    )
    metric_name: MetricName = Field(..., description="The name of the metric")
    range_start: date = Field(
        ..., description="The start date of the range", title="Range Start"
    )
    range_end: date = Field(
        ..., description="The end date of the range", title="Range End"
    )


class MetricsControlStatus(str, Enum):
    REQUESTED = "REQUESTED"
    ENABLED = "ENABLED"
    DISABLED = "DISABLED"
    RESOURCE_NOT_FOUND = "RESOURCE_NOT_FOUND"
    FAILED_TO_INVOKE_CHANGE_MANAGER = "FAILED_TO_INVOKE_CHANGE_MANAGER"
    ABORTED = "ABORTED"
    APPROVED = "APPROVED"
    CANCELLED = "CANCELLED"
    COMPLETED = "COMPLETED"
    FAILED = "FAILED"
    INPROGRESS = "INPROGRESS"
    PENDING = "PENDING"
    PROCESSING = "PROCESSING"
    RUNBOOKINPROGRESS = "RUNBOOKINPROGRESS"
    RUNNING = "RUNNING"
    SCHEDULED = "SCHEDULED"
    SUBMITTED_TO_CUSTOMER = "SUBMITTED_TO_CUSTOMER"
    SUCCEEDED = "SUCCEEDED"
    SUCCESS = "SUCCESS"
    TERMINATED = "TERMINATED"
    TIMED_OUT = "TIMED_OUT"
    TimedOut = "TimedOut"


class MetricsControlStatusCount(BaseModel):
    status: MetricsControlStatus = Field(
        ..., description="The status of the metrics control"
    )
    count: int = Field(
        ..., description="The count of the metrics control", title="Count"
    )


class MetricsValueUnit(BaseModel):
    value: int = Field(..., description="The value of the metric.", title="Value")
    unit: Optional[str] = Field(
        None, description="The unit of the value.", title="Unit"
    )


class MigrateTenantConnectionRequest(BaseModel):
    pass


class MigrateTenantConnectionResponse(BaseModel):
    pass


class ModificationType(str, Enum):
    RESOURCE_DELETED = "RESOURCE_DELETED"
    RESOURCE_STOPPED = "RESOURCE_STOPPED"
    RESOURCE_REPLACED = "RESOURCE_REPLACED"
    RESOURCE_DOWNSIZED_RIGHTSIZED = "RESOURCE_DOWNSIZED_RIGHTSIZED"
    RESOURCE_CONFIGURATION_CHANGED = "RESOURCE_CONFIGURATION_CHANGED"
    RESOURCE_UPGRADED = "RESOURCE_UPGRADED"
    RESOURCE_SCHEDULED = "RESOURCE_SCHEDULED"


class NamespaceEfficiencyGroup(BaseModel):
    namespace_name: str = Field(
        ..., description="Name of the namespace", title="Namespace Name"
    )
    total_efficiency: float = Field(
        ...,
        description="Total efficiency score for the namespace",
        title="Total Efficiency",
    )
    total_cost: float = Field(
        ..., description="Total cost for the namespace", title="Total Cost"
    )
    total_potential_savings: float = Field(
        ...,
        description="Total potential savings for the namespace",
        title="Total Potential Savings",
    )


class NaviraFullLogResponse(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique integer identifier for the record.", title="Id"
    )
    request: Dict[str, Any] = Field(
        ..., description="The query data represented as a JSON object.", title="Request"
    )
    created_at: Optional[datetime] = Field(None, title="Created At")
    response: Dict[str, Any] = Field(
        ..., description="The response represented as a JSON object.", title="Response"
    )


class NaviraLog(BaseModel):
    query_id: UUID = Field(..., title="Query Id")
    user_id: UUID = Field(..., title="User Id")
    username: str = Field(..., title="Username")
    query: str = Field(..., title="Query")
    status: str = Field(..., title="Status")
    sql_query_translation: str = Field(..., title="Sql Query Translation")
    created_at: datetime = Field(..., title="Created At")
    updated_at: datetime = Field(..., title="Updated At")


class NaviraLogFeedbackUpdateApiRequest(BaseModel):
    feedback: FeedbackModel = Field(
        ..., description="Feedback associated with the log."
    )
    navira_log_id: UUID4 = Field(
        ..., description="The id of the navira log.", title="Navira Log Id"
    )


class NaviraLogResponse(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique integer identifier for the record.", title="Id"
    )
    request: Dict[str, Any] = Field(
        ..., description="The query data represented as a JSON object.", title="Request"
    )
    created_at: Optional[datetime] = Field(None, title="Created At")


class NaviraLogUpdateRequest(BaseModel):
    user_id: Optional[UUID4] = Field(
        None, description="User ID (UUID4) associated with the log.", title="User Id"
    )
    request: Optional[Dict[str, Any]] = Field(
        None,
        description="The query data represented as a JSON object.",
        title="Request",
    )
    status: Optional[GenerationStatus] = Field(
        None, description="The status of the log."
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description="The response data associated with the query, represented as a JSON object.",
        title="Response",
    )
    extradata: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional metadata associated with the log.",
        title="Extradata",
    )
    feedback: Optional[FeedbackModel] = Field(
        None, description="Feedback associated with the log."
    )


class NotificationEntityType(str, Enum):
    ticket = "ticket"
    anomaly = "anomaly"


class NotificationResponse(BaseModel):
    pass


class NotificationType(str, Enum):
    ticket_updated = "ticket_updated"
    ticket_processed = "ticket_processed"
    ticket_processed_updated = "ticket_processed_updated"
    anomaly_detected = "anomaly_detected"
    anomaly_processed = "anomaly_processed"


class OrItem(BaseModel):
    gte: Optional[List] = Field(None, title="Gte")
    gt: Optional[List] = Field(None, title="Gt")


class OrganizationFilters(BaseModel):
    ids: Optional[List[UUID4]] = Field(None, title="Ids")
    names: Optional[List[str]] = Field(None, title="Names")
    organization_states: Optional[List[str]] = Field(None, title="Organization States")


class OrganizationState(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class OutputStatus(str, Enum):
    VALID_QUERY = "VALID_QUERY"
    FAILURE = "FAILURE"
    UNSUPPORTED_QUERY = "UNSUPPORTED_QUERY"
    INVALID_QUERY = "INVALID_QUERY"
    AMBIGUOUS_QUERY = "AMBIGUOUS_QUERY"
    NO_MATCHING_FILTER = "NO_MATCHING_FILTER"


class OverrideAchievedSavingsConfigurationEnum(str, Enum):
    SHIFT_TO_GRAVITON = "SHIFT_TO_GRAVITON"
    SHIFT_TO_AMD = "SHIFT_TO_AMD"
    SHIFT_TO_VALKEY = "SHIFT_TO_VALKEY"


class OverrideTenantPolicyConfigAPIRequest(BaseModel):
    config_overrides: Dict[str, Any] = Field(
        ...,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )


class OverrideTenantPolicyConfigRequest(BaseModel):
    config_overrides: Dict[str, Any] = Field(
        ...,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    tenant_policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Tenant Policy Id"
    )


class PaginationFields(BaseModel):
    total_items: int = Field(
        ..., description="Total number of items.", title="Total Items"
    )
    total_pages: int = Field(
        ..., description="Total number of pages.", title="Total Pages"
    )
    current_page: int = Field(
        ..., description="Current page number.", title="Current Page"
    )
    page_size: int = Field(
        ..., description="Number of items per page.", title="Page Size"
    )


class PaginationMetadata(BaseModel):
    page: int = Field(..., title="Page")
    page_size: int = Field(..., title="Page Size")
    total_items: int = Field(..., title="Total Items")
    total_pages: int = Field(..., title="Total Pages")


class PaginationParams(BaseModel):
    page: Optional[int] = Field(1, description="Page number (1-indexed).", title="Page")
    page_size: Optional[int] = Field(
        10, description="Number of items per page.", title="Page Size"
    )


class PaginationRequest(BaseModel):
    page: Optional[conint(ge=1)] = Field(1, title="Page")
    page_size: Optional[conint(ge=1, le=100)] = Field(10, title="Page Size")


class PasswordChangeEmailRequest(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class PasswordChangeEmailResponse(BaseModel):
    message: str = Field(
        ..., description="Message for password change email response", title="Message"
    )


class PatternCURServiceNamespaceMap(BaseModel):
    pattern: str = Field(
        ..., description="Regex pattern to match resource ARN", title="Pattern"
    )
    namespace: str = Field(
        ..., description="CloudWatch namespace for the service", title="Namespace"
    )
    dimensions: List[str] = Field(
        ..., description="CloudWatch dimensions for the service", title="Dimensions"
    )
    value_pattern: List[str] = Field(
        ..., description="Pattern to format dimension values", title="Value Pattern"
    )


class PipelineRunStatus(str, Enum):
    NOT_STARTED = "NOT_STARTED"
    SUCCESS = "SUCCESS"
    FAILED = "FAILED"
    ABORTED = "ABORTED"
    IN_PROGRESS = "IN_PROGRESS"
    PARTIAL_FAILURE = "PARTIAL_FAILURE"


class Plan(str, Enum):
    Enterprise = "Enterprise"
    Standard = "Standard"
    Free = "Free"
    Custom = "Custom"


class PolicyCategory(str, Enum):
    COST_SAVING = "COST_SAVING"
    BUDGETING = "BUDGETING"
    SECURITY = "SECURITY"
    COMPLIANCE = "COMPLIANCE"


class PolicyClosureMethod(str, Enum):
    MANUAL = "MANUAL"
    AUTOMATIC = "AUTOMATIC"
    HYBRID = "HYBRID"


class PolicyExclusionType(str, Enum):
    FEATURELESS = "FEATURELESS"
    FEATURED = "FEATURED"
    GLOBAL = "GLOBAL"
    TEMPORARY = "TEMPORARY"


class PolicyExecutionType(str, Enum):
    DETECTIVE = "DETECTIVE"
    PREVENTIVE = "PREVENTIVE"


class PolicyRecommendationParams(BaseModel):
    current: Optional[Dict[str, Any]] = Field(
        None,
        description="The current value of the policy template recommendation",
        title="Current",
    )
    target: Optional[Dict[str, Any]] = Field(
        None,
        description="The target value of the policy template recommendation",
        title="Target",
    )


class PolicyTagValue(BaseModel):
    tag_value: str = Field(..., description="The value of the tag", title="Tag Value")
    display_name: str = Field(
        ..., description="Display name for the tag value", title="Display Name"
    )


class PolicyTemplatePackDetails(BaseModel):
    source_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the source of the policy template pack.",
        title="Source Schema",
    )


class PolicyTemplatePackState(str, Enum):
    DRAFT = "DRAFT"
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    DEPRECATED = "DEPRECATED"


class PolicyTemplateRecommendationUnits(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    params: PolicyRecommendationParams = Field(
        ..., description="Policy template Recommendation Params"
    )
    is_hidden: Optional[bool] = Field(
        False,
        description="Whether the recommendation unit is hidden",
        title="Is Hidden",
    )


class PolicyTemplateState(str, Enum):
    DRAFT = "DRAFT"
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    DEPRECATED = "DEPRECATED"


class PolicyTicketStatus(str, Enum):
    TO_DO = "TO_DO"
    IN_PROGRESS = "IN_PROGRESS"
    DONE = "DONE"
    DONE_AND_WAITING = "DONE_AND_WAITING"
    DONE_AND_FLAKY = "DONE_AND_FLAKY"
    INVALID = "INVALID"
    SYSTEM_INVALID = "SYSTEM_INVALID"
    DONE_AND_VERIFIED = "DONE_AND_VERIFIED"
    DEPRECATED = "DEPRECATED"


class PostNaviraLogsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )


class PostTenantUsersRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )


class Priority(str, Enum):
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class PriortizedTicketStats(BaseModel):
    field_name: str = Field(
        ..., description="Name of the priority field", title="Field Name"
    )
    field_value: float = Field(
        ..., description="Value of the priority field", title="Field Value"
    )


class ProcessorType(str, Enum):
    API_PROCESSOR = "API_PROCESSOR"
    PROMETHEUS_PROCESSOR = "PROMETHEUS_PROCESSOR"
    KUBERNETES_PROCESSOR = "KUBERNETES_PROCESSOR"


class PrometheusProcessorConfig(BaseModel):
    processor_type: Optional[ProcessorType] = "PROMETHEUS_PROCESSOR"
    processor_name: str = Field(
        ..., description="Name of the processor", title="Processor Name"
    )
    base_url: str = Field(
        ..., description="Base URL for the Prometheus server", title="Base Url"
    )
    path: str = Field(..., description="API endpoint path", title="Path")
    type: str = Field(..., description="HTTP method type", title="Type")
    headers: Optional[Dict[str, str]] = Field(
        None, description="HTTP headers", title="Headers"
    )
    payloads: Optional[Dict[str, ApiProcessorPayload]] = Field(
        None, description="Query configurations", title="Payloads"
    )


class Provider(str, Enum):
    AWS = "AWS"
    GCP = "GCP"
    AZURE = "AZURE"


class PublishCustomHierarchyRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class PublishCustomHierarchyResponse(BaseModel):
    pass


class QueryDetailsDerivedVariables(BaseModel):
    key: str = Field(..., description="Key", title="Key")
    value_type: str = Field(..., description="Value Type", title="Value Type")
    source_key: str = Field(..., description="Source Key", title="Source Key")


class QueryExecutorRequest(BaseModel):
    query: str = Field(..., description="sql query", title="Query")
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )


class QueryFilters(BaseModel):
    dimension: Optional[str] = Field(
        None, description="dimension filter", title="Dimension"
    )
    operator: Optional[str] = Field(
        None, description="Operator filter", title="Operator"
    )
    values: Optional[List[str]] = Field(
        None, description="List of values filter", title="Values"
    )


class QueryOrder(str, Enum):
    asc = "asc"
    desc = "desc"


class ReCreateResourceHierarchyMappingsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class ReCreateResourceHierarchyMappingsResponse(BaseModel):
    pass


class RecommendationEngine(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    action_type_id: int = Field(
        ..., description="Action Type ID", title="Action Type Id"
    )
    sequence: int = Field(..., description="Sequence", title="Sequence")
    priority: int = Field(..., description="Priority", title="Priority")
    effort: Effort = Field(..., description="Effort")
    instance_type: Optional[str] = Field(
        None, description="Instance Type", title="Instance Type"
    )
    instance_family: Optional[str] = Field(
        None, description="Instance Family", title="Instance Family"
    )
    price_per_unit: str = Field(
        ..., description="Price Per Unit", title="Price Per Unit"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    unit: str = Field(..., description="Unit", title="Unit")
    new_cost: str = Field(..., description="New Cost", title="New Cost")
    current_cost: str = Field(..., description="Current Cost", title="Current Cost")
    potential_saving: str = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    description: str = Field(..., description="Description", title="Description")
    begin_range: str = Field(..., description="Begin Range", title="Begin Range")
    end_range: str = Field(..., description="End Range", title="End Range")
    attributes: Dict[str, Any] = Field(
        ..., description="Attributes", title="Attributes"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )


class RecommendationEngineResponse(BaseModel):
    recommendations: List[RecommendationEngine] = Field(
        ..., description="Recommendations", title="Recommendations"
    )


class RecommendationParams(BaseModel):
    current: Dict[str, Any] = Field(..., description="Current", title="Current")
    target: Dict[str, Any] = Field(..., description="Target", title="Target")


class RecommendationQueryDetails(BaseModel):
    derived_variables: List[QueryDetailsDerivedVariables] = Field(
        ..., description="Actual", title="Derived Variables"
    )
    query: str = Field(
        ..., description="Sql Query to get the recommendation", title="Query"
    )


class RecommendationTicket(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the Recommendation Ticket", title="Id"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    action_type_id: int = Field(
        ..., description="Action Type ID", title="Action Type Id"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    sequence: int = Field(..., description="Sequence", title="Sequence")
    effort: Effort = Field(..., description="Effort")
    price_per_unit: str = Field(
        ..., description="Price Per Unit", title="Price Per Unit"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    unit: str = Field(..., description="Unit", title="Unit")
    new_cost: str = Field(..., description="New Cost", title="New Cost")
    current_cost: str = Field(..., description="Current Cost", title="Current Cost")
    potential_saving: str = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    description: str = Field(..., description="Description", title="Description")
    begin_range: str = Field(..., description="Begin Range", title="Begin Range")
    end_range: str = Field(..., description="End Range", title="End Range")
    attributes: Dict[str, Any] = Field(
        ..., description="Attributes", title="Attributes"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )
    created_at: datetime = Field(
        ..., description="Datetime of ticket creation", title="Created At"
    )


class RecommendationTicketAPIRequestInput(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    action_type_id: int = Field(
        ..., description="Action Type ID", title="Action Type Id"
    )
    sequence: int = Field(..., description="Sequence", title="Sequence")
    priority: int = Field(..., description="Priority", title="Priority")
    effort: Effort = Field(..., description="Effort")
    instance_type: Optional[str] = Field(
        None, description="Instance Type", title="Instance Type"
    )
    instance_family: Optional[str] = Field(
        None, description="Instance Family", title="Instance Family"
    )
    price_per_unit: Union[float, str] = Field(
        ..., description="Price Per Unit", title="Price Per Unit"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    unit: str = Field(..., description="Unit", title="Unit")
    new_cost: Union[float, str] = Field(..., description="New Cost", title="New Cost")
    current_cost: Union[float, str] = Field(
        ..., description="Current Cost", title="Current Cost"
    )
    potential_saving: Union[float, str] = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    description: str = Field(..., description="Description", title="Description")
    begin_range: Union[float, str] = Field(
        ..., description="Begin Range", title="Begin Range"
    )
    end_range: Union[float, str] = Field(
        ..., description="End Range", title="End Range"
    )
    attributes: Dict[str, Any] = Field(
        ..., description="Attributes", title="Attributes"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    id: Optional[UUID4] = Field(
        None, description="The unique identifier of the ticket", title="Id"
    )


class RecommendationTicketAPIRequestOutput(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    action_type_id: int = Field(
        ..., description="Action Type ID", title="Action Type Id"
    )
    sequence: int = Field(..., description="Sequence", title="Sequence")
    priority: int = Field(..., description="Priority", title="Priority")
    effort: Effort = Field(..., description="Effort")
    instance_type: Optional[str] = Field(
        None, description="Instance Type", title="Instance Type"
    )
    instance_family: Optional[str] = Field(
        None, description="Instance Family", title="Instance Family"
    )
    price_per_unit: str = Field(
        ..., description="Price Per Unit", title="Price Per Unit"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    unit: str = Field(..., description="Unit", title="Unit")
    new_cost: str = Field(..., description="New Cost", title="New Cost")
    current_cost: str = Field(..., description="Current Cost", title="Current Cost")
    potential_saving: str = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    description: str = Field(..., description="Description", title="Description")
    begin_range: str = Field(..., description="Begin Range", title="Begin Range")
    end_range: str = Field(..., description="End Range", title="End Range")
    attributes: Dict[str, Any] = Field(
        ..., description="Attributes", title="Attributes"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    id: Optional[UUID4] = Field(
        None, description="The unique identifier of the ticket", title="Id"
    )


class RecommendationTicketRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    ticket_ids: List[UUID4] = Field(
        ..., description="The unique identifier of the tickets", title="Ticket Ids"
    )
    recommendations: List[RecommendationTicketAPIRequestInput] = Field(
        ..., description="The unique identifier of the tenant", title="Recommendations"
    )


class RecommendationTicketResponse(BaseModel):
    recommendations: List[RecommendationTicketAPIRequestOutput] = Field(
        ..., description="The recommendations", title="Recommendations"
    )


class RecommendationUnit(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_alias: Optional[str] = Field(
        None, description="Action type identifier", title="Action Type Alias"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )
    target_attribute: Optional[str] = Field(
        None,
        description="The target attribute of the recommendation",
        title="Target Attribute",
    )
    usage_type_pattern: Optional[str] = Field(
        None,
        description="The usage type pattern of the recommendation",
        title="Usage Type Pattern",
    )
    source_usage_type_pattern: Optional[str] = Field(
        None,
        description="The source usage type pattern of the recommendation",
        title="Source Usage Type Pattern",
    )
    target_usage_type_pattern: Optional[str] = Field(
        None,
        description="The target usage type pattern of the recommendation",
        title="Target Usage Type Pattern",
    )
    source_delimiter: Optional[str] = Field(
        None,
        description="The source delimiter of the recommendation",
        title="Source Delimiter",
    )
    target_delimiter: Optional[str] = Field(
        None,
        description="The target delimiter of the recommendation",
        title="Target Delimiter",
    )
    override_achieved_savings_configuration: Optional[
        OverrideAchievedSavingsConfigurationEnum
    ] = Field(
        None,
        description="The override achieved savings configuration of the recommendation",
    )


class RecommendationUnitFilters(BaseModel):
    search_query: Optional[str] = Field(
        None,
        description="Search query to filter recommendation units, applies on title, subtitle and description.",
        title="Search Query",
    )
    ids: Optional[List[str]] = Field(
        [], description="Filter by recommendation unit id/alias.", title="Ids"
    )
    services: Optional[List[str]] = Field(
        [], description="Filter by Services", title="Services"
    )
    action_type_alias: Optional[List[str]] = Field(
        [], description="Filter by action type.", title="Action Type Alias"
    )
    priorities: Optional[List[int]] = Field(
        [], description="Filter by priorities.", title="Priorities"
    )
    efforts: Optional[List[Effort]] = Field(
        [], description="Filter by effort.", title="Efforts"
    )


class RecommendationUnitWithActionType(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_alias: Optional[str] = Field(
        None, description="Action type identifier", title="Action Type Alias"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )
    target_attribute: Optional[str] = Field(
        None,
        description="The target attribute of the recommendation",
        title="Target Attribute",
    )
    usage_type_pattern: Optional[str] = Field(
        None,
        description="The usage type pattern of the recommendation",
        title="Usage Type Pattern",
    )
    source_usage_type_pattern: Optional[str] = Field(
        None,
        description="The source usage type pattern of the recommendation",
        title="Source Usage Type Pattern",
    )
    target_usage_type_pattern: Optional[str] = Field(
        None,
        description="The target usage type pattern of the recommendation",
        title="Target Usage Type Pattern",
    )
    source_delimiter: Optional[str] = Field(
        None,
        description="The source delimiter of the recommendation",
        title="Source Delimiter",
    )
    target_delimiter: Optional[str] = Field(
        None,
        description="The target delimiter of the recommendation",
        title="Target Delimiter",
    )
    override_achieved_savings_configuration: Optional[
        OverrideAchievedSavingsConfigurationEnum
    ] = Field(
        None,
        description="The override achieved savings configuration of the recommendation",
    )
    action_type_service: Optional[str] = Field(
        None, description="Action type service", title="Action Type Service"
    )
    action_type_title: Optional[str] = Field(
        None, description="Action type title", title="Action Type Title"
    )
    action_type_subtitle: Optional[str] = Field(
        None, description="Action type subtitle", title="Action Type Subtitle"
    )
    action_type_description: Optional[str] = Field(
        None, description="Action type description", title="Action Type Description"
    )
    action_type_base_action: Optional[GenericActionTypeEnum] = Field(
        None, description="Action type base action"
    )


class RecommendedCostAnalysis(BaseModel):
    current_monthly_cost: float = Field(..., title="Current Monthly Cost")
    target_monthly_cost: float = Field(..., title="Target Monthly Cost")
    transition_cost: float = Field(..., title="Transition Cost")
    monthly_savings: float = Field(..., title="Monthly Savings")
    annual_savings: float = Field(..., title="Annual Savings")


class RefreshChangeManagerStatusRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    change_manager_event_ids: Optional[List[str]] = Field(
        None,
        description="The unique identifier of the change manager events",
        title="Change Manager Event Ids",
    )


class RefreshChangeManagerStatusResponse(BaseModel):
    status: str = Field(
        ..., description="The status of the change manager request", title="Status"
    )


class RegisterAllFeaturesRequest(BaseModel):
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class RegistrationStatus(str, Enum):
    PENDING = "PENDING"
    CONNECTED = "CONNECTED"
    FAILED = "FAILED"
    DEPRECATED = "DEPRECATED"


class RelationshipConfigItem(BaseModel):
    relationship_type: str = Field(..., title="Relationship Type")
    join: Join


class ResourceCatalog(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    resource_id: Optional[str] = Field(
        None, description="Id of the Resource", title="Resource Id"
    )
    resource_url_template: str = Field(
        ..., description="Resource url template", title="Resource Url Template"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")
    tags: Optional[Dict[str, Any]] = Field(
        None, description="Resource tags.", title="Tags"
    )
    additional_info: Dict[str, Any] = Field(
        ..., description="Additional info of the resource.", title="Additional Info"
    )
    run_id: Optional[UUID4] = Field(None, description="The run id.", title="Run Id")
    last_updated_at: Optional[datetime] = Field(
        None, description="The last updated at.", title="Last Updated At"
    )
    account_name: Optional[str] = Field(
        None, description="Cloud name of the account", title="Account Name"
    )
    tagged_resource: Optional[bool] = Field(
        False,
        description="true if the resource have tags tagged resource",
        title="Tagged Resource",
    )
    resource_created_at: Optional[datetime] = Field(
        None, description="The resource creation date", title="Resource Created At"
    )
    resource_updated_at: Optional[datetime] = Field(
        None, description="The resource updating date", title="Resource Updated At"
    )


class ResourceCatalogListRequest(BaseModel):
    ol_ids: List[UUID] = Field(
        ..., description="The ids of the resource catalogs.", title="Ol Ids"
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class ResourceCatalogRequest(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class ResourceCatalogWithCost(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    resource_id: Optional[str] = Field(
        None, description="Id of the Resource", title="Resource Id"
    )
    resource_url_template: str = Field(
        ..., description="Resource url template", title="Resource Url Template"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")
    tags: Optional[Dict[str, Any]] = Field(
        None, description="Resource tags.", title="Tags"
    )
    additional_info: Dict[str, Any] = Field(
        ..., description="Additional info of the resource.", title="Additional Info"
    )
    run_id: Optional[UUID4] = Field(None, description="The run id.", title="Run Id")
    last_updated_at: Optional[datetime] = Field(
        None, description="The last updated at.", title="Last Updated At"
    )
    account_name: Optional[str] = Field(
        None, description="Cloud name of the account", title="Account Name"
    )
    tagged_resource: Optional[bool] = Field(
        False,
        description="true if the resource have tags tagged resource",
        title="Tagged Resource",
    )
    resource_created_at: Optional[datetime] = Field(
        None, description="The resource creation date", title="Resource Created At"
    )
    resource_updated_at: Optional[datetime] = Field(
        None, description="The resource updating date", title="Resource Updated At"
    )
    previous_month_cost: Optional[float] = Field(
        None, description="The previous month cost.", title="Previous Month Cost"
    )
    current_month_cost: Optional[float] = Field(
        None, description="The current month cost.", title="Current Month Cost"
    )


class ResourceHierarchyMappingResponse(BaseModel):
    pass


class ResourceInformation(BaseModel):
    resource_id: Optional[str] = Field(
        None, description="Resource id", title="Resource Id"
    )
    resource_file: Optional[FileUploadType] = Field(
        None, description="Resource file S3 Link"
    )


class ResourceMetricConfig(BaseModel):
    resource_type: Optional[str] = Field(None, title="Resource Type")
    metric_table_additional_columns: Optional[List[str]] = Field(
        None, title="Metric Table Additional Columns"
    )
    resource_select_statement: Optional[str] = Field(
        None, title="Resource Select Statement"
    )


class ResourceRelationshipResponse(BaseModel):
    relationship_type: str = Field(
        ..., description="The relationship type", title="Relationship Type"
    )
    direction: str = Field(
        ..., description="The relationship direction", title="Direction"
    )
    resource: ResourceCatalog = Field(..., description="The resource details.")


class ResourceTicketClosureMetadataMixin(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    resource_id: Optional[str] = Field(
        None, description="Id of the Resource", title="Resource Id"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")


class ResourceUtilization(BaseModel):
    resource_type: str = Field(
        ..., description="Type of resource", title="Resource Type"
    )
    unit: str = Field(..., description="Unit of the resource", title="Unit")
    label: str = Field(..., description="Label of the resource", title="Label")
    tool_tip: str = Field(..., description="Tooltip of the resource", title="Tool Tip")
    utilized: float = Field(
        ..., description="Currently utilized amount", title="Utilized"
    )
    requested: float = Field(
        ..., description="Amount requested by workloads", title="Requested"
    )
    provisioned: float = Field(
        ..., description="Total available capacity", title="Provisioned"
    )
    utilization_percentage: float = Field(
        ...,
        description="Utilization percentage (0-100)",
        title="Utilization Percentage",
    )
    is_underutilized: Optional[bool] = Field(
        False,
        description="Whether the resource is underutilized",
        title="Is Underutilized",
    )
    utilized_tooltip: Optional[str] = Field(
        None,
        description="Tooltip explaining the utilized metric",
        title="Utilized Tooltip",
    )
    requested_tooltip: Optional[str] = Field(
        None,
        description="Tooltip explaining the requested metric",
        title="Requested Tooltip",
    )
    provisioned_tooltip: Optional[str] = Field(
        None,
        description="Tooltip explaining the provisioned metric",
        title="Provisioned Tooltip",
    )


class ResponseAPISendEmailToEnableMemoryMetricsResponse(BaseModel):
    data: APISendEmailToEnableMemoryMetricsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseActivatePolicyTemplateResponse(BaseModel):
    data: ActivatePolicyTemplateResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseAddTenantPolicyExclusionsResponseV2(BaseModel):
    data: AddTenantPolicyExclusionsResponseV2
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseBulkDeleteResponse(BaseModel):
    data: BulkDeleteResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCloudwatchMetricDataResponse(BaseModel):
    data: CloudwatchMetricDataResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateCURSavedViewResponse(BaseModel):
    data: CreateCURSavedViewResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateDefaultHierarchyResponse(BaseModel):
    data: CreateDefaultHierarchyResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateHierarchyRootNodeResponse(BaseModel):
    data: CreateHierarchyRootNodeResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateTenantCustomTicketResponse(BaseModel):
    data: CreateTenantCustomTicketResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateTenantTicketsResponse(BaseModel):
    data: CreateTenantTicketsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateUserTenantMappingResponse(BaseModel):
    data: CreateUserTenantMappingResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDeleteCURSavedViewResponse(BaseModel):
    data: DeleteCURSavedViewResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDeleteExpiredTenantPolicyExclusionsResponse(BaseModel):
    data: DeleteExpiredTenantPolicyExclusionsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDeleteHierarchyNodeResponse(BaseModel):
    data: DeleteHierarchyNodeResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDeleteSavedViewResponse(BaseModel):
    data: DeleteSavedViewResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDeleteTenantEmbedAppsLinksResponse(BaseModel):
    data: DeleteTenantEmbedAppsLinksResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDeleteTenantPolicyExclusionsResponseV2(BaseModel):
    data: DeleteTenantPolicyExclusionsResponseV2
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDeltaEventConfigDTO(BaseModel):
    data: DeltaEventConfigDTO
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDeprecatePolicyTemplateResponse(BaseModel):
    data: DeprecatePolicyTemplateResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDisableTenantPolicyResponse(BaseModel):
    data: DisableTenantPolicyResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseEnableAllPoliciesResponse(BaseModel):
    data: EnableAllPoliciesResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseEnableTenantPolicyResponse(BaseModel):
    data: EnableTenantPolicyResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetCURSavedViewsResponse(BaseModel):
    data: GetCURSavedViewsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetCloudAccountMetadataResponse(BaseModel):
    data: GetCloudAccountMetadataResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetCloudMetadataResponse(BaseModel):
    data: GetCloudMetadataResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetCloudMetadataWithoutTagsResponse(BaseModel):
    data: GetCloudMetadataWithoutTagsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetDeltaEventsStatsResponse(BaseModel):
    data: GetDeltaEventsStatsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPresignedUrlForCustomTicketResponse(BaseModel):
    data: GetPresignedUrlForCustomTicketResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetResourceCatalogCostDataStatsResponse(BaseModel):
    data: GetResourceCatalogCostDataStatsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetResourceCatalogCountStatsResponse(BaseModel):
    data: GetResourceCatalogCountStatsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetStorageLensEnabledResponse(BaseModel):
    data: GetStorageLensEnabledResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantAchievedSavingsStatusAPIResponse(BaseModel):
    data: GetTenantAchievedSavingsStatusAPIResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantPolicySettingsDiffResponse(BaseModel):
    data: GetTenantPolicySettingsDiffResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantPolicyStatsResponse(BaseModel):
    data: GetTenantPolicyStatsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantPolicyWithSummaryRequest(BaseModel):
    data: GetTenantPolicyWithSummaryRequest
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetUntaggedResourceCatalogCountStatsResponse(BaseModel):
    data: GetUntaggedResourceCatalogCountStatsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseHierarchyNodeResourceMetrics(BaseModel):
    data: HierarchyNodeResourceMetrics
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseListDeltaEventConfigsResponse(BaseModel):
    data: ListDeltaEventConfigsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseMarkCURViewAsDefaultResponse(BaseModel):
    data: MarkCURViewAsDefaultResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseMarkViewAsDefaultResponse(BaseModel):
    data: MarkViewAsDefaultResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseNaviraLogResponse(BaseModel):
    data: NaviraLogResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponsePasswordChangeEmailResponse(BaseModel):
    data: PasswordChangeEmailResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseRecommendationEngineResponse(BaseModel):
    data: RecommendationEngineResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseRecommendationTicketResponse(BaseModel):
    data: RecommendationTicketResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseResourceHierarchyMappingResponse(BaseModel):
    data: ResourceHierarchyMappingResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResultsProcessingConfig(BaseModel):
    traverse_result: List[str] = Field(
        ..., description="Path to traverse in the result", title="Traverse Result"
    )


class Risk(str, Enum):
    LOWEST = "LOWEST"
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class RuleType(str, Enum):
    SQL = "SQL"
    PYTHON = "PYTHON"


class S3BucketDetailsRequest(BaseModel):
    resource_id: str = Field(
        ..., description="The id of the resource.", title="Resource Id"
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="The id of the tenant.", title="Tenant Id"
    )


class S3BucketDetailsResponse(BaseModel):
    cloud_id: str = Field(..., title="Cloud Id")
    account_name: str = Field(..., title="Account Name")
    region: str = Field(..., title="Region")
    title: str = Field(..., title="Title")
    versioning_enabled: Optional[bool] = Field(..., title="Versioning Enabled")
    lifecycle_rules: Optional[List[Dict[str, Any]]] = Field(
        None, title="Lifecycle Rules"
    )
    storage_classes: Optional[List[str]] = Field(None, title="Storage Classes")
    service_display_name: Optional[str] = Field("S3", title="Service Display Name")
    tags: Optional[Dict[str, str]] = Field(None, title="Tags")
    cost_allocation_tags: Optional[List[str]] = Field(
        None, title="Cost Allocation Tags"
    )


class S3BucketMetrics(BaseModel):
    storage_class: str = Field(..., title="Storage Class")
    total_size: float = Field(..., title="Total Size")
    total_objects: int = Field(..., title="Total Objects")


class S3OptimisationInsightTicketMetadata(BaseModel):
    title: str = Field(..., title="Title")
    change_type: str = Field(..., title="Change Type")
    effort: str = Field(..., title="Effort")
    risk: str = Field(..., title="Risk")


class S3OptimisationStatsResponse(BaseModel):
    current_cost: float = Field(..., title="Current Cost")
    delta_cost_percentage: float = Field(..., title="Delta Cost Percentage")
    previous_cost: float = Field(..., title="Previous Cost")
    bucket_size: float = Field(..., title="Bucket Size")
    object_count: int = Field(..., title="Object Count")
    last_30_days_cost: float = Field(..., title="Last 30 Days Cost")


class S3PresignedTransporterConfigValues(BaseModel):
    presigned_urls: Optional[Dict[str, str]] = Field(
        None,
        description="Presigned URLs for the payloads keyed by the payload key",
        title="Presigned Urls",
    )


class SelectTablesRequest(BaseModel):
    query: str = Field(..., description="User query", title="Query")
    service: str = Field(..., description="AWS service", title="Service")
    resource_type: str = Field(..., description="Resource type", title="Resource Type")


class SelectTablesResponse(BaseModel):
    selected_tables: List[str] = Field(
        ..., description="Selected tables", title="Selected Tables"
    )
    metrics: Optional[List[Dict[str, Any]]] = Field(
        [], description="list of available metrics", title="Metrics"
    )
    error: Optional[Dict[str, Any]] = Field(
        None, description="Error message if any", title="Error"
    )


class ServiceCatalogRequest(BaseModel):
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class ServiceCatalogRequestFind(BaseModel):
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")
    id: str = Field(..., description="The id of the service catalog.", title="Id")


class ServiceDashboardStatsDetail(BaseModel):
    service: str = Field(..., description="Service name", title="Service")
    service_display_name: Optional[str] = Field(
        None, description="Display name of the service", title="Service Display Name"
    )
    potential_savings: float = Field(
        ...,
        description="Total potential savings for this service",
        title="Potential Savings",
    )
    monthly_unblended_cost: float = Field(
        ...,
        description="Total monthly unblended cost for this service",
        title="Monthly Unblended Cost",
    )
    savings_percentage: Optional[float] = Field(
        None,
        description="Savings percentage for this service",
        title="Savings Percentage",
    )
    resource_count: Optional[int] = Field(
        None, description="Number of resources for this service", title="Resource Count"
    )


class SetOrganizationStatusResponse(BaseModel):
    pass


class SetTenantProviderStatusResponse(BaseModel):
    pass


class SetTenantStatusRequest(BaseModel):
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")


class SetTenantStatusResponse(BaseModel):
    pass


class Severity(str, Enum):
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"


class SortCriteria(BaseModel):
    field: str = Field(..., title="Field")
    direction: Direction


class StandardDimensionValues(BaseModel):
    values: List[Optional[str]] = Field(..., title="Values")


class StartAgentRegistrationRequest(BaseModel):
    registration_token: str = Field(
        ..., description="JWT token for registration", title="Registration Token"
    )
    cluster_name: str = Field(
        ..., description="Name of the cluster", title="Cluster Name"
    )
    account_id: str = Field(..., description="AWS account ID", title="Account Id")
    region: str = Field(..., description="AWS region", title="Region")
    agent_version: str = Field(
        ..., description="Version of the agent", title="Agent Version"
    )


class StartAgentRegistrationResponse(BaseModel):
    registration_id: UUID = Field(
        ..., description="Unique ID for the registration", title="Registration Id"
    )
    cluster_token: str = Field(
        ..., description="Token for cluster authentication", title="Cluster Token"
    )


class StatType(str, Enum):
    Average = "Average"
    Minimum = "Minimum"
    Maximum = "Maximum"
    Sum = "Sum"
    SampleCount = "SampleCount"
    p99 = "p99"
    p95 = "p95"
    p90 = "p90"
    p50 = "p50"


class StorageLensConfig(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    region: Optional[str] = Field(None, title="Region")


class StorageMetrics(BaseModel):
    storage_class: str = Field(..., title="Storage Class")
    total_size: float = Field(..., title="Total Size")
    total_objects: int = Field(..., title="Total Objects")
    avg_read_requests: Optional[float] = Field(..., title="Avg Read Requests")
    avg_write_requests: Optional[float] = Field(..., title="Avg Write Requests")
    avg_transition_requests: Optional[float] = Field(
        ..., title="Avg Transition Requests"
    )
    incomplete_multipart_size: float = Field(..., title="Incomplete Multipart Size")
    average_object_size: float = Field(..., title="Average Object Size")


class StoreFeedbackRequest(BaseModel):
    id: str = Field(..., description="Unique identifier of the trace", title="Id")
    name: str = Field(..., description="Name of the feedback metric", title="Name")
    value: float = Field(..., description="Value of the feedback score", title="Value")
    reason: Optional[str] = Field(
        None, description="Reason or explanation for the feedback", title="Reason"
    )
    project_name: Optional[str] = Field(
        None, description="Name of the project", title="Project Name"
    )


class StoreFeedbackResponse(BaseModel):
    pass


class Subcategory(str, Enum):
    RIGHTSIZING = "RIGHTSIZING"
    UNUSED_RESOURCES = "UNUSED_RESOURCES"
    LOW_COST_MIGRATIONS = "LOW_COST_MIGRATIONS"
    SCHEDULING = "SCHEDULING"
    MODERNIZATION = "MODERNIZATION"
    GRAVITON = "GRAVITON"
    LENGTHY_RETENTION_PERIOD = "LENGTHY_RETENTION_PERIOD"
    DELETING_ABORTED_UPLOADS = "DELETING_ABORTED_UPLOADS"
    MIGRATE_TO_GP3 = "MIGRATE_TO_GP3"
    SHIFT_TO_AMD = "SHIFT_TO_AMD"
    STORAGE_TIER_TRANSITIONS = "STORAGE_TIER_TRANSITIONS"
    DELETE_OBSOLETE_DATA = "DELETE_OBSOLETE_DATA"


class SyncActionTypeFromRepoRequest(BaseModel):
    alias: str = Field(
        ...,
        description="The unique identifier of the action type template.",
        title="Alias",
    )


class SyncActionTypeFromRepoResponse(BaseModel):
    alias: str = Field(
        ..., description="The action type which got updated.", title="Alias"
    )


class SyncPoliciesFromRepoRequest(BaseModel):
    alias: str = Field(
        ...,
        description="The unique identifier of the policy template by alias.",
        title="Alias",
    )


class SyncPoliciesFromRepoResponse(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The policy which got updated.", title="Policy Id"
    )


class SyncPresavedViewsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_ids: List[UUID4] = Field(
        ..., description="List of user ids to sync presaved views for", title="User Ids"
    )


class SyncRecommendationUnitFromRepoRequest(BaseModel):
    id: str = Field(
        ...,
        description="The unique identifier of the recommendation unit template by alias.",
        title="Id",
    )


class SyncRecommendationUnitFromRepoResponse(BaseModel):
    id: str = Field(
        ..., description="The recommendation unit which got updated.", title="Id"
    )


class TableType(str, Enum):
    resource = "resource"
    metric = "metric"
    resource_attribute = "resource_attribute"


class TaggedUntaggedMetrics(BaseModel):
    tagged_resources_count: int = Field(
        ..., description="Tagged resources count", title="Tagged Resources Count"
    )
    untagged_resources_count: int = Field(
        ..., description="Untagged resources count", title="Untagged Resources Count"
    )


class TenantAccountDailyCostDTO(BaseModel):
    id: UUID = Field(
        ...,
        description="Unique identifier for the tenant account daily cost",
        title="Id",
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    account_id: str = Field(
        ..., description="Unique identifier for the account", title="Account Id"
    )
    cost_on: date = Field(..., description="Date of the cost", title="Cost On")
    aws_cost: float = Field(..., description="AWS cost", title="Aws Cost")
    onelens_cost: float = Field(..., description="OneLens cost", title="Onelens Cost")


class TenantAccountDeltaExportDTO(BaseModel):
    id: UUID = Field(
        ...,
        description="Unique identifier for the tenant account daily cost",
        title="Id",
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    account_id: str = Field(
        ..., description="Unique identifier for the account", title="Account Id"
    )
    export_name: str = Field(..., description="Name of the export", title="Export Name")
    export_refreshed_at: datetime = Field(
        ...,
        description="Date and time of the export refresh",
        title="Export Refreshed At",
    )


class TenantAnomalyState(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class TenantAnomalyTicketDetailsMixin(BaseModel):
    anomalies: List[AnomalyRcaIdsMixin] = Field(
        ..., description="List of anomaly ids and rca ids.", title="Anomalies"
    )
    total_cost_impact: float = Field(
        ...,
        description="Total cost incurred due to the anomaly.",
        title="Total Cost Impact",
    )
    rca_hash: str = Field(
        ...,
        description="The hash of the RCA associated with the anomaly.",
        title="Rca Hash",
    )
    deviation: Union[float, str] = Field(
        ..., description="The percentage delta of the anomaly.", title="Deviation"
    )
    duration: float = Field(
        ..., description="The duration of the anomaly.", title="Duration"
    )
    duration_unit: str = Field(
        ..., description="The duration unit of the anomaly.", title="Duration Unit"
    )
    source_type: AnomalySourceType = Field(
        ..., description="The source type of the anomaly."
    )
    usage_type: str = Field(
        ..., description="The usage type of the anomaly.", title="Usage Type"
    )
    operation_type: str = Field(
        ..., description="The operation type of the anomaly.", title="Operation Type"
    )
    is_continuous: bool = Field(
        ..., description="Is the anomaly continuous.", title="Is Continuous"
    )


class TenantDetailResponse(BaseModel):
    tenant_id: UUID = Field(
        ..., description="Unique identifier of the tenant", title="Tenant Id"
    )
    tenant_name: str = Field(..., description="Name of the tenant", title="Tenant Name")
    status: str = Field(..., description="Status of the tenant", title="Status")
    subscription: Optional[str] = Field(
        ..., description="Subscription type of the tenant", title="Subscription"
    )
    account_count: int = Field(
        ..., description="Number of accounts in the tenant", title="Account Count"
    )
    potential_savings: float = Field(
        ..., description="Potential savings for the tenant", title="Potential Savings"
    )
    open_tickets: int = Field(
        ..., description="Number of open tickets", title="Open Tickets"
    )
    closed_tickets: int = Field(
        ..., description="Number of closed tickets", title="Closed Tickets"
    )
    hierarchy_exists: bool = Field(
        ...,
        description="Whether hierarchy exists for the tenant",
        title="Hierarchy Exists",
    )


class TenantEmbedAppsLinkState(str, Enum):
    ACTIVE = "ACTIVE"
    DELETED = "DELETED"


class TenantEmbedAppsLinksWithUser(BaseModel):
    created_by: UUID4 = Field(
        ...,
        description="The unique identifier of the user who created the link",
        title="Created By",
    )
    created_at: datetime = Field(
        ...,
        description="The date and time when the link was created",
        title="Created At",
    )
    updated_at: datetime = Field(
        ...,
        description="The date and time when the link was updated",
        title="Updated At",
    )
    updated_by: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user who updated the link",
        title="Updated By",
    )
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )
    state: TenantEmbedAppsLinkState = Field(..., description="State of the link")
    id: UUID4 = Field(..., description="The unique identifier of the link", title="Id")
    created_by_email: Optional[str] = Field(
        None,
        description="Email of the user who created the link",
        title="Created By Email",
    )


class TenantFeatureScope(str, Enum):
    POLICY = "POLICY"
    GLOBAL = "GLOBAL"


class TenantFilters(BaseModel):
    ids: Optional[List[UUID4]] = Field(None, title="Ids")
    names: Optional[List[str]] = Field(None, title="Names")
    tenant_states: Optional[List[str]] = Field(None, title="Tenant States")
    short_ids: Optional[List[str]] = Field(None, title="Short Ids")
    regions: Optional[List[str]] = Field(None, title="Regions")
    org_ids: Optional[List[UUID4]] = Field(None, title="Org Ids")
    status_reasons: Optional[List[str]] = Field(None, title="Status Reasons")
    expiry_date: Optional[datetime] = Field(None, title="Expiry Date")
    plans: Optional[List[str]] = Field(None, title="Plans")
    billing_owners: Optional[List[UUID4]] = Field(None, title="Billing Owners")
    billing_types: Optional[List[str]] = Field(None, title="Billing Types")


class TenantPolicyExclusions(BaseModel):
    entity_ids: List[str] = Field(
        ...,
        description="The resources excluded from running the policies on.",
        title="Entity Ids",
    )


class TenantPolicyExclusionsMixin(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy exclusion.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    resource_catalog_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Resource Catalog Id"
    )
    feature_name: Optional[str] = Field(
        None, description="The name of the feature.", title="Feature Name"
    )
    metric_name: Optional[MetricName] = Field(
        None, description="The name of the metric."
    )
    exclusion_type: PolicyExclusionType = Field(
        ..., description="The type of the exclusion."
    )
    exclusion_hash: str = Field(
        ..., description="The hash of the exclusion.", title="Exclusion Hash"
    )
    start_date: datetime = Field(
        ..., description="The start date of the exclusion.", title="Start Date"
    )
    end_date: Optional[datetime] = Field(
        None, description="The end date of the exclusion.", title="End Date"
    )


class TenantPolicyFilters(BaseModel):
    search_query: Optional[str] = Field(
        None,
        description="Search query to filter policy templates, applies on title and description.",
        title="Search Query",
    )
    parent_ptp_ids: Optional[List[UUID4]] = Field(
        [],
        description="Filter by parent policy template pack id.",
        title="Parent Ptp Ids",
    )
    categories: Optional[List[PolicyCategory]] = Field(
        [], description="Filter by type.", title="Categories"
    )
    providers: Optional[List[Provider]] = Field(
        [], description="Filter by provider.", title="Providers"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        [], description="Filter by services.", title="Services"
    )
    execution_types: Optional[List[PolicyExecutionType]] = Field(
        [], description="Filter by execution type.", title="Execution Types"
    )
    risk_levels: Optional[List[Risk]] = Field(
        [], description="Filter by risk level.", title="Risk Levels"
    )
    cost_saving_categories: Optional[List[Subcategory]] = Field(
        [],
        description="Filter by cost saving category.",
        title="Cost Saving Categories",
    )
    change_types: Optional[List[ChangeType]] = Field(
        [], description="Filter by change type.", title="Change Types"
    )
    effort_levels: Optional[List[Effort]] = Field(
        [], description="Filter by effort level.", title="Effort Levels"
    )


class TenantPolicySearchResult(BaseModel):
    id: UUID = Field(..., description="Policy ID", title="Id")
    title: str = Field(..., description="Policy title", title="Title")
    alias: str = Field(..., description="Policy alias", title="Alias")


class TenantPolicyState(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    DEPRECATED = "DEPRECATED"


class TenantPolicySystemState(str, Enum):
    ACTIVE = "ACTIVE"
    SYSTEM_DISABLED = "SYSTEM_DISABLED"
    DEPRECATED = "DEPRECATED"


class TenantPolicyTicketClosureMetadataMixin(BaseModel):
    id: UUID4 = Field(..., description="The id of the tenant policy.", title="Id")
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    state: Optional[TenantPolicySystemState] = Field(
        None, description="The status of the policy template."
    )


class TenantPolicyTicketDetailsMixin(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The id of the policy being violated.", title="Policy Id"
    )
    policy_template_id: UUID4 = Field(
        ...,
        description="The id of the policy template being violated.",
        title="Policy Template Id",
    )
    policy_config: Dict[str, Any] = Field(
        ...,
        description="The config of the policy being violated.",
        title="Policy Config",
    )
    policy_config_hash: Optional[str] = Field(
        None, description="The hash of the policy config.", title="Policy Config Hash"
    )
    policy_config_version: int = Field(
        ...,
        description="The config version of the policy being violated.",
        title="Policy Config Version",
    )
    violation_attributes: Dict[str, Any] = Field(
        ...,
        description="The attributes of the violation.",
        title="Violation Attributes",
    )
    potential_cost_saving: float = Field(
        ...,
        description="The potential cost accrued because of the violation.",
        title="Potential Cost Saving",
    )
    preferred_recommendation_id: Optional[UUID4] = Field(
        None,
        description="The id of the preferred recommendation for the violation.",
        title="Preferred Recommendation Id",
    )
    rule_definition_hash: Optional[str] = Field(
        "NA",
        description="The hash of the policy sql query",
        title="Rule Definition Hash",
    )
    feature_name: Optional[str] = Field(
        None,
        description="The name of the feature associated with the policy.",
        title="Feature Name",
    )
    usage_type: Optional[Union[List[str], str]] = Field(
        None,
        description="The usage type of the resource experiencing policy violation.",
        title="Usage Type",
    )
    potential_cost_saving_backup: Optional[float] = Field(
        None,
        description="The potential cost saving of the policy violation.",
        title="Potential Cost Saving Backup",
    )


class TenantProviderAttributes(str, Enum):
    role_arn = "role_arn"
    db_connection_string = "db_connection_string"
    storage_lens_configuration = "storage_lens_configuration"


class TenantProviderState(str, Enum):
    INITIALISED = "INITIALISED"
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class TenantSettingsResponse(BaseModel):
    settings_key: str = Field(
        ..., description="Unique key of the tenant setting", title="Settings Key"
    )
    values: Dict[str, Any] = Field(
        ..., description="Configuration values for the tenant setting", title="Values"
    )
    created_at: str = Field(
        ..., description="Creation timestamp of the setting", title="Created At"
    )
    updated_at: str = Field(
        ..., description="Last update timestamp of the setting", title="Updated At"
    )
    created_by: UUID = Field(
        ..., description="User who created the setting", title="Created By"
    )
    updated_by: UUID = Field(
        ..., description="User who updated the setting", title="Updated By"
    )


class TenantState(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class TenantTicketAuditFilters(BaseModel):
    trigger_ids: Optional[List[UUID]] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Ids"
    )
    ticket_ids: Optional[List[UUID]] = Field(
        None, description="List of ticket ids", title="Ticket Ids"
    )


class TenantTicketsStatsMetrics(str, Enum):
    SUM_SAVINGS = "SUM_SAVINGS"
    DISTINCT_ENTITY_COUNT = "DISTINCT_ENTITY_COUNT"
    COUNT = "COUNT"
    SUM_ACHIEVED_SAVINGS = "SUM_ACHIEVED_SAVINGS"
    SUM_ACTUAL_COST = "SUM_ACTUAL_COST"
    SUM_EXTENDED_COST = "SUM_EXTENDED_COST"
    SUM_POTENTIAL_SAVINGS = "SUM_POTENTIAL_SAVINGS"
    DISTINCT_TICKET_COUNT = "DISTINCT_TICKET_COUNT"
    SUM_DAILY_ACHIEVED_SAVINGS = "SUM_DAILY_ACHIEVED_SAVINGS"
    SUM_WEEKLY_ACHIEVED_SAVINGS = "SUM_WEEKLY_ACHIEVED_SAVINGS"


class TenantTicketsStatsMetricsGroupBy(str, Enum):
    service = "service"
    region = "region"
    cloud_id = "cloud_id"
    effort = "effort"


class TenantTicketsStatsMetricsSubGroupBy(str, Enum):
    service = "service"
    region = "region"
    cloud_id = "cloud_id"


class TenantUserActionLevel(str, Enum):
    READ_ONLY = "READ_ONLY"
    FULL_ACCESS = "FULL_ACCESS"


class TenantUserDetails(BaseModel):
    first_name: str = Field(..., title="First Name")
    middle_name: Optional[str] = Field(None, title="Middle Name")
    last_name: str = Field(..., title="Last Name")
    email: str = Field(..., title="Email")
    mobile_country_code: Optional[str] = Field(None, title="Mobile Country Code")
    mobile_number: Optional[str] = Field(None, title="Mobile Number")
    persona: Optional[str] = Field(None, title="Persona")
    role: str = Field(..., title="Role")
    job_title: Optional[str] = Field(None, title="Job Title")
    manager: Optional[str] = Field(None, title="Manager")
    city: Optional[str] = Field(None, title="City")
    state: Optional[str] = Field(None, title="State")
    country: Optional[str] = Field(None, title="Country")
    display_language: Optional[str] = Field(None, title="Display Language")
    preferred_currency: Optional[str] = Field(None, title="Preferred Currency")
    timezone: Optional[str] = Field(None, title="Timezone")
    display_date_format: Optional[str] = Field(None, title="Display Date Format")
    display_time_format: Optional[str] = Field(None, title="Display Time Format")
    status: str = Field(..., title="Status")
    sources: List[str] = Field(..., title="Sources")
    last_login: Optional[str] = Field(None, title="Last Login")
    created_at: str = Field(..., title="Created At")
    node_ids: Optional[List[str]] = Field([], title="Node Ids")
    ol_user_id: UUID = Field(..., title="Ol User Id")
    tenant_id: UUID = Field(..., title="Tenant Id")


class TenantVerifyRequestWithUser(BaseModel):
    role_name: str = Field(
        ..., description="Role name of the tenant", title="Role Name"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    tenant_provider_id: UUID4 = Field(
        ..., description="Tenant Provider ID", title="Tenant Provider Id"
    )
    storage_lens_config: Optional[StorageLensConfig] = Field(
        None, description="AWS storage lens configuration"
    )
    user_id: UUID4 = Field(..., description="List of users", title="User Id")


class TenantVerifyResponse(BaseModel):
    verified: bool = Field(..., description="verified status", title="Verified")
    accounts: Dict[str, Any] = Field(..., description="accounts", title="Accounts")


class TenantsList(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    tenant_name: str = Field(..., description="Name of the tenant", title="Tenant Name")
    status: str = Field(..., description="Status of the tenant", title="Status")
    short_id: str = Field(..., description="Short id of the tenant", title="Short Id")
    account_count: Optional[int] = Field(
        None, description="Account count of the tenant", title="Account Count"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )


class Thread(BaseModel):
    id: Optional[UUID4] = Field(
        None, description="Unique identifier of the thread", title="Id"
    )
    created_at: Optional[datetime] = Field(
        None, description="Timestamp of thread creation", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Timestamp of last thread update", title="Updated At"
    )
    name: Optional[str] = Field(None, description="Name of the thread", title="Name")
    user_id: Optional[UUID] = Field(
        None,
        description="Unique identifier of the user associated with the thread",
        title="User Id",
    )
    agent_type: Optional[str] = Field(
        None,
        description="Type of the workflow, required if user_id is not provided to create a new thread for the workflow",
        title="Agent Type",
    )
    thread_metadata: Optional[Dict[str, Any]] = Field(
        None, description="Additional metadata for the thread", title="Thread Metadata"
    )


class TicketActivityLogType(str, Enum):
    STATUS_CHANGE = "STATUS_CHANGE"
    PRIORITY_CHANGE = "PRIORITY_CHANGE"
    COMMENT = "COMMENT"
    MEMORY_METRICS_STATUS_CHANGE = "MEMORY_METRICS_STATUS_CHANGE"
    TICKET_EDITED = "TICKET_EDITED"


class TicketAssignment(str, Enum):
    UNASSIGNED = "UNASSIGNED"
    ASSIGNED = "ASSIGNED"


class TicketCategory(str, Enum):
    POLICY_TICKET = "POLICY_TICKET"
    ANOMALY_TICKET = "ANOMALY_TICKET"
    CUSTOM_TICKET = "CUSTOM_TICKET"


class TicketClosureMetadataMixin(BaseModel):
    id: UUID = Field(..., description="The id of the ticket", title="Id")
    ticket_alias: int = Field(
        ..., description="The alias of the ticket", title="Ticket Alias"
    )
    status: PolicyTicketStatus = Field(..., description="The status of the ticket")
    created_at: datetime = Field(
        ..., description="The creation date of the ticket", title="Created At"
    )
    last_run_at: datetime = Field(
        ..., description="The last run date of the ticket", title="Last Run At"
    )
    date_of_change: Optional[datetime] = Field(
        None, description="The date of change", title="Date Of Change"
    )
    reason_for_closure: Optional[ChangeReason] = Field(
        None, description="The reason for closure"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None,
        description="The manual closure initiated",
        title="Manual Closure Initiated",
    )


class TicketEditedDetails(BaseModel):
    from_value: Optional[Dict[str, Any]] = Field(None, title="From Value")
    to_value: Optional[Dict[str, Any]] = Field(None, title="To Value")
    note: Optional[str] = Field(None, title="Note")
    changed_fields: Optional[List[str]] = Field(None, title="Changed Fields")
    changed_by: Optional[str] = Field(None, title="Changed By")


class TicketPriorityChangedDetails(BaseModel):
    from_value: Optional[str] = Field(None, title="From Value")
    to_value: Optional[str] = Field(None, title="To Value")
    field: Optional[str] = Field("priority", title="Field")
    changed_by: Optional[str] = Field(None, title="Changed By")


class TicketState(str, Enum):
    OPEN = "OPEN"
    CLOSED = "CLOSED"


class TicketType(str, Enum):
    SYSTEM = "SYSTEM"
    USER = "USER"


class TicketUnassignment(str, Enum):
    UNASSIGNED = "UNASSIGNED"


class TicketsSelectedFieldsCategory(str, Enum):
    STANDARD = "STANDARD"
    NODE = "NODE"
    TAG = "TAG"


class TimeFilterOutput(BaseModel):
    range: List[str] = Field(..., title="Range")
    granularity: Optional[Dict[str, Any]] = Field(
        {"unit": "days", "value": 1}, title="Granularity"
    )


class TimeFilterOption(str, Enum):
    last_30_days = "last_30_days"
    last_60_days = "last_60_days"


class TimeRangeOutput(BaseModel):
    from_time: datetime = Field(
        ..., description="Start time of the range", title="From Time"
    )
    to_time: datetime = Field(..., description="End time of the range", title="To Time")


class TimeSeries(BaseModel):
    timestamp: datetime = Field(
        ..., description="Timestamp of the time series", title="Timestamp"
    )
    value: float = Field(..., description="Value of the time series", title="Value")


class TimeSeriesDataAccumulationType(str, Enum):
    cumulative = "cumulative"
    distinct = "distinct"


class TimeStampFieldName(str, Enum):
    first_run_at = "first_run_at"
    last_run_at = "last_run_at"
    date_of_change = "date_of_change"
    usage_start_date = "usage_start_date"


class TimeUnit(str, Enum):
    days = "days"
    months = "months"
    hours = "hours"
    minutes = "minutes"
    seconds = "seconds"


class TransporterType(str, Enum):
    S3_BULK = "S3_BULK"
    S3_PRESIGNED_URL = "S3_PRESIGNED_URL"


class Type(str, Enum):
    Manual = "Manual"
    Automated = "Automated"


class UpdateActionTypeRequest(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    alias: Optional[str] = Field(..., description="Alias", title="Alias")
    base_action: Optional[GenericActionTypeEnum] = Field(
        None, description="Action type base action"
    )
    id: int = Field(..., description="Action Type ID", title="Id")


class UpdateActionTypeResponse(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    alias: Optional[str] = Field(..., description="Alias", title="Alias")
    base_action: Optional[GenericActionTypeEnum] = Field(
        None, description="Action type base action"
    )
    id: int = Field(..., description="Action Type ID", title="Id")


class UpdateAgentRegistrationRequest(BaseModel):
    registration_id: UUID = Field(
        ..., description="ID of the registration to update", title="Registration Id"
    )
    cluster_token: str = Field(
        ..., description="Token for cluster authentication", title="Cluster Token"
    )
    status: RegistrationStatus = Field(
        ..., description="New status of the registration"
    )
    logs: Optional[str] = Field(
        None, description="Optional logs from the registration process", title="Logs"
    )


class UpdateAgentRegistrationResponse(BaseModel):
    pass


class UpdateCURSavedViewAPIRequest(BaseModel):
    name: Optional[constr(min_length=3)] = Field(
        None, description="Name of the saved view", title="Name"
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description="Payload of the saved view", title="Payload"
    )


class UpdateCURSavedViewRequest(BaseModel):
    name: Optional[constr(min_length=3)] = Field(
        None, description="Name of the saved view", title="Name"
    )
    payload: Optional[Dict[str, Any]] = Field(
        None, description="Payload of the saved view", title="Payload"
    )
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateCURSavedViewResponse(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    name: constr(min_length=3) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: Optional[Dict[str, Any]] = Field(
        ..., description="Payload of the saved view", title="Payload"
    )
    is_default: Optional[bool] = Field(
        False, description="Whether the saved view is default", title="Is Default"
    )
    is_system_defined: Optional[bool] = Field(
        False,
        description="Whether the saved view is system defined",
        title="Is System Defined",
    )
    created_at: datetime = Field(..., description="Created at", title="Created At")
    updated_at: datetime = Field(..., description="Updated at", title="Updated At")


class UpdateCustomTenantTicketResponse(BaseModel):
    message: Optional[str] = Field(
        "Ticket updated successfully", description="Response message", title="Message"
    )


class UpdateDeltaEventLifecycleAPIRequest(BaseModel):
    event_id: UUID = Field(
        ..., description="ID of the delta event to update", title="Event Id"
    )
    status: Optional[LifecycleStatus] = Field(
        None, description="New lifecycle status for the event"
    )
    assigned_to: Optional[UUID] = Field(
        None, description="User ID to assign the event to", title="Assigned To"
    )
    comment: Optional[str] = Field(
        None, description="Optional comment to add to the history", title="Comment"
    )
    details: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional structured details for the lifecycle status (e.g., reason for resolution)",
        title="Details",
    )


class UpdateDeltaEventLifecycleRequest(BaseModel):
    event_id: UUID = Field(
        ..., description="ID of the delta event to update", title="Event Id"
    )
    status: Optional[LifecycleStatus] = Field(
        None, description="New lifecycle status for the event"
    )
    assigned_to: Optional[UUID] = Field(
        None, description="User ID to assign the event to", title="Assigned To"
    )
    comment: Optional[str] = Field(
        None, description="Optional comment to add to the history", title="Comment"
    )
    details: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional structured details for the lifecycle status (e.g., reason for resolution)",
        title="Details",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    current_user_id: UUID = Field(
        ..., description="ID of the user making the update", title="Current User Id"
    )


class UpdateDeltaEventLifecycleResponse(BaseModel):
    event_id: UUID = Field(
        ..., description="ID of the updated delta event", title="Event Id"
    )
    status: LifecycleStatus = Field(..., description="Current status of the event")
    assigned_to: Optional[UUID] = Field(
        None, description="Currently assigned user", title="Assigned To"
    )
    assigned_by: Optional[UUID] = Field(
        None, description="User who assigned the event", title="Assigned By"
    )
    updated_at: datetime = Field(
        ..., description="Last update timestamp", title="Updated At"
    )
    history_id: UUID = Field(
        ..., description="ID of the history entry created", title="History Id"
    )
    details: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional structured details associated with this lifecycle state",
        title="Details",
    )


class UpdateEmbeddingsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    embedding_type: EmbeddingType = Field(
        ..., description="The type of the embeddings."
    )


class UpdateEmbeddingsResponse(BaseModel):
    status: str = Field(
        ..., description="The status of the embeddings update.", title="Status"
    )


class UpdateFeatureStatusRequest(BaseModel):
    tenant_id: UUID4 = Field(..., title="Tenant Id")
    id: UUID4 = Field(..., title="Id")
    is_enabled: bool = Field(..., title="Is Enabled")


class UpdateOrganizationRequest(BaseModel):
    name: Optional[str] = Field(
        None, description="Name of the organization", title="Name"
    )


class UpdateOrganizationResponse(BaseModel):
    name: str = Field(..., description="Name of the organization", title="Name")
    id: UUID4 = Field(..., description="ID of the organization", title="Id")
    short_id: int = Field(
        ..., description="Unique identifier for the organization", title="Short Id"
    )
    status: Optional[OrganizationState] = Field(
        ..., description="Status of the organization"
    )
    total_tenants: Optional[int] = Field(
        ..., description="Total tenants of the organization", title="Total Tenants"
    )
    country: Optional[str] = Field(
        ..., description="Country of the organization", title="Country"
    )
    industry: Optional[List[str]] = Field(
        ..., description="Industry of the organization", title="Industry"
    )
    monthly_cloud_spend: Optional[int] = Field(
        ...,
        description="Monthly cloud spend of the organization",
        title="Monthly Cloud Spend",
    )
    cloud_service_providers: Optional[List[str]] = Field(
        ...,
        description="Cloud service providers of the organization",
        title="Cloud Service Providers",
    )
    website: Optional[str] = Field(
        ..., description="Website of the organization", title="Website"
    )
    changelogs: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Changelogs of the organization", title="Changelogs"
    )
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the organization", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at of the organization", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the organization", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the organization", title="Updated By"
    )


class UpdateRecommendationUnitRequest(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_alias: Optional[str] = Field(
        None, description="Action type identifier", title="Action Type Alias"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )
    target_attribute: Optional[str] = Field(
        None,
        description="The target attribute of the recommendation",
        title="Target Attribute",
    )
    usage_type_pattern: Optional[str] = Field(
        None,
        description="The usage type pattern of the recommendation",
        title="Usage Type Pattern",
    )
    source_usage_type_pattern: Optional[str] = Field(
        None,
        description="The source usage type pattern of the recommendation",
        title="Source Usage Type Pattern",
    )
    target_usage_type_pattern: Optional[str] = Field(
        None,
        description="The target usage type pattern of the recommendation",
        title="Target Usage Type Pattern",
    )
    source_delimiter: Optional[str] = Field(
        None,
        description="The source delimiter of the recommendation",
        title="Source Delimiter",
    )
    target_delimiter: Optional[str] = Field(
        None,
        description="The target delimiter of the recommendation",
        title="Target Delimiter",
    )
    override_achieved_savings_configuration: Optional[
        OverrideAchievedSavingsConfigurationEnum
    ] = Field(
        None,
        description="The override achieved savings configuration of the recommendation",
    )


class UpdateRecommendationUnitResponse(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_alias: Optional[str] = Field(
        None, description="Action type identifier", title="Action Type Alias"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )
    target_attribute: Optional[str] = Field(
        None,
        description="The target attribute of the recommendation",
        title="Target Attribute",
    )
    usage_type_pattern: Optional[str] = Field(
        None,
        description="The usage type pattern of the recommendation",
        title="Usage Type Pattern",
    )
    source_usage_type_pattern: Optional[str] = Field(
        None,
        description="The source usage type pattern of the recommendation",
        title="Source Usage Type Pattern",
    )
    target_usage_type_pattern: Optional[str] = Field(
        None,
        description="The target usage type pattern of the recommendation",
        title="Target Usage Type Pattern",
    )
    source_delimiter: Optional[str] = Field(
        None,
        description="The source delimiter of the recommendation",
        title="Source Delimiter",
    )
    target_delimiter: Optional[str] = Field(
        None,
        description="The target delimiter of the recommendation",
        title="Target Delimiter",
    )
    override_achieved_savings_configuration: Optional[
        OverrideAchievedSavingsConfigurationEnum
    ] = Field(
        None,
        description="The override achieved savings configuration of the recommendation",
    )


class UpdateStateRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="Unique identifier of the tenant", title="Tenant Id"
    )
    thread_id: UUID4 = Field(
        ..., description="Unique identifier of the thread", title="Thread Id"
    )
    agent_type: str = Field(..., description="Type of the workflow", title="Agent Type")
    input_state: Dict[str, Any] = Field(
        ..., description="New state of the agent", title="Input State"
    )


class UpdateStateResponse(BaseModel):
    output_state: Dict[str, Any] = Field(
        ..., description="Updated state of the agent", title="Output State"
    )


class UpdateTenantAccountDailyCostRequest(BaseModel):
    id: UUID = Field(
        ...,
        description="Unique identifier for the tenant account daily cost",
        title="Id",
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    account_id: str = Field(
        ..., description="Unique identifier for the account", title="Account Id"
    )
    cost_on: date = Field(..., description="Date of the cost", title="Cost On")
    aws_cost: float = Field(..., description="AWS cost", title="Aws Cost")
    onelens_cost: float = Field(..., description="OneLens cost", title="Onelens Cost")


class UpdateTenantAccountDailyCostResponse(BaseModel):
    id: UUID = Field(
        ...,
        description="Unique identifier for the tenant account daily cost",
        title="Id",
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    account_id: str = Field(
        ..., description="Unique identifier for the account", title="Account Id"
    )
    cost_on: date = Field(..., description="Date of the cost", title="Cost On")
    aws_cost: float = Field(..., description="AWS cost", title="Aws Cost")
    onelens_cost: float = Field(..., description="OneLens cost", title="Onelens Cost")
    created_at: Optional[datetime] = Field(
        ..., description="Created at", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at", title="Updated At"
    )


class UpdateTenantEmbedAppsLinksRequest(BaseModel):
    tab_name: Optional[str] = Field(
        None, description="Name of the tab", title="Tab Name"
    )
    link: Optional[str] = Field(None, description="Link of the tab", title="Link")


class UpdateTenantEmbedAppsLinksResponse(BaseModel):
    created_by: UUID4 = Field(
        ...,
        description="The unique identifier of the user who created the link",
        title="Created By",
    )
    created_at: datetime = Field(
        ...,
        description="The date and time when the link was created",
        title="Created At",
    )
    updated_at: datetime = Field(
        ...,
        description="The date and time when the link was updated",
        title="Updated At",
    )
    updated_by: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user who updated the link",
        title="Updated By",
    )
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )
    state: TenantEmbedAppsLinkState = Field(..., description="State of the link")


class UpdateTenantManagementRequest(BaseModel):
    status: Optional[TenantState] = Field(None, description="New status for the tenant")
    status_reason: Optional[str] = Field(
        None, description="Reason for status change", title="Status Reason"
    )
    type: Optional[Type] = Field(None, description="Type of the tenant")
    plan: Optional[Plan] = Field(None, description="Plan of the tenant")
    billing_type: Optional[BillingType] = Field(
        None, description="Billing type of the tenant"
    )
    billing_owner: Optional[UUID] = Field(
        None, description="Billing owner of the tenant", title="Billing Owner"
    )
    expiry_date: Optional[datetime] = Field(
        None, description="Expiry date of the tenant", title="Expiry Date"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        None, description="Milestones of the tenant", title="Milestones"
    )


class UpdateTenantManagementResponse(BaseModel):
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    name: str = Field(..., description="Name of the tenant", title="Name")
    status: TenantState = Field(..., description="Status of the tenant")
    status_reason: Optional[str] = Field(
        None, description="Reason for status change", title="Status Reason"
    )
    type: Optional[Type] = Field(None, description="Type of the tenant")
    plan: Optional[Plan] = Field(None, description="Plan of the tenant")
    billing_type: Optional[BillingType] = Field(
        None, description="Billing type of the tenant"
    )
    billing_owner: Optional[UUID] = Field(
        None, description="Billing owner of the tenant", title="Billing Owner"
    )
    expiry_date: Optional[datetime] = Field(
        None, description="Expiry date of the tenant", title="Expiry Date"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        None, description="Milestones of the tenant", title="Milestones"
    )


class UpdateTenantPolicySettingLastRunAtRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    updates: List[LastRunAtUpdateItem] = Field(
        ..., description="The list of updates.", title="Updates"
    )


class UpdateTenantPolicySettingLastRunAtResponse(BaseModel):
    pass


class UpdateTenantRequest(BaseModel):
    name: Optional[str] = Field(None, description="Name of the tenant", title="Name")
    domains: Optional[List[str]] = Field(
        None, description="List of domains", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        None, description="Organization id of the tenant", title="Org Id"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the tenant", title="Timezone"
    )


class UpdateTenantResponse(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        ..., description="Unique identifier for the organization", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")
    short_id: str = Field(
        ..., description="Unique identifier for the tenant", title="Short Id"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    tenant_state: TenantState = Field(..., description="State of the tenant")
    database_connection_string: Optional[str] = Field(
        ...,
        description="DB connection string for tenant",
        title="Database Connection String",
    )
    s3_bucket_name: Optional[str] = Field(
        ..., description="S3 bucket for tenant", title="S3 Bucket Name"
    )
    type: Optional[List[str]] = Field(
        ..., description="Type of the tenant", title="Type"
    )
    status_reason: Optional[str] = Field(
        ..., description="Status reason of the tenant", title="Status Reason"
    )
    expiry_date: Optional[datetime] = Field(
        ..., description="Expiry date of the tenant", title="Expiry Date"
    )
    plan: Optional[str] = Field(..., description="Plan of the tenant", title="Plan")
    plan_config: Optional[Dict[str, Any]] = Field(
        ..., description="Plan config of the tenant", title="Plan Config"
    )
    billing_owner: Optional[UUID4] = Field(
        ..., description="Billing owner of the tenant", title="Billing Owner"
    )
    billing_type: Optional[str] = Field(
        ..., description="Billing type of the tenant", title="Billing Type"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Milestones of the tenant", title="Milestones"
    )
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at of the tenant", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the tenant", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the tenant", title="Updated By"
    )
    external_id: Optional[str] = Field(
        ..., description="External id of the tenant", title="External Id"
    )


class UpdateTenantTicketResponse(BaseModel):
    pass


class UpdateTenantTicketStatusMetadataRequest(BaseModel):
    id: str = Field(
        ..., description="The unique identifier of the status metadata", title="Id"
    )
    display_name: Optional[str] = Field(
        None, description="Display name for the status", title="Display Name"
    )
    activity_log_format: Optional[ActivityLogFormat] = Field(
        None, description="JSON containing title and note format templates"
    )
    display_priority: Optional[int] = Field(
        None, description="Priority for display ordering", title="Display Priority"
    )
    state: Optional[TicketState] = Field(None, description="State of the ticket status")
    is_active: Optional[bool] = Field(
        None, description="Whether the status is active", title="Is Active"
    )
    updated_by: UUID4 = Field(
        ...,
        description="UUID of the user who last updated this status metadata",
        title="Updated By",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantTicketStatusMetadataResponse(BaseModel):
    id: str = Field(
        ..., description="The unique identifier of the status metadata", title="Id"
    )
    display_name: str = Field(
        ..., description="Display name for the status", title="Display Name"
    )
    activity_log_format: ActivityLogFormat = Field(
        ..., description="JSON containing title and note format templates"
    )
    display_priority: Optional[int] = Field(
        0, description="Priority for display ordering", title="Display Priority"
    )
    state: Optional[TicketState] = Field(
        "OPEN", description="State of the ticket status"
    )
    is_active: Optional[bool] = Field(
        True, description="Whether the status is active", title="Is Active"
    )
    created_by: UUID4 = Field(
        ...,
        description="UUID of the user who created this status metadata",
        title="Created By",
    )
    updated_by: UUID4 = Field(
        ...,
        description="UUID of the user who last updated this status metadata",
        title="Updated By",
    )
    created_at: datetime = Field(
        ..., description="Datetime of metadata creation", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Datetime of metadata updation", title="Updated At"
    )


class UpdateTenantTicketsResponse(BaseModel):
    pass


class UpdateThreadRequest(BaseModel):
    thread_id: UUID4 = Field(
        ..., description="Unique identifier of the thread to update", title="Thread Id"
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="Unique identifier of the tenant", title="Tenant Id"
    )
    name: Optional[str] = Field(
        None, description="Optional name for the thread", title="Name"
    )
    thread_metadata: Optional[Dict[str, Any]] = Field(
        None, description="Additional metadata for the thread", title="Thread Metadata"
    )


class UpdateThreadResponse(BaseModel):
    thread: Thread = Field(..., description="Updated thread")


class UploadedFileDetails(BaseModel):
    added_files: Optional[List[FileUploadType]] = Field(
        None, description="Request payload for document uploaded", title="Added Files"
    )
    removed_files: Optional[List[str]] = Field(
        None,
        description="Request payload for document removed. Contains the system file names of the files removed",
        title="Removed Files",
    )


class UpsertResourceCatalogCostDataResponse(BaseModel):
    pass


class UpsertTenantSettingsAPIRequest(BaseModel):
    settings_key: str = Field(
        ..., description="Unique key for the tenant setting", title="Settings Key"
    )
    values: Dict[str, Any] = Field(
        ..., description="Configuration values for the setting", title="Values"
    )


class UpsertTenantSettingsRequest(BaseModel):
    settings_key: str = Field(
        ..., description="Unique key for the tenant setting", title="Settings Key"
    )
    values: Dict[str, Any] = Field(
        ..., description="Configuration values for the setting", title="Values"
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")
    ol_user_id: Optional[UUID] = Field(
        None, description="The id of the user.", title="Ol User Id"
    )


class UserCatalogDetails(BaseModel):
    connections: List[str] = Field(
        ..., description="List of user auth connections.", title="Connections"
    )


class UserCatalogState(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class UserPersona(str, Enum):
    DEVOPS_OWNER = "DEVOPS_OWNER"
    FINOPS_OWNER = "FINOPS_OWNER"
    BUSINESS_OWNER = "BUSINESS_OWNER"
    ENGINEERING_OWNER = "ENGINEERING_OWNER"
    OTHER = "OTHER"
    DEVELOPER = "DEVELOPER"
    SECOPS = "SECOPS"


class UserRole(str, Enum):
    ROOT = "ROOT"
    ADMIN = "ADMIN"
    MEMBER = "MEMBER"
    READER = "READER"


class UserStatus(str, Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    BLOCKED = "BLOCKED"
    DELETED = "DELETED"
    PENDING_INVITE = "PENDING_INVITE"


class UtilizationDataPoint(BaseModel):
    timestamp: datetime = Field(
        ..., description="Timestamp for this data point", title="Timestamp"
    )
    utilized: float = Field(
        ..., description="Amount currently utilized", title="Utilized"
    )
    requested: float = Field(
        ..., description="Amount requested by workloads", title="Requested"
    )
    provisioned: float = Field(
        ..., description="Total available capacity", title="Provisioned"
    )


class ValidateHierarchyNodeFieldsResponse(BaseModel):
    pass


class ValidateNodeFilterConflictStatus(str, Enum):
    CONFLICT = "CONFLICT"
    UNIQUE = "UNIQUE"


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class ViolationAttributesDetails(BaseModel):
    key: str = Field(..., description="violation attribute key", title="Key")
    display_name: str = Field(
        ..., description="violation attribute display name", title="Display Name"
    )
    value: str = Field(..., description="violation attribute value", title="Value")
    theme: str = Field(..., description="violation attribute theme", title="Theme")
    status: str = Field(..., description="violation attribute status", title="Status")
    tool_tip_message: str = Field(
        ...,
        description="violation attribute tool tip message",
        title="Tool Tip Message",
    )


class ViolationClosureDetails(BaseModel):
    changed_from: Optional[Union[str, int, float]] = Field(
        None, description="Changed from", title="Changed From"
    )
    changed_to: Optional[Union[str, int, float]] = Field(
        None, description="Changed to", title="Changed To"
    )
    date_of_change: Optional[datetime] = Field(
        None, description="Date of change", title="Date Of Change"
    )
    closure_reason: Optional[ChangeReason] = Field(None, description="Closure reason")


class VirtualTagFiltersAPIRequest(BaseModel):
    key: str = Field(
        ...,
        description="The key for the filter type (e.g., 'virtual_tag')",
        title="Key",
    )
    values: Optional[List[UUID4]] = Field(
        None, description="List of virtual tag IDs to get values for", title="Values"
    )


class VirtualTagFiltersResponse(BaseModel):
    filters: Dict[str, str] = Field(
        ..., description="Dictionary of filter ID to value mappings", title="Filters"
    )


class Visualization(BaseModel):
    group_type: str = Field(
        ..., description="Name of the grouping dimension", title="Group Type"
    )
    group_name: str = Field(..., description="Name of the series", title="Group Name")
    total_value: float = Field(
        ..., description="Total value for the series", title="Total Value"
    )
    time_series: List[TimeSeries] = Field(
        ..., description="List of time series", title="Time Series"
    )


class WorkloadGroupBy(str, Enum):
    namespace = "namespace"


class WorkloadMetrics(BaseModel):
    total_cost: float = Field(
        ..., description="Total cost across workloads", title="Total Cost"
    )
    total_potential_savings: float = Field(
        ...,
        description="Total potential savings across workloads",
        title="Total Potential Savings",
    )
    average_efficiency: float = Field(
        ..., description="Average efficiency score (0-100)", title="Average Efficiency"
    )
    p99_cpu_utilization_percentage: Optional[float] = Field(
        None,
        description="P99 CPU utilization percentage",
        title="P99 Cpu Utilization Percentage",
    )
    p99_memory_utilization_percentage: Optional[float] = Field(
        None,
        description="P99 memory utilization percentage",
        title="P99 Memory Utilization Percentage",
    )
    cpu_requests_not_set: Optional[bool] = Field(
        None,
        description="Whether CPU requests are not set (sum of requests == 0)",
        title="Cpu Requests Not Set",
    )
    memory_requests_not_set: Optional[bool] = Field(
        None,
        description="Whether memory requests are not set (sum of requests == 0)",
        title="Memory Requests Not Set",
    )
    cpu_underutilized: Optional[bool] = Field(
        None,
        description="Whether CPU is underutilized (utilization < 100%)",
        title="Cpu Underutilized",
    )
    memory_underutilized: Optional[bool] = Field(
        None,
        description="Whether memory is underutilized (utilization < 100%)",
        title="Memory Underutilized",
    )


class OnelensDomainUtilitiesRepositoriesDynamicFiltersOperator(str, Enum):
    between = "between"
    contains = "contains"
    ends_with = "ends_with"
    equals = "equals"
    greater_than = "greater_than"
    greater_than_equal = "greater_than_equal"
    in_ = "in"
    less_than = "less_than"
    less_than_equal = "less_than_equal"
    not_equals = "not_equals"
    not_in = "not_in"
    starts_with = "starts_with"
    is_ = "is"
    is_not = "is_not"
    is_empty = "is_empty"
    is_not_empty = "is_not_empty"
    is_daterange_template = "is_daterange_template"
    is_null = "is_null"
    is_not_null = "is_not_null"
    tuple_in = "tuple_in"


class OnelensModelsServiceInterfacesKubernetesCommonTimeRange(BaseModel):
    from_time: datetime = Field(
        ..., description="Start time of the range", title="From Time"
    )
    to_time: datetime = Field(..., description="End time of the range", title="To Time")


class OnelensModelsServiceInterfacesKubernetesServiceDtoMetric(BaseModel):
    name: str = Field(..., description="Name of the metric", title="Name")
    value: float = Field(..., description="Value of the metric", title="Value")


class OnelensModelsServiceInterfacesKubernetesServiceDtoTimeDimension(BaseModel):
    dimension: str = Field(
        ..., description="The time-based dimension to query", title="Dimension"
    )
    granularity: Granularity = Field(
        ..., description="Time granularity", title="Granularity"
    )


class OnelensModelsServiceInterfacesPoliciesCommonsOperator(str, Enum):
    equals = "equals"
    in_ = "in"
    not_equals = "not_equals"
    not_in = "not_in"
    greater_than = "greater_than"
    less_than = "less_than"
    greater_than_or_equals = "greater_than_or_equals"
    less_than_or_equals = "less_than_or_equals"
    is_null = "is_null"
    is_not_null = "is_not_null"
    is_empty = "is_empty"
    is_not_empty = "is_not_empty"
    contains = "contains"
    starts_with = "starts_with"
    ends_with = "ends_with"


class OnelensModelsServiceInterfacesS3OptimisationS3OptimisationServiceTimeRange(
    BaseModel
):
    start_date: datetime = Field(..., title="Start Date")
    end_date: datetime = Field(..., title="End Date")


class OnelensModelsServiceInterfacesTenantDataCurServiceGranularityUnit(str, Enum):
    days = "days"
    weeks = "weeks"
    months = "months"


class OnelensModelsServiceInterfacesTenantDataCurServiceOperator(str, Enum):
    equals = "equals"
    in_ = "in"
    not_in = "not_in"
    contains = "contains"
    between = "between"
    greater_than = "greater_than"
    less_than = "less_than"
    greater_than_or_equals = "greater_than_or_equals"
    less_than_or_equals = "less_than_or_equals"


class OnelensModelsServiceInterfacesTenantDataMetricsServiceGranularityUnit(str, Enum):
    minutes = "minutes"
    days = "days"
    hours = "hours"
    weeks = "weeks"
    months = "months"


class OnelensModelsServiceInterfacesTenantDataMetricsServiceMetric(BaseModel):
    measures: Dict[str, Any] = Field(..., title="Measures")
    timestamp: str = Field(..., title="Timestamp")


class OnelensModelsServiceInterfacesTenantDataMetricsServiceOperator(str, Enum):
    equals = "equals"
    in_ = "in"
    less_than = "less_than"
    greater_than = "greater_than"
    not_equals = "not_equals"
    not_in = "not_in"
    is_ = "is"
    is_not = "is_not"
    is_null = "is_null"
    is_not_null = "is_not_null"
    is_empty = "is_empty"
    is_not_empty = "is_not_empty"


class OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1(
    str, Enum
):
    ROOT = "ROOT"
    BUSINESS_UNIT = "BUSINESS_UNIT"
    DEPARTMENT = "DEPARTMENT"
    DIVISION = "DIVISION"
    PRODUCT = "PRODUCT"
    TEAM = "TEAM"
    APPLICATION = "APPLICATION"
    CUSTOM = "CUSTOM"
    SERVICE = "SERVICE"
    ENVIRONMENT = "ENVIRONMENT"
    RESIDUAL = "RESIDUAL"
    CLOUD_ID = "CLOUD_ID"
    REGION = "REGION"
    PROJECT = "PROJECT"
    OTHER = "OTHER"


class OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2(
    str, Enum
):
    ROOT = "ROOT"
    BUSINESS_UNIT = "BUSINESS_UNIT"
    DEPARTMENT = "DEPARTMENT"
    DIVISION = "DIVISION"
    PRODUCT = "PRODUCT"
    TEAM = "TEAM"
    APPLICATION = "APPLICATION"
    CUSTOM = "CUSTOM"
    SERVICE = "SERVICE"
    ENVIRONMENT = "ENVIRONMENT"
    RESIDUAL = "RESIDUAL"
    CLOUD_ID = "CLOUD_ID"
    REGION = "REGION"
    PROJECT = "PROJECT"
    OTHER = "OTHER"


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetHierarchyFlatFilters(
    BaseModel
):
    is_leaf: Optional[bool] = Field(
        True, description="Filter to get leaf nodes only", title="Is Leaf"
    )
    name: Optional[str] = Field(None, description="Filter by name", title="Name")
    parent_names: Optional[List[str]] = Field(
        None, description="Filter by parent names", title="Parent Names"
    )
    has_conflict: Optional[List[bool]] = Field(
        None, description="Filter to get nodes with conflicts.", title="Has Conflict"
    )
    node_category: Optional[
        List[OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2]
    ] = Field(
        [],
        description="Filter by node category(BUSINESS_UNIT, DEPARTMENT etc...).",
        title="Node Category",
    )
    node_ids: Optional[List[UUID4]] = Field(
        None, description="Filter by node ids", title="Node Ids"
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetHierarchyFlatFilters(
    BaseModel
):
    is_leaf: Optional[bool] = Field(
        True, description="Filter to get leaf nodes only", title="Is Leaf"
    )
    name: Optional[str] = Field(None, description="Filter by name", title="Name")
    parent_names: Optional[List[str]] = Field(
        None, description="Filter by parent names", title="Parent Names"
    )
    has_conflict: Optional[List[bool]] = Field(
        None, description="Filter to get nodes with conflicts.", title="Has Conflict"
    )
    node_category: Optional[
        List[OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2]
    ] = Field(
        [],
        description="Filter by node category(BUSINESS_UNIT, DEPARTMENT etc...).",
        title="Node Category",
    )
    node_ids: Optional[List[Union[UUID4, str]]] = Field(
        None, description="Filter by node ids", title="Node Ids"
    )


class OnelensModelsServiceInterfacesTenantMetadataServiceCatalogDtoMetric(BaseModel):
    metric_name: str = Field(..., title="Metric Name")
    unit: str = Field(..., title="Unit")


class OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit(str, Enum):
    minutes = "minutes"
    days = "days"
    hours = "hours"
    weeks = "weeks"
    months = "months"


class OnelensModelsServiceInterfacesUtilitiesDataRetrieverServiceTimeDimension(
    BaseModel
):
    dimension: Optional[str] = Field(
        None, description="Time dimension", title="Dimension"
    )
    dateRange: Optional[List[str]] = Field(
        None, description="Date range", title="Daterange"
    )
    compareDateRange: Optional[List[Union[str, List[str]]]] = Field(
        None, description="Compare date range", title="Comparedaterange"
    )
    granularity: Optional[str] = Field(
        None, description="Granularity", title="Granularity"
    )


class APIEnableMetricsRequest(BaseModel):
    resource_ids: List[UUID] = Field(
        ...,
        description="The unique identifiers of the resources",
        min_length=1,
        title="Resource Ids",
    )
    metric_name: MetricName = Field(..., description="The name of the metric")
    entity_id: str = Field(..., description="The entity id", title="Entity Id")
    metrics_validity_period_days: int = Field(
        ...,
        description="Number of days the metrics collection will remain enabled",
        title="Metrics Validity Period Days",
    )
    look_back_days_for_metrics: int = Field(
        ...,
        description="Number of days to look back for metrics",
        title="Look Back Days For Metrics",
    )
    minimum_data_points_for_metrics: int = Field(
        ...,
        description="Minimum number of data points required for metrics",
        title="Minimum Data Points For Metrics",
    )


class APIGetFeaturesByFiltersRequest(BaseModel):
    scope: Optional[TenantFeatureScope] = Field(
        None, description="Scope of the feature"
    )
    feature_name: Optional[str] = Field(
        None, description="Name of the feature", title="Feature Name"
    )
    is_enabled: Optional[bool] = Field(
        None, description="Whether the feature is enabled", title="Is Enabled"
    )
    entity_id: Optional[List[str]] = Field(
        None, description="List of entity IDs for the feature", title="Entity Id"
    )


class APIMetricsControlFilter(BaseModel):
    resource_ids: Optional[List[UUID]] = Field(
        None,
        description="The unique identifiers of the resources",
        title="Resource Ids",
    )
    metric_name: Optional[MetricName] = Field(
        None, description="The name of the metric"
    )
    status: Optional[MetricsControlStatus] = Field(
        None, description="The status of the metric control"
    )
    entity_id: Optional[str] = Field(
        None, description="The entity id", title="Entity Id"
    )
    change_manager_event_ids: Optional[List[str]] = Field(
        None,
        description="The unique identifier of the change manager events",
        title="Change Manager Event Ids",
    )


class APIUpdateMetricsControlRequest(BaseModel):
    resource_ids: List[UUID] = Field(
        ..., description="The unique identifiers of the resources", title="Resource Ids"
    )
    metric_name: MetricName = Field(..., description="The name of the metric")
    status: MetricsControlStatus = Field(
        ..., description="The status of the metric control"
    )


class Account(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique ID for the aws cloud account", title="Id"
    )
    cloud_provider: Provider = Field(..., description="Cloud provider")
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    name: str = Field(..., description="Name of the account", title="Name")
    account_type: AccountType = Field(..., description="Type of the account")
    parent_id: Optional[UUID4] = Field(..., description="Parent ID", title="Parent Id")
    is_parent_account: bool = Field(
        ..., description="Is parent account", title="Is Parent Account"
    )
    role_name: str = Field(..., description="Role name", title="Role Name")
    regions: List[str] = Field(..., description="Regions", title="Regions")
    is_verified: bool = Field(
        ..., description="Is verified account", title="Is Verified"
    )
    state: str = Field(..., description="State of the account", title="State")
    created_at: datetime = Field(..., description="Created at", title="Created At")


class AccountWithMemoryMetricsStatus(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique ID for the aws cloud account", title="Id"
    )
    cloud_provider: Provider = Field(..., description="Cloud provider")
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    name: str = Field(..., description="Name of the account", title="Name")
    account_type: AccountType = Field(..., description="Type of the account")
    parent_id: Optional[UUID4] = Field(..., description="Parent ID", title="Parent Id")
    is_parent_account: bool = Field(
        ..., description="Is parent account", title="Is Parent Account"
    )
    role_name: str = Field(..., description="Role name", title="Role Name")
    regions: List[str] = Field(..., description="Regions", title="Regions")
    is_verified: bool = Field(
        ..., description="Is verified account", title="Is Verified"
    )
    state: str = Field(..., description="State of the account", title="State")
    created_at: datetime = Field(..., description="Created at", title="Created At")
    is_memory_metrics_enabled: bool = Field(
        ..., description="Is memory metrics enabled", title="Is Memory Metrics Enabled"
    )
    memory_metrics_enabled_at: Optional[datetime] = Field(
        None, description="Memory metrics enabled at", title="Memory Metrics Enabled At"
    )


class ActionType(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    alias: Optional[str] = Field(..., description="Alias", title="Alias")
    base_action: Optional[GenericActionTypeEnum] = Field(
        None, description="Action type base action"
    )
    id: int = Field(..., description="Action Type ID", title="Id")


class ActionTypeFilters(BaseModel):
    search_query: Optional[str] = Field(
        None,
        description="Search query to filter action types applies on title, subtitle and description.",
        title="Search Query",
    )
    ids: Optional[List[int]] = Field(
        [], description="Filter by action type id/alias.", title="Ids"
    )
    alias: Optional[List[str]] = Field(
        [], description="Filter by alias.", title="Alias"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        [], description="Filter by Services", title="Services"
    )


class AddTenantPolicyExclusionsAPIRequest(BaseModel):
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions to add."
    )


class AddTenantPolicyExclusionsAPIRequestMixin(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    resource_catalog_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Resource Catalog Id"
    )
    feature_name: Optional[str] = Field(
        None, description="The name of the feature.", title="Feature Name"
    )
    metric_name: Optional[MetricName] = Field(
        None, description="The name of the metric."
    )
    exclusion_type: PolicyExclusionType = Field(
        ..., description="The type of the exclusion."
    )
    exclusion_duration: Optional[int] = Field(
        None, description="The duration of the exclusion.", title="Exclusion Duration"
    )


class AddTenantPolicyExclusionsAPIRequestV2(BaseModel):
    exclusions: List[AddTenantPolicyExclusionsAPIRequestMixin] = Field(
        ..., description="The list of exclusions.", title="Exclusions"
    )


class AddTenantPolicyExclusionsRequest(BaseModel):
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions to add."
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )


class AddTenantPolicyExclusionsRequestV2(BaseModel):
    exclusions: List[AddTenantPolicyExclusionsAPIRequestMixin] = Field(
        ..., description="The list of exclusions.", title="Exclusions"
    )
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class AddTenantPolicyExclusionsResponse(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy setting.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    config_overrides: Optional[Dict[str, Any]] = Field(
        None,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    config_hash: Optional[str] = Field(
        None,
        description="The hash of the config overrides for the tenant policy setting.",
        title="Config Hash",
    )
    state: TenantPolicyState = Field(
        ..., description="The state of the policy template."
    )
    version: int = Field(
        ..., description="The version of the tenant policy.", title="Version"
    )
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions for the tenant policy."
    )
    last_run_at: Optional[datetime] = Field(
        None,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class AggregatedBucketMetrics(BaseModel):
    ol_id: Optional[str] = Field(..., title="Ol Id")
    metrics_by_storage: List[S3BucketMetrics] = Field(..., title="Metrics By Storage")
    total_size_sum: float = Field(..., title="Total Size Sum")
    total_objects_sum: int = Field(..., title="Total Objects Sum")


class AggregatedStorageMetrics(BaseModel):
    ol_id: str = Field(..., title="Ol Id")
    metrics_by_storage: List[StorageMetrics] = Field(..., title="Metrics By Storage")
    total_size_sum: float = Field(..., title="Total Size Sum")
    total_objects_sum: int = Field(..., title="Total Objects Sum")
    average_object_size_sum: float = Field(..., title="Average Object Size Sum")
    total_incomplete_multipart_size: float = Field(
        ..., title="Total Incomplete Multipart Size"
    )
    avg_read_requests: Optional[float] = Field(..., title="Avg Read Requests")
    avg_write_requests: Optional[float] = Field(..., title="Avg Write Requests")
    avg_transition_requests: Optional[float] = Field(
        ..., title="Avg Transition Requests"
    )


class AnomalyLogicOperation(BaseModel):
    and_: Optional[List[AndItem]] = Field(None, alias="and", title="And")
    or_: Optional[List[OrItem]] = Field(None, alias="or", title="Or")


class ApiProcessorConfig(BaseModel):
    processor_type: Optional[ProcessorType] = "API_PROCESSOR"
    processor_name: str = Field(
        ..., description="Name of the processor", title="Processor Name"
    )
    base_url: str = Field(..., description="Base URL for the API", title="Base Url")
    path: str = Field(..., description="API endpoint path", title="Path")
    type: str = Field(..., description="HTTP method type", title="Type")
    headers: Optional[Dict[str, str]] = Field(
        None, description="HTTP headers", title="Headers"
    )
    payloads: Optional[Dict[str, ApiProcessorPayload]] = Field(
        None, description="Query configurations", title="Payloads"
    )
    results_processing_config: ResultsProcessingConfig


class Auth0CreateUserAppMetadata(BaseModel):
    role: UserRole = Field(..., description="The role of the user in Auth0.")
    tenant_id: Optional[str] = Field(
        None, description="The tenant_id of the user in Auth0.", title="Tenant Id"
    )
    node_ids: List[UUID4] = Field(
        ..., description="The node_ids of the user in Auth0.", title="Node Ids"
    )


class BaseUser(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )


class CURServiceNamespaceMap(BaseModel):
    id: UUID4 = Field(..., description="ID of the mapping", title="Id")
    service_name: str = Field(
        ..., description="Name of the AWS service", title="Service Name"
    )
    default_cloudwatch_map: DefaultCURServiceNamespaceMap = Field(
        ..., description="Default CloudWatch mapping"
    )
    pattern_cloudwatch_map: List[PatternCURServiceNamespaceMap] = Field(
        ...,
        description="Pattern-based CloudWatch mappings",
        title="Pattern Cloudwatch Map",
    )


class CURServiceNamespaceMapPatchRequest(BaseModel):
    service_name: str = Field(
        ..., description="Name of the AWS service", title="Service Name"
    )
    default_cloudwatch_map: Optional[DefaultCURServiceNamespaceMap] = Field(
        None, description="Default CloudWatch mapping"
    )
    pattern_cloudwatch_map: Optional[List[PatternCURServiceNamespaceMap]] = Field(
        None,
        description="Pattern-based CloudWatch mappings",
        title="Pattern Cloudwatch Map",
    )


class CURServiceNamespaceMapRequest(BaseModel):
    service_name: str = Field(
        ..., description="Name of the AWS service", title="Service Name"
    )
    default_cloudwatch_map: DefaultCURServiceNamespaceMap = Field(
        ..., description="Default CloudWatch mapping"
    )
    pattern_cloudwatch_map: List[PatternCURServiceNamespaceMap] = Field(
        ...,
        description="Pattern-based CloudWatch mappings",
        title="Pattern Cloudwatch Map",
    )


class ChangeManagerEventAttributeValues(BaseModel):
    name: ChangeManagerEventName


class ChangeManagerEventAttributes(BaseModel):
    attribute_values: ChangeManagerEventAttributeValues


class CloudMetadataFilters(BaseModel):
    type: Optional[List[CloudMetadataType]] = Field(
        ["CLOUD_ID", "REGION", "SERVICE"], description="Filter by type.", title="Type"
    )
    parent_id: Optional[UUID] = Field(
        None, description="Filter by parent ID.", title="Parent Id"
    )
    id: Optional[UUID] = Field(None, description="Filter by id.", title="Id")


class CloudMetadataFiltersWithoutTags(BaseModel):
    type: Optional[List[CloudMetadataType]] = Field(
        ["CLOUD_ID", "REGION", "SERVICE"], description="Filter by type.", title="Type"
    )
    parent_id: Optional[UUID] = Field(
        None, description="Filter by parent ID.", title="Parent Id"
    )
    id: Optional[UUID] = Field(None, description="Filter by id.", title="Id")


class CloudwatchMetric(BaseModel):
    namespace: str = Field(..., title="Namespace")
    metrics: List[str] = Field(..., title="Metrics")
    dimensions: List[CloudwatchMetricDimension] = Field(..., title="Dimensions")


class CostAnalyzerTableRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[Dict[str, Any]] = Field(
        ..., description="Filters for the cost analyzer table", title="Filters"
    )
    group_by: List[str] = Field(
        ..., description="Group by for the cost analyzer table", title="Group By"
    )


class CostAnalyzerTableResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    data: List[Dict[str, Any]] = Field(
        ...,
        description="List of dictionaries containing cost analyzer stats",
        title="Data",
    )


class CreateActionTypeRequest(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    alias: Optional[str] = Field(..., description="Alias", title="Alias")
    base_action: Optional[GenericActionTypeEnum] = Field(
        None, description="Action type base action"
    )


class CreateActionTypeResponse(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    alias: Optional[str] = Field(..., description="Alias", title="Alias")
    base_action: Optional[GenericActionTypeEnum] = Field(
        None, description="Action type base action"
    )
    id: int = Field(..., description="Action Type ID", title="Id")


class CreateAuth0UserRequest(BaseModel):
    email: EmailStr = Field(
        ..., description="The email of the user in Auth0.", title="Email"
    )
    password: str = Field(
        ..., description="The password of the user in Auth0.", title="Password"
    )
    email_verified: Optional[bool] = Field(
        None,
        description="The email_verified of the user in Auth0.",
        title="Email Verified",
    )
    app_metadata: Auth0CreateUserAppMetadata = Field(
        ..., description="The app_metadata of the user in Auth0."
    )
    connection: Optional[Auth0UserConnection] = Field(
        "Username-Password-Authentication",
        description="The connection of the user in Auth0.",
    )
    given_name: Optional[str] = Field(
        None, description="The given_name of the user in Auth0.", title="Given Name"
    )
    family_name: Optional[str] = Field(
        None, description="The family_name of the user in Auth0.", title="Family Name"
    )
    tenant_id: Optional[str] = Field(
        None, description="The tenant_id of the user in Auth0.", title="Tenant Id"
    )


class CreateCustomFieldRequest(BaseModel):
    entity: EntityTypeModel
    category: constr(min_length=1, max_length=10) = Field(..., title="Category")
    value: constr(min_length=1, max_length=50) = Field(..., title="Value")
    description: Optional[constr(max_length=100)] = Field(None, title="Description")
    properties: Optional[Dict[str, Any]] = Field(None, title="Properties")


class CreateNaviraLogRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    user_id: UUID4 = Field(
        ..., description="User ID (UUID4) associated with the log.", title="User Id"
    )
    request: Optional[Dict[str, Any]] = Field(
        None,
        description="The query data represented as a JSON object.",
        title="Request",
    )
    status: Optional[GenerationStatus] = Field(
        "SUCCESS", description="The status of the log."
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description="The response data associated with the query, represented as a JSON object.",
        title="Response",
    )
    extradata: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional metadata associated with the log.",
        title="Extradata",
    )
    feedback: Optional[FeedbackModel] = Field(
        None, description="Feedback associated with the log."
    )


class CreateOrganizationResponse(BaseModel):
    name: str = Field(..., description="Name of the organization", title="Name")
    id: UUID4 = Field(..., description="ID of the organization", title="Id")
    short_id: int = Field(
        ..., description="Unique identifier for the organization", title="Short Id"
    )
    status: Optional[OrganizationState] = Field(
        ..., description="Status of the organization"
    )
    total_tenants: Optional[int] = Field(
        ..., description="Total tenants of the organization", title="Total Tenants"
    )
    country: Optional[str] = Field(
        ..., description="Country of the organization", title="Country"
    )
    industry: Optional[List[str]] = Field(
        ..., description="Industry of the organization", title="Industry"
    )
    monthly_cloud_spend: Optional[int] = Field(
        ...,
        description="Monthly cloud spend of the organization",
        title="Monthly Cloud Spend",
    )
    cloud_service_providers: Optional[List[str]] = Field(
        ...,
        description="Cloud service providers of the organization",
        title="Cloud Service Providers",
    )
    website: Optional[str] = Field(
        ..., description="Website of the organization", title="Website"
    )
    changelogs: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Changelogs of the organization", title="Changelogs"
    )
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the organization", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at of the organization", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the organization", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the organization", title="Updated By"
    )


class CreatePolicyTemplatePackRequest(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template pack", title="Alias"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template pack"
    )
    provider: Provider = Field(
        ..., description="The provider of the policy template pack"
    )
    details: PolicyTemplatePackDetails = Field(
        ..., description="The details of the policy template pack"
    )


class CreatePolicyTemplatePackResponse(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template pack", title="Alias"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template pack"
    )
    provider: Provider = Field(
        ..., description="The provider of the policy template pack"
    )
    details: PolicyTemplatePackDetails = Field(
        ..., description="The details of the policy template pack"
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template pack", title="Id"
    )
    state: PolicyTemplatePackState = Field(
        ..., description="The state of the policy template pack"
    )


class CreateRecommendationUnitRequest(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_alias: Optional[str] = Field(
        None, description="Action type identifier", title="Action Type Alias"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )
    target_attribute: Optional[str] = Field(
        None,
        description="The target attribute of the recommendation",
        title="Target Attribute",
    )
    usage_type_pattern: Optional[str] = Field(
        None,
        description="The usage type pattern of the recommendation",
        title="Usage Type Pattern",
    )
    source_usage_type_pattern: Optional[str] = Field(
        None,
        description="The source usage type pattern of the recommendation",
        title="Source Usage Type Pattern",
    )
    target_usage_type_pattern: Optional[str] = Field(
        None,
        description="The target usage type pattern of the recommendation",
        title="Target Usage Type Pattern",
    )
    source_delimiter: Optional[str] = Field(
        None,
        description="The source delimiter of the recommendation",
        title="Source Delimiter",
    )
    target_delimiter: Optional[str] = Field(
        None,
        description="The target delimiter of the recommendation",
        title="Target Delimiter",
    )
    override_achieved_savings_configuration: Optional[
        OverrideAchievedSavingsConfigurationEnum
    ] = Field(
        None,
        description="The override achieved savings configuration of the recommendation",
    )


class CreateRecommendationUnitResponse(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_alias: Optional[str] = Field(
        None, description="Action type identifier", title="Action Type Alias"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )
    target_attribute: Optional[str] = Field(
        None,
        description="The target attribute of the recommendation",
        title="Target Attribute",
    )
    usage_type_pattern: Optional[str] = Field(
        None,
        description="The usage type pattern of the recommendation",
        title="Usage Type Pattern",
    )
    source_usage_type_pattern: Optional[str] = Field(
        None,
        description="The source usage type pattern of the recommendation",
        title="Source Usage Type Pattern",
    )
    target_usage_type_pattern: Optional[str] = Field(
        None,
        description="The target usage type pattern of the recommendation",
        title="Target Usage Type Pattern",
    )
    source_delimiter: Optional[str] = Field(
        None,
        description="The source delimiter of the recommendation",
        title="Source Delimiter",
    )
    target_delimiter: Optional[str] = Field(
        None,
        description="The target delimiter of the recommendation",
        title="Target Delimiter",
    )
    override_achieved_savings_configuration: Optional[
        OverrideAchievedSavingsConfigurationEnum
    ] = Field(
        None,
        description="The override achieved savings configuration of the recommendation",
    )


class CreateTenantAccountDailyCostBulkRequest(BaseModel):
    daily_costs: List[TenantAccountDailyCostDTO] = Field(
        ...,
        description="List of tenant account daily costs to create",
        title="Daily Costs",
    )


class CreateTenantAccountDailyCostBulkResponse(BaseModel):
    created_costs: List[TenantAccountDailyCostDTO] = Field(
        ...,
        description="List of created tenant account daily costs",
        title="Created Costs",
    )


class CreateTenantAccountDeltaExportBulkRequest(BaseModel):
    delta_exports: List[TenantAccountDeltaExportDTO] = Field(
        ...,
        description="List of tenant account delta exports to create",
        title="Delta Exports",
    )


class CreateTenantEmbedAppsLinksResponse(BaseModel):
    created_by: UUID4 = Field(
        ...,
        description="The unique identifier of the user who created the link",
        title="Created By",
    )
    created_at: datetime = Field(
        ...,
        description="The date and time when the link was created",
        title="Created At",
    )
    updated_at: datetime = Field(
        ...,
        description="The date and time when the link was updated",
        title="Updated At",
    )
    updated_by: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user who updated the link",
        title="Updated By",
    )
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )
    state: TenantEmbedAppsLinkState = Field(..., description="State of the link")


class CreateTenantResponse(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        ..., description="Unique identifier for the organization", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")
    short_id: str = Field(
        ..., description="Unique identifier for the tenant", title="Short Id"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    tenant_state: TenantState = Field(..., description="State of the tenant")
    database_connection_string: Optional[str] = Field(
        ...,
        description="DB connection string for tenant",
        title="Database Connection String",
    )
    s3_bucket_name: Optional[str] = Field(
        ..., description="S3 bucket for tenant", title="S3 Bucket Name"
    )
    type: Optional[List[str]] = Field(
        ..., description="Type of the tenant", title="Type"
    )
    status_reason: Optional[str] = Field(
        ..., description="Status reason of the tenant", title="Status Reason"
    )
    expiry_date: Optional[datetime] = Field(
        ..., description="Expiry date of the tenant", title="Expiry Date"
    )
    plan: Optional[str] = Field(..., description="Plan of the tenant", title="Plan")
    plan_config: Optional[Dict[str, Any]] = Field(
        ..., description="Plan config of the tenant", title="Plan Config"
    )
    billing_owner: Optional[UUID4] = Field(
        ..., description="Billing owner of the tenant", title="Billing Owner"
    )
    billing_type: Optional[str] = Field(
        ..., description="Billing type of the tenant", title="Billing Type"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Milestones of the tenant", title="Milestones"
    )
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at of the tenant", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the tenant", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the tenant", title="Updated By"
    )
    external_id: Optional[str] = Field(
        ..., description="External id of the tenant", title="External Id"
    )


class CreateTenantTicketStatusMetadataRequest(BaseModel):
    id: str = Field(
        ..., description="The unique identifier of the status metadata", title="Id"
    )
    display_name: str = Field(
        ..., description="Display name for the status", title="Display Name"
    )
    activity_log_format: ActivityLogFormat = Field(
        ..., description="JSON containing title and note format templates"
    )
    display_priority: Optional[int] = Field(
        0, description="Priority for display ordering", title="Display Priority"
    )
    state: Optional[TicketState] = Field(
        "OPEN", description="State of the ticket status"
    )
    is_active: Optional[bool] = Field(
        True, description="Whether the status is active", title="Is Active"
    )
    created_by: UUID4 = Field(
        ...,
        description="UUID of the user who created this status metadata",
        title="Created By",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class CreateTenantTicketStatusMetadataResponse(BaseModel):
    id: str = Field(
        ..., description="The unique identifier of the status metadata", title="Id"
    )
    display_name: str = Field(
        ..., description="Display name for the status", title="Display Name"
    )
    activity_log_format: ActivityLogFormat = Field(
        ..., description="JSON containing title and note format templates"
    )
    display_priority: Optional[int] = Field(
        0, description="Priority for display ordering", title="Display Priority"
    )
    state: Optional[TicketState] = Field(
        "OPEN", description="State of the ticket status"
    )
    is_active: Optional[bool] = Field(
        True, description="Whether the status is active", title="Is Active"
    )
    created_by: UUID4 = Field(
        ...,
        description="UUID of the user who created this status metadata",
        title="Created By",
    )
    updated_by: UUID4 = Field(
        ...,
        description="UUID of the user who last updated this status metadata",
        title="Updated By",
    )
    created_at: datetime = Field(
        ..., description="Datetime of metadata creation", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Datetime of metadata updation", title="Updated At"
    )


class CreateTenantUserRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    first_name: str = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: str = Field(..., description="Last name of the user", title="Last Name")
    email: EmailStr = Field(..., description="Email of the user", title="Email")
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )


class CreateTenantUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class CreateThreadResponse(BaseModel):
    thread: Thread = Field(..., description="Newly created thread")


class CreateTicketActivity(BaseModel):
    ticket_id: UUID4 = Field(..., title="Ticket Id")
    audit_id: UUID4 = Field(..., title="Audit Id")
    activity_type: TicketActivityLogType
    activity_data: Dict[str, Any] = Field(..., title="Activity Data")
    created_by: UUID4 = Field(..., title="Created By")
    created_at: datetime = Field(..., title="Created At")


class CreateTicketActivityRequest(BaseModel):
    tenant_id: UUID4 = Field(..., description="ID of the tenant", title="Tenant Id")
    activities: List[CreateTicketActivity] = Field(
        ..., description="List of activities to create", title="Activities"
    )


class CreateUserRequest(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )


class CreateUserResponse(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )
    id: UUID4 = Field(..., description="Unique identifier for the user", title="Id")


class CurBucketConfig(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    role: Optional[str] = Field(None, title="Role")
    path: Optional[str] = Field(None, title="Path")
    version: Optional[CurBucketVersion] = None
    status: Optional[TenantProviderState] = None


class CustomFieldResponse(BaseModel):
    id: UUID = Field(..., title="Id")
    sequence_id: int = Field(..., title="Sequence Id")
    entity: EntityTypeModel
    category: str = Field(..., title="Category")
    value: str = Field(..., title="Value")
    description: Optional[str] = Field(..., title="Description")
    properties: Optional[Dict[str, Any]] = Field(..., title="Properties")
    is_active: bool = Field(..., title="Is Active")
    created_at: datetime = Field(..., title="Created At")
    updated_at: datetime = Field(..., title="Updated At")
    created_by: UUID = Field(..., title="Created By")


class CustomTicketRecommendation(BaseModel):
    title: str = Field(..., title="Title")
    potential_savings: float = Field(
        ...,
        description="The potential savings of the recommendation",
        title="Potential Savings",
    )
    effort: Optional[Effort] = Field(
        "Medium", description="The effort of the recommendation"
    )
    risk: Optional[Risk] = Field("MEDIUM", description="The risk of the recommendation")
    recommendation_metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="The lifecycle policy of the resource",
        title="Recommendation Metadata",
    )
    cost_analysis: RecommendedCostAnalysis = Field(
        ..., description="The cost analysis of the recommendation"
    )
    cost_saving_category: Subcategory = Field(
        ..., description="The category of cost savings"
    )
    change_type: Optional[ChangeType] = Field(
        "CONFIG_CHANGES", description="The type of change"
    )


class DataRetrieverQuery(BaseModel):
    measures: Optional[List[str]] = Field(
        None, description="List of measures", title="Measures"
    )
    dimensions: Optional[List[str]] = Field(
        None, description="List of dimensions", title="Dimensions"
    )
    filters: Optional[List[QueryFilters]] = Field(
        None, description="List of filters", title="Filters"
    )
    timeDimensions: Optional[
        List[OnelensModelsServiceInterfacesUtilitiesDataRetrieverServiceTimeDimension]
    ] = Field(None, description="List of time dimensions", title="Timedimensions")
    segments: Optional[List[str]] = Field(
        None, description="List of segments", title="Segments"
    )
    limit: Optional[int] = Field(None, description="Limit for query", title="Limit")
    total: Optional[bool] = Field(None, description="Total for query", title="Total")
    offset: Optional[int] = Field(None, description="Offset for query", title="Offset")
    order: Optional[List[QueryOrder]] = Field(
        None, description="Order for query", title="Order"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone for query", title="Timezone"
    )
    renewQuery: Optional[bool] = Field(
        None, description="Renew query", title="Renewquery"
    )
    ungrouped: Optional[bool] = Field(
        None, description="Ungrouped query", title="Ungrouped"
    )


class DataRetrieverRequest(BaseModel):
    query: DataRetrieverQuery = Field(..., description="Query to be executed")


class DataRetrieverResponse(BaseModel):
    query: Optional[DataRetrieverQuery] = Field(
        None, description="Query to be executed"
    )
    data: Optional[List[Dict[str, Any]]] = Field(
        None, description="Data returned from query", title="Data"
    )
    annotation: Optional[Dict[str, Any]] = Field(
        None, description="Annotation returned from query", title="Annotation"
    )
    lastRefreshTime: Optional[str] = Field(
        None, description="Last refresh time of query", title="Lastrefreshtime"
    )
    dataSource: Optional[str] = Field(
        None, description="Data source of query", title="Datasource"
    )
    dbType: Optional[str] = Field(None, description="DB type of query", title="Dbtype")
    extDbType: Optional[str] = Field(
        None, description="External DB type of query", title="Extdbtype"
    )
    external: Optional[bool] = Field(
        None, description="External query", title="External"
    )
    slowQuery: Optional[bool] = Field(None, description="Slow query", title="Slowquery")
    total: Optional[int] = Field(None, description="Total of query", title="Total")
    error: Optional[str] = Field(None, description="Error of query", title="Error")


class DeleteTenantAccountDailyCostResponse(BaseModel):
    deleted_cost: TenantAccountDailyCostDTO = Field(
        ..., description="Deleted tenant account daily cost"
    )


class DeleteTenantPolicyExclusionsAPIRequestMixin(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    resource_catalog_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Resource Catalog Id"
    )
    feature_name: Optional[str] = Field(
        None, description="The name of the feature.", title="Feature Name"
    )
    metric_name: Optional[MetricName] = Field(
        None, description="The name of the metric."
    )
    exclusion_type: PolicyExclusionType = Field(
        ..., description="The type of the exclusion."
    )


class DeleteTenantPolicyExclusionsAPIRequestV2(BaseModel):
    exclusions: List[DeleteTenantPolicyExclusionsAPIRequestMixin] = Field(
        ..., description="The list of exclusions.", title="Exclusions"
    )


class DeleteTenantPolicyExclusionsRequestV2(BaseModel):
    exclusions: List[DeleteTenantPolicyExclusionsAPIRequestMixin] = Field(
        ..., description="The list of exclusions.", title="Exclusions"
    )
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class DeltaEvents(BaseModel):
    timestamp: datetime = Field(
        ..., description="Timestamp of the delta event", title="Timestamp"
    )
    event_type: EventType = Field(..., description="Type of the delta event")
    metric_name: DeltaEventsMetricName = Field(..., description="Name of the metric")
    metric_dimensions: Dict[str, Any] = Field(
        ..., description="Dimensions of the metric", title="Metric Dimensions"
    )
    metric_value: float = Field(
        ..., description="Value of the metric", title="Metric Value"
    )
    threshold_value: float = Field(
        ..., description="Threshold value of the metric", title="Threshold Value"
    )
    delta_absolute: float = Field(
        ..., description="Absolute delta of the metric", title="Delta Absolute"
    )
    delta_percentage: float = Field(
        ..., description="Percentage delta of the metric", title="Delta Percentage"
    )
    severity: Severity = Field(..., description="Severity of the delta event")
    method: DetectorMethods = Field(
        ..., description="Method used to detect the delta event"
    )
    method_params: Dict[str, Any] = Field(
        ...,
        description="Parameters used to detect the delta event",
        title="Method Params",
    )
    details: Dict[str, Any] = Field(
        ..., description="Details of the delta event", title="Details"
    )
    run_id: UUID = Field(..., description="Run ID of the delta event", title="Run Id")
    id: UUID = Field(..., description="ID of the delta event", title="Id")
    method_params_hash: Optional[str] = Field(
        None, description="Hash of the method parameters", title="Method Params Hash"
    )
    anomaly_alias: Optional[int] = Field(
        None, description="Anomaly alias of the delta event", title="Anomaly Alias"
    )
    created_at: datetime = Field(
        ..., description="Created at of the delta event", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Updated at of the delta event", title="Updated At"
    )


class DeltaEventsMixin(BaseModel):
    timestamp: datetime = Field(
        ..., description="Timestamp of the delta event", title="Timestamp"
    )
    event_type: EventType = Field(..., description="Type of the delta event")
    metric_name: DeltaEventsMetricName = Field(..., description="Name of the metric")
    metric_dimensions: Dict[str, Any] = Field(
        ..., description="Dimensions of the metric", title="Metric Dimensions"
    )
    metric_value: float = Field(
        ..., description="Value of the metric", title="Metric Value"
    )
    threshold_value: float = Field(
        ..., description="Threshold value of the metric", title="Threshold Value"
    )
    delta_absolute: float = Field(
        ..., description="Absolute delta of the metric", title="Delta Absolute"
    )
    delta_percentage: float = Field(
        ..., description="Percentage delta of the metric", title="Delta Percentage"
    )
    severity: Severity = Field(..., description="Severity of the delta event")
    method: DetectorMethods = Field(
        ..., description="Method used to detect the delta event"
    )
    method_params: Dict[str, Any] = Field(
        ...,
        description="Parameters used to detect the delta event",
        title="Method Params",
    )
    details: Dict[str, Any] = Field(
        ..., description="Details of the delta event", title="Details"
    )
    run_id: UUID = Field(..., description="Run ID of the delta event", title="Run Id")


class DeltaEventsRca(BaseModel):
    timestamp: datetime = Field(
        ..., description="Timestamp of the delta event", title="Timestamp"
    )
    event_type: EventType = Field(..., description="Type of the delta event")
    metric_name: DeltaEventsMetricName = Field(..., description="Name of the metric")
    metric_dimensions: Dict[str, Any] = Field(
        ..., description="Dimensions of the metric", title="Metric Dimensions"
    )
    metric_value: float = Field(
        ..., description="Value of the metric", title="Metric Value"
    )
    threshold_value: float = Field(
        ..., description="Threshold value of the metric", title="Threshold Value"
    )
    delta_absolute: float = Field(
        ..., description="Absolute delta of the metric", title="Delta Absolute"
    )
    delta_percentage: float = Field(
        ..., description="Percentage delta of the metric", title="Delta Percentage"
    )
    severity: Severity = Field(..., description="Severity of the delta event")
    method: DetectorMethods = Field(
        ..., description="Method used to detect the delta event"
    )
    method_params: Dict[str, Any] = Field(
        ...,
        description="Parameters used to detect the delta event",
        title="Method Params",
    )
    details: Dict[str, Any] = Field(
        ..., description="Details of the delta event", title="Details"
    )
    run_id: UUID = Field(..., description="Run ID of the delta event", title="Run Id")
    parent_id: UUID = Field(
        ..., description="Parent ID of the delta event", title="Parent Id"
    )
    id: UUID = Field(..., description="ID of the delta event", title="Id")
    method_params_hash: Optional[str] = Field(
        None, description="Hash of the method parameters", title="Method Params Hash"
    )
    created_at: datetime = Field(
        ..., description="Created at of the delta event", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Updated at of the delta event", title="Updated At"
    )


class DeltaEventsRcaMixin(BaseModel):
    timestamp: datetime = Field(
        ..., description="Timestamp of the delta event", title="Timestamp"
    )
    event_type: EventType = Field(..., description="Type of the delta event")
    metric_name: DeltaEventsMetricName = Field(..., description="Name of the metric")
    metric_dimensions: Dict[str, Any] = Field(
        ..., description="Dimensions of the metric", title="Metric Dimensions"
    )
    metric_value: float = Field(
        ..., description="Value of the metric", title="Metric Value"
    )
    threshold_value: float = Field(
        ..., description="Threshold value of the metric", title="Threshold Value"
    )
    delta_absolute: float = Field(
        ..., description="Absolute delta of the metric", title="Delta Absolute"
    )
    delta_percentage: float = Field(
        ..., description="Percentage delta of the metric", title="Delta Percentage"
    )
    severity: Severity = Field(..., description="Severity of the delta event")
    method: DetectorMethods = Field(
        ..., description="Method used to detect the delta event"
    )
    method_params: Dict[str, Any] = Field(
        ...,
        description="Parameters used to detect the delta event",
        title="Method Params",
    )
    details: Dict[str, Any] = Field(
        ..., description="Details of the delta event", title="Details"
    )
    run_id: UUID = Field(..., description="Run ID of the delta event", title="Run Id")
    parent_id: UUID = Field(
        ..., description="Parent ID of the delta event", title="Parent Id"
    )


class DerivedAttributes(BaseModel):
    storage_metrics: Optional[AggregatedStorageMetrics] = Field(
        None, description="The storage metrics."
    )
    lifecycle_policies: Optional[List[Dict[str, Any]]] = Field(
        None, description="The lifecycle policies.", title="Lifecycle Policies"
    )


class DetectChangeRequest(BaseModel):
    resource_id: UUID = Field(
        ..., description="Unique identifier for the resource", title="Resource Id"
    )
    usage_type_pattern: Optional[str] = Field(
        None, description="Pattern to match usage type", title="Usage Type Pattern"
    )
    source_usage_type_pattern: Optional[str] = Field(
        None,
        description="Pattern to match source usage type",
        title="Source Usage Type Pattern",
    )
    target_usage_type_pattern: Optional[str] = Field(
        None,
        description="Pattern to match target usage type",
        title="Target Usage Type Pattern",
    )
    source_delimiter: Optional[str] = Field(
        None,
        description="Delimiter to split source usage type",
        title="Source Delimiter",
    )
    target_delimiter: Optional[str] = Field(
        None,
        description="Delimiter to split target usage type",
        title="Target Delimiter",
    )
    action_type: GenericActionTypeEnum = Field(
        ..., description="Type of action to detect"
    )
    tenant_id: UUID = Field(
        ..., description="Unique identifier for the tenant", title="Tenant Id"
    )
    violation_closure_date: datetime = Field(
        ...,
        description="Date when the violation was closed",
        title="Violation Closure Date",
    )
    violation_start_date: datetime = Field(
        ..., description="Date when the violation started", title="Violation Start Date"
    )
    violation_last_active_date: datetime = Field(
        ...,
        description="Date when the violation was last active",
        title="Violation Last Active Date",
    )
    detection_buffer_days: Optional[conint(ge=3)] = Field(
        3,
        description="Number of days to buffer for detection",
        title="Detection Buffer Days",
    )
    is_resource_replaced: Optional[bool] = Field(
        False,
        description="Whether the resource was replaced",
        title="Is Resource Replaced",
    )
    alternate_resource_id: Optional[UUID] = Field(
        None,
        description="Alternate resource id if the resource was replaced",
        title="Alternate Resource Id",
    )


class DimensionMetadataFetchResponse(BaseModel):
    result: Dict[str, Union[StandardDimensionValues, JsonDimensionValues]] = Field(
        ..., description="Distinct values for each field", title="Result"
    )


class DisableMetricsRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the user", title="User Id"
    )
    user_role: Optional[UserRole] = Field(None, description="The role of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None, description="The unique identifiers of the nodes", title="Node Ids"
    )
    metric_name: MetricName = Field(..., description="The name of the metric")


class DisableTenantUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class EnableMetricsRequest(BaseModel):
    resource_ids: List[UUID] = Field(
        ...,
        description="The unique identifiers of the resources",
        min_length=1,
        title="Resource Ids",
    )
    metric_name: MetricName = Field(..., description="The name of the metric")
    entity_id: str = Field(..., description="The entity id", title="Entity Id")
    metrics_validity_period_days: int = Field(
        ...,
        description="Number of days the metrics collection will remain enabled",
        title="Metrics Validity Period Days",
    )
    look_back_days_for_metrics: int = Field(
        ...,
        description="Number of days to look back for metrics",
        title="Look Back Days For Metrics",
    )
    minimum_data_points_for_metrics: int = Field(
        ...,
        description="Minimum number of data points required for metrics",
        title="Minimum Data Points For Metrics",
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the user", title="User Id"
    )
    user_role: Optional[UserRole] = Field(None, description="The role of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None, description="The unique identifiers of the nodes", title="Node Ids"
    )


class EnableTenantUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class ExecuteSqlApiRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    sql_query: str = Field(..., description="SQL query", title="Sql Query")
    enable_pagination: Optional[bool] = Field(
        True, description="Enable pagination for the query", title="Enable Pagination"
    )
    db_engine: Optional[str] = Field(
        "POSTGRES", description="The type of the database engine", title="Db Engine"
    )


class ExecuteSqlRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    sql_query: str = Field(..., description="SQL query", title="Sql Query")
    enable_pagination: Optional[bool] = Field(
        True, description="Enable pagination for the query", title="Enable Pagination"
    )
    db_engine: Optional[str] = Field(
        "POSTGRES", description="The type of the database engine", title="Db Engine"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class ExecuteSqlResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    results: Any = Field(..., description="Result of the SQL query", title="Results")
    headers: List[str] = Field(
        ..., description="Headers of the SQL query", title="Headers"
    )
    execution_time: float = Field(
        ..., description="Time taken to execute the query", title="Execution Time"
    )


class FeatureConfig(BaseModel):
    enable_metrics_for_days: Optional[int] = Field(
        None, title="Enable Metrics For Days"
    )
    threshold_percentage: Optional[int] = Field(None, title="Threshold Percentage")
    look_back_days_for_metrics: Optional[int] = Field(
        None, title="Look Back Days For Metrics"
    )
    minimum_data_points_for_metrics: Optional[int] = Field(
        None, title="Minimum Data Points For Metrics"
    )
    reactivate_disabled_metrics_after_days: Optional[int] = Field(
        None, title="Reactivate Disabled Metrics After Days"
    )
    metric_name: Optional[MetricName] = None


class FeatureStore(BaseModel):
    enabled_for: Optional[List[str]] = Field(None, title="Enabled For")
    config: Optional[FeatureConfig] = None


class FetchAccountsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    accounts: List[Account] = Field(
        ..., description="List of accounts", title="Accounts"
    )


class FetchTenantDetailResponse(BaseModel):
    details: List[TenantDetailResponse] = Field(
        ..., description="List of tenant details", title="Details"
    )


class FetchTenantUsersResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination information")
    users: List[TenantUserDetails] = Field(..., title="Users")


class FetchUsersRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )


class GenerateSQLResponse(BaseModel):
    chain_of_thought: str = Field(
        ...,
        description="Detailed step-by-step reasoning process used to generate the SQL query using the provided schema",
        title="Chain Of Thought",
    )
    reflection: str = Field(
        ...,
        description="Reflect on the generated SQL query and the chain of thought based on the user query.",
        title="Reflection",
    )
    sql_query: str = Field(..., description="Generated SQL", title="Sql Query")
    status: OutputStatus = Field(..., description="Status of the query execution")
    error: Optional[str] = Field(
        None, description="Error message if any", title="Error"
    )
    retry_count: Optional[int] = Field(
        0, description="Number of retries", title="Retry Count"
    )


class GetActionTypeRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[ActionTypeFilters] = Field(
        default_factory=lambda: ActionTypeFilters.model_validate(
            {"ids": [], "alias": [], "services": []}
        ),
        description="Filters to apply to the Action Types.",
    )


class GetActionTypeResponse(BaseModel):
    action_types: List[ActionType] = Field(
        ..., description="Action Types", title="Action Types"
    )
    pagination: PaginationFields = Field(..., description="Pagination fields")


class GetAllNaviraFullLogResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    navira_logs: List[NaviraFullLogResponse] = Field(
        ..., description="List of Navira Logs.", title="Navira Logs"
    )


class GetAllNaviraLogResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    navira_logs: List[NaviraLogResponse] = Field(
        ..., description="List of Navira Logs.", title="Navira Logs"
    )


class GetAllPolicyViolationsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_violations: List[GetSinglePolicyViolationsResponse] = Field(
        ..., description="List of policy violations", title="Policy Violations"
    )


class GetAllResourceCatalogsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    resources: List[ResourceCatalogWithCost] = Field(
        ..., description="List of resource catalog.", title="Resources"
    )
    status: Optional[GenerationStatus] = Field(
        "SUCCESS", description="The status of the query, represented as an enum value."
    )
    ambiguous_values: Optional[List[str]] = Field(
        None,
        description="The list of error messages , eg. ambiguous columns names or one single error item •something went wrong (say)•",
        title="Ambiguous Values",
    )
    navira_log_id: Optional[UUID4] = Field(
        None,
        description="navira log id , if the text search is performed by navira",
        title="Navira Log Id",
    )
    ai_interpretation: Optional[str] = Field(
        None,
        description="The SQL query translated to a natural language query.",
        title="Ai Interpretation",
    )


class GetAllTenantConnectionsResponse(BaseModel):
    tenant: List[GetTenantConnectionResponse] = Field(..., title="Tenant")


class GetAllTenantEmbedAppsLinksResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    links: List[TenantEmbedAppsLinksWithUser] = Field(
        ..., description="List of links", title="Links"
    )


class GetAllThreadsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    threads: List[Thread] = Field(
        ..., description="List of threads for the tenant", title="Threads"
    )


class GetAllUsersRequest(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )


class GetCloudMetadataAPIRequest(BaseModel):
    filters: Optional[CloudMetadataFilters] = Field(
        None, description="The filters to apply to the cloud metadata"
    )


class GetCloudMetadataRequest(BaseModel):
    filters: Optional[CloudMetadataFilters] = Field(
        None, description="The filters to apply to the cloud metadata"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetCloudMetadataWithoutTagsAPIRequest(BaseModel):
    filters: Optional[CloudMetadataFiltersWithoutTags] = Field(
        None, description="The filters to apply to the cloud metadata"
    )


class GetCloudMetadataWithoutTagsRequest(BaseModel):
    filters: Optional[CloudMetadataFiltersWithoutTags] = Field(
        None, description="The filters to apply to the cloud metadata"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetClusterDataResponse(BaseModel):
    data: List[Dict[str, Any]] = Field(
        ..., description="Query result data points", title="Data"
    )
    pagination: Optional[PaginationFields] = Field(
        None, description="Pagination metadata for the response"
    )


class GetClusterDataTransformedResponse(BaseModel):
    total_value: float = Field(..., title="Total Value")
    previous_period_value: float = Field(..., title="Previous Period Value")
    delta: float = Field(..., title="Delta")
    delta_percentage: float = Field(..., title="Delta Percentage")
    table_groups: List[GroupData] = Field(
        ..., description="Table groups data", title="Table Groups"
    )
    visualization_groups: List[GroupData] = Field(
        ...,
        description="Visualization groups data, only looks at the last group if there are multiple groups",
        title="Visualization Groups",
    )


class GetClusterDataVisualizationsResponse(BaseModel):
    visualizations: List[Visualization] = Field(
        ..., description="List of visualizations", title="Visualizations"
    )


class GetClusterUtilizationResponse(BaseModel):
    utilization_stats: List[ResourceUtilization] = Field(
        ...,
        description="List of resource utilization statistics",
        title="Utilization Stats",
    )


class GetClusterUtilizationTimeseriesResponse(BaseModel):
    time_series_data: List[UtilizationDataPoint] = Field(
        ...,
        description="List of utilization data points over time",
        title="Time Series Data",
    )
    unit: str = Field(
        ..., description="Unit of measurement (vCPU, Gi, etc.)", title="Unit"
    )
    tool_tip: str = Field(
        ..., description="Tooltip of the resource type", title="Tool Tip"
    )
    average_utilized: float = Field(
        ..., description="Average utilized amount", title="Average Utilized"
    )
    average_requested: float = Field(
        ..., description="Average requested amount", title="Average Requested"
    )
    average_provisioned: float = Field(
        ..., description="Average provisioned amount", title="Average Provisioned"
    )


class GetDeltaEventDetailResponse(BaseModel):
    delta_event: DeltaEvents = Field(..., description="Delta event details")
    rca_events: Optional[List[DeltaEventsRca]] = Field(
        None, description="Related RCA events", title="Rca Events"
    )
    lifecycle_details: Optional[Dict[str, Any]] = Field(
        None,
        description="Lifecycle details of the delta event",
        title="Lifecycle Details",
    )


class GetDeltaEventLifecycleHistoryEntitiesAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    event_id: UUID = Field(..., description="ID of the delta event", title="Event Id")
    sort_criteria: Optional[SortCriteria] = Field(
        {"field": "created_at", "direction": "asc"},
        description="Sort criteria to sort history entries",
    )


class GetDeltaEventLifecycleHistoryEntitiesRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    event_id: UUID = Field(..., description="ID of the delta event", title="Event Id")
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sort criteria to sort history entries"
    )


class GetDeltaEventLifecycleHistoryEntitiesResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    event_id: UUID = Field(..., description="ID of the delta event", title="Event Id")
    history_entities: List[Dict[str, Any]] = Field(
        ...,
        description="Raw lifecycle history entities as dictionaries",
        title="History Entities",
    )


class GetDeltaEventLifecycleHistoryResponse(BaseModel):
    event_id: UUID = Field(..., description="ID of the delta event", title="Event Id")
    current_status: LifecycleStatus = Field(
        ..., description="Current status of the event"
    )
    assigned_to: Optional[UUID] = Field(
        None, description="Currently assigned user", title="Assigned To"
    )
    history: List[LifecycleHistoryEntry] = Field(
        ...,
        description="Lifecycle history entries in reverse chronological order",
        title="History",
    )


class GetDeltaEventsForWorkflowResponse(BaseModel):
    delta_events: List[DeltaEvents] = Field(
        ..., description="List of delta events", title="Delta Events"
    )


class GetDeltaEventsResourceRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    tenant_id: Optional[UUID] = Field(
        None, description="ID of the tenant", title="Tenant Id"
    )
    start_time: datetime = Field(
        ..., description="Start time of the delta event", title="Start Time"
    )
    end_time: datetime = Field(
        ..., description="End time of the delta event", title="End Time"
    )


class GetDeltaEventsResourceResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    metrics: TaggedUntaggedMetrics = Field(
        ..., description="Metrics of the delta event"
    )
    resources: List[DeltaEventResource] = Field(
        ..., description="Resources of the delta event", title="Resources"
    )


class GetDeltaEventsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    delta_events: List[DeltaEvents] = Field(
        ..., description="List of delta events", title="Delta Events"
    )


class GetFeaturesByFiltersRequest(BaseModel):
    scope: Optional[TenantFeatureScope] = Field(
        None, description="Scope of the feature"
    )
    feature_name: Optional[str] = Field(
        None, description="Name of the feature", title="Feature Name"
    )
    is_enabled: Optional[bool] = Field(
        None, description="Whether the feature is enabled", title="Is Enabled"
    )
    entity_id: Optional[List[str]] = Field(
        None, description="List of entity IDs for the feature", title="Entity Id"
    )
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class GetHierarchyFilters(BaseModel):
    state: Optional[HierarchyState] = Field(
        "ACTIVE", description="Filter by state(ACTIVE, INACTIVE, DRAFT)"
    )
    type: Optional[HierarchyType] = Field(
        None, description="Filter by type(DEFAUT, CUSTOM)"
    )


class GetHierarchyFlatRequest(BaseModel):
    filters: Optional[
        OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetHierarchyFlatFilters
    ] = Field(
        default_factory=lambda: OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetHierarchyFlatFilters.model_validate(
            {"is_leaf": True, "node_category": []}
        ),
        description="Filters for flat hierarchy nodes.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetHierarchyNodeMetricsResponse(BaseModel):
    metrics: Dict[str, HierarchyNodeResourceMetrics] = Field(
        ..., description="The metrics of the nodes.", title="Metrics"
    )


class GetHierarchyRequest(BaseModel):
    filters: Optional[GetHierarchyFilters] = Field(
        default_factory=lambda: GetHierarchyFilters.model_validate({"state": "ACTIVE"}),
        description="Filters for the hierarchy nodes.",
    )
    with_info: Optional[bool] = Field(
        False,
        description="Whether to include additional info in the response.",
        title="With Info",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetHierarchyResponse(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy.", title="Id"
    )
    data: Dict[str, Any] = Field(
        ..., description="The data of the hierarchy.", title="Data"
    )
    version: int = Field(
        ..., description="The version of the hierarchy.", title="Version"
    )
    state: HierarchyState = Field(..., description="The state of the hierarchy.")
    type: HierarchyType = Field(..., description="The type of the hierarchy.")


class GetLeafNodesRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    filters: Optional[GetHierarchyFilters] = Field(
        {"state": "ACTIVE"}, description="Filters for the hierarchy nodes."
    )


class GetMemoryMetricsEnabledAccountDetailsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    accounts: List[AccountWithMemoryMetricsStatus] = Field(
        ..., description="List of accounts with memory metrics status", title="Accounts"
    )


class GetMetricsAvailabilityForResourceRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the user", title="User Id"
    )
    user_role: Optional[UserRole] = Field(None, description="The role of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None, description="The unique identifiers of the nodes", title="Node Ids"
    )
    resource_ids: List[UUID] = Field(
        ..., description="The unique identifiers of the resources", title="Resource Ids"
    )
    metric_name: MetricName = Field(..., description="The name of the metric")


class GetMetricsAvailabilityForResourceResponse(BaseModel):
    metrics_availability: List[MetricsAvailability] = Field(
        ..., description="The availability of the metrics", title="Metrics Availability"
    )


class GetMetricsControlStatusCountRequest(BaseModel):
    resource_ids: Optional[List[UUID]] = Field(
        None,
        description="The unique identifiers of the resources",
        title="Resource Ids",
    )
    metric_name: Optional[MetricName] = Field(
        None, description="The name of the metric"
    )
    status: Optional[MetricsControlStatus] = Field(
        None, description="The status of the metric control"
    )
    entity_id: Optional[str] = Field(
        None, description="The entity id", title="Entity Id"
    )
    change_manager_event_ids: Optional[List[str]] = Field(
        None,
        description="The unique identifier of the change manager events",
        title="Change Manager Event Ids",
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the user", title="User Id"
    )
    user_role: Optional[UserRole] = Field(None, description="The role of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None, description="The unique identifiers of the nodes", title="Node Ids"
    )


class GetMetricsControlStatusCountResponse(BaseModel):
    status_counts: List[MetricsControlStatusCount] = Field(
        ...,
        description="The counts of the metrics control status",
        title="Status Counts",
    )


class GetMetricsControlStatusRequest(BaseModel):
    resource_ids: Optional[List[UUID]] = Field(
        None,
        description="The unique identifiers of the resources",
        title="Resource Ids",
    )
    metric_name: Optional[MetricName] = Field(
        None, description="The name of the metric"
    )
    status: Optional[MetricsControlStatus] = Field(
        None, description="The status of the metric control"
    )
    entity_id: Optional[str] = Field(
        None, description="The entity id", title="Entity Id"
    )
    change_manager_event_ids: Optional[List[str]] = Field(
        None,
        description="The unique identifier of the change manager events",
        title="Change Manager Event Ids",
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the user", title="User Id"
    )
    user_role: Optional[UserRole] = Field(None, description="The role of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None, description="The unique identifiers of the nodes", title="Node Ids"
    )


class GetMetricsControlWebhookRequest(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the metrics control", title="Id"
    )
    tenant_id: str = Field(
        ...,
        description="The unique identifier of the tenant along with the account id",
        title="Tenant Id",
    )
    status: MetricsControlStatus = Field(
        ..., description="The status of the change manager request"
    )
    event: ChangeManagerEventAttributes = Field(
        ..., description="The event attributes from change manager response"
    )
    output: Optional[str] = Field(
        None, description="The output of the change manager request", title="Output"
    )


class GetMetricsResponse(BaseModel):
    metrics: List[OnelensModelsServiceInterfacesTenantDataMetricsServiceMetric] = Field(
        ..., title="Metrics"
    )
    unit: str = Field(..., title="Unit")


class GetNaviraLogApiRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )


class GetNaviraLogsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    navira_logs: List[NaviraLog] = Field(
        ..., description="List of Navira logs", title="Navira Logs"
    )


class GetOrganizationByIDResponse(BaseModel):
    name: str = Field(..., description="Name of the organization", title="Name")
    id: UUID4 = Field(..., description="ID of the organization", title="Id")
    short_id: int = Field(
        ..., description="Unique identifier for the organization", title="Short Id"
    )
    status: Optional[OrganizationState] = Field(
        ..., description="Status of the organization"
    )
    total_tenants: Optional[int] = Field(
        ..., description="Total tenants of the organization", title="Total Tenants"
    )
    country: Optional[str] = Field(
        ..., description="Country of the organization", title="Country"
    )
    industry: Optional[List[str]] = Field(
        ..., description="Industry of the organization", title="Industry"
    )
    monthly_cloud_spend: Optional[int] = Field(
        ...,
        description="Monthly cloud spend of the organization",
        title="Monthly Cloud Spend",
    )
    cloud_service_providers: Optional[List[str]] = Field(
        ...,
        description="Cloud service providers of the organization",
        title="Cloud Service Providers",
    )
    website: Optional[str] = Field(
        ..., description="Website of the organization", title="Website"
    )
    changelogs: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Changelogs of the organization", title="Changelogs"
    )
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the organization", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at of the organization", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the organization", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the organization", title="Updated By"
    )


class GetOrganizationsRequest(BaseModel):
    filters: Optional[OrganizationFilters] = Field(
        {}, description="Filters to apply to the policy templates."
    )


class GetPipelineRunConfigRequest(BaseModel):
    filters: Optional[GetPipelineRunConfigRequestFilters] = Field(
        None, description="Filters for getting pipeline run configuration."
    )


class GetPolicyTemplatePackByIdResponse(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template pack", title="Alias"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template pack"
    )
    provider: Provider = Field(
        ..., description="The provider of the policy template pack"
    )
    details: PolicyTemplatePackDetails = Field(
        ..., description="The details of the policy template pack"
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template pack", title="Id"
    )
    state: PolicyTemplatePackState = Field(
        ..., description="The state of the policy template pack"
    )


class GetPolicyTemplatePacksRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )


class GetPolicyTicketStatsGroupBy(BaseModel):
    field_name: str = Field(
        ..., description="Field name to be fetched", title="Field Name"
    )
    field_value: Optional[float] = Field(
        None, description="Value of the field", title="Field Value"
    )
    field_details: Optional[List[GetPolicyTicketStatsSubGroupBy]] = Field(
        None, description="Details of the field", title="Field Details"
    )
    field_display_name: Optional[str] = Field(
        None, description="Display name of the field", title="Field Display Name"
    )


class GetPolicyTicketStatsResponse(BaseModel):
    value: float = Field(..., description="Value of the metric", title="Value")
    details: Optional[List[GetPolicyTicketStatsGroupBy]] = Field(
        None, description="Details of the metric", title="Details"
    )


class GetPolicyTicketsForNotificationResponse(BaseModel):
    data: List[GetSinglePolicyTicketForNotificationResponse] = Field(
        ..., description="List of tickets", title="Data"
    )


class GetRecommendationTicket(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    potential_saving: str = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    data: List[RecommendationTicket] = Field(..., description="Data", title="Data")


class GetRecommendationTicketResponse(BaseModel):
    recommendations: List[GetRecommendationTicket] = Field(
        ..., description="The recommendations for the ticket", title="Recommendations"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )


class GetRecommendationUnitByIdResponse(BaseModel):
    recommendation_unit: RecommendationUnit = Field(
        ..., description="Recommendation Unit"
    )


class GetRecommendationUnitByIdsResponse(BaseModel):
    recommendation_units: List[RecommendationUnit] = Field(
        ..., description="Recommendation Units", title="Recommendation Units"
    )


class GetRecommendationUnitRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[RecommendationUnitFilters] = Field(
        default_factory=lambda: RecommendationUnitFilters.model_validate(
            {
                "ids": [],
                "services": [],
                "action_type_alias": [],
                "priorities": [],
                "efforts": [],
            }
        ),
        description="Filters to apply to the Recommendation Unit.",
    )


class GetRecommendationUnitsResponse(BaseModel):
    recommendation_units: List[RecommendationUnitWithActionType] = Field(
        ..., description="Recommendation Unit", title="Recommendation Units"
    )
    pagination: PaginationFields = Field(..., description="Pagination fields")


class GetResourceByIdResponse(BaseModel):
    resource: Optional[ResourceCatalog] = Field(
        None, description="The resource catalog."
    )


class GetResourceCatalogResponse(BaseModel):
    sql_query: str = Field(..., description="Generated SQL", title="Sql Query")
    status: OutputStatus = Field(..., description="Status of the query execution")
    error: Optional[str] = Field(
        None, description="Error message if any", title="Error"
    )


class GetResourceResponse(BaseModel):
    resource: Optional[ResourceCatalog] = Field(
        None, description="The resource catalog."
    )


class GetResourceWithRelationResponse(BaseModel):
    resource: ResourceCatalog = Field(..., description="The resource details.")
    relationships: Optional[List[ResourceRelationshipResponse]] = Field(
        [], description="The resource relationships.", title="Relationships"
    )


class GetS3CostDetailsRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="The id of the tenant.", title="Tenant Id"
    )
    resource_id: Union[str, List[str]] = Field(
        ..., description="The id of the resource.", title="Resource Id"
    )
    time_range: OnelensModelsServiceInterfacesS3OptimisationS3OptimisationServiceTimeRange = Field(
        ..., description="The time range of the request."
    )
    is_export_request: Optional[bool] = Field(
        False,
        description="Whether the request is an export request.",
        title="Is Export Request",
    )


class GetServiceDashboardStatsResponse(BaseModel):
    services: List[ServiceDashboardStatsDetail] = Field(
        ..., description="List of services with their stats", title="Services"
    )
    total_potential_savings: float = Field(
        ...,
        description="Total potential savings across all services",
        title="Total Potential Savings",
    )
    total_monthly_cost: float = Field(
        ...,
        description="Total monthly cost across all services",
        title="Total Monthly Cost",
    )
    total_services: int = Field(
        ..., description="Total number of services", title="Total Services"
    )


class GetSinglePolicyTicketByEntityIdResponse(BaseModel):
    ticket_id: UUID = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    ticket_alias: str = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Alias"
    )
    status: PolicyTicketStatus = Field(..., description="Status of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    violation_attributes: Dict[str, Any] = Field(
        ..., description="Attributes of the violation", title="Violation Attributes"
    )
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_name: str = Field(
        ..., description="Name of the resource", title="Entity Name"
    )
    region: str = Field(..., description="Region of the resource", title="Region")
    service: str = Field(..., description="Service of the resource", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    account_id: str = Field(
        ..., description="Account Id managing the resource", title="Account Id"
    )
    recommendation_unit_title: Optional[str] = Field(
        None,
        description="recommendation names of the ticket",
        title="Recommendation Unit Title",
    )
    policy_id: UUID = Field(
        ..., description="The unique identifier of the policy", title="Policy Id"
    )
    policy_title: str = Field(..., description="Policy name", title="Policy Title")
    policy_labels: Optional[List[str]] = Field(
        None, description="List of policy labels", title="Policy Labels"
    )
    policy_display_alias: Optional[str] = Field(
        None, description="Policy alias", title="Policy Display Alias"
    )
    policy_violated_on: datetime = Field(
        ..., description="Datetime of the policy violation", title="Policy Violated On"
    )
    potential_savings: float = Field(
        ...,
        description="Potential savings possible for the current policy violation",
        title="Potential Savings",
    )
    resource_id: Optional[str] = Field(
        None, description="Id of the resource", title="Resource Id"
    )
    account_name: Optional[str] = Field(
        None, description="Account name", title="Account Name"
    )


class GetSinglePolicyTicketByPolicyIdResponse(BaseModel):
    model_config = ConfigDict(
        extra="allow",
    )
    ticket_id: UUID = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    status: PolicyTicketStatus = Field(..., description="Status of the ticket")
    state: Optional[TicketState] = Field(None, description="State of the ticket")
    violation_attributes: Optional[Dict[str, Any]] = Field(
        None, description="Attributes of the violation", title="Violation Attributes"
    )
    ticket_category: Optional[TicketCategory] = Field(
        "POLICY_TICKET", description="Category of the ticket"
    )
    violation_attributes_details: Optional[Dict[str, ViolationAttributesDetails]] = (
        Field(
            None,
            description="Details of the violation attributes",
            title="Violation Attributes Details",
        )
    )
    entity_id: Optional[UUID] = Field(
        None,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_name: Optional[str] = Field(
        None, description="Name of the resource", title="Entity Name"
    )
    region: Optional[str] = Field(
        None, description="Region of the resource", title="Region"
    )
    service: Optional[str] = Field(
        None, description="Service of the resource", title="Service"
    )
    service_display_name: Optional[str] = Field(
        None, description="Service name in UI", title="Service Display Name"
    )
    account_id: Optional[str] = Field(
        None, description="Account Id managing the resource", title="Account Id"
    )
    recommendation_unit_title: Optional[str] = Field(
        None,
        description="recommendation names of the ticket",
        title="Recommendation Unit Title",
    )
    potential_savings: Optional[float] = Field(
        None, description="Potential savings of the ticket", title="Potential Savings"
    )
    resource_id: Optional[str] = Field(
        None, description="Id of the resource", title="Resource Id"
    )
    account_name: Optional[str] = Field(
        None, description="Account name", title="Account Name"
    )
    policy_id: Optional[UUID4] = Field(None, description="Policy id", title="Policy Id")
    policy_title: Optional[str] = Field(
        None, description="Policy title", title="Policy Title"
    )
    policy_display_alias: Optional[str] = Field(
        None, description="Policy alias", title="Policy Display Alias"
    )
    policy_labels: Optional[List[str]] = Field(
        None, description="Policy labels", title="Policy Labels"
    )
    effort: Optional[Effort] = Field(
        None, description="Effort of the ticket recommendation"
    )
    ticket_alias: Optional[str] = Field(
        None, description="The unique identifier of the ticket", title="Ticket Alias"
    )
    first_run_at: Optional[datetime] = Field(
        None, description="violation creation time", title="First Run At"
    )
    node_ids: Optional[List[UUID4]] = Field(
        None, description="List of node ids", title="Node Ids"
    )
    category: Optional[str] = Field(
        None, description="Policy category", title="Category"
    )
    risk: Optional[str] = Field(None, description="Risk level", title="Risk")
    subcategory: Optional[str] = Field(
        None, description="Subcategory", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="Change type", title="Change Type"
    )
    monthly_achieved_savings: Optional[float] = Field(
        None, description="Monthly achieved savings", title="Monthly Achieved Savings"
    )
    violation_closure_details: Optional[ViolationClosureDetails] = Field(
        None, description="Violation closure details"
    )
    last_run_at: Optional[datetime] = Field(
        None, description="Last run time", title="Last Run At"
    )
    ticket_closure_date: Optional[datetime] = Field(
        None, description="Ticket closure date", title="Ticket Closure Date"
    )
    resource_acted_on: Optional[datetime] = Field(
        None,
        description="Date in which resource was acted on",
        title="Resource Acted On",
    )
    impact_on_performance: Optional[ImpactOnPerformance] = Field(
        None, description="Impact on performance"
    )
    priority: Optional[Priority] = Field(None, description="Priority")
    ticket_type: Optional[TicketType] = Field(None, description="Ticket type")
    objective: Optional[str] = Field(None, description="Objective", title="Objective")
    ticket_owner: Optional[str] = Field(
        None, description="Ticket owner", title="Ticket Owner"
    )
    compatibility_issues: Optional[str] = Field(
        None, description="Compatibility issues", title="Compatibility Issues"
    )
    downtime_required: Optional[float] = Field(
        None, description="Downtime required", title="Downtime Required"
    )


class GetTagsRequest(BaseModel):
    filters: Optional[CloudMetadataFilters] = Field(
        {"type": ["TAG_KEY", "TAG_VALUE"]},
        description="The filters to apply to the cloud metadata",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantAccountDailyCostRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    id: Optional[UUID] = Field(
        None,
        description="Unique identifier for the tenant account daily cost",
        title="Id",
    )
    tenant_id: Optional[UUID] = Field(
        None, description="Unique identifier for the tenant", title="Tenant Id"
    )
    account_id: Optional[str] = Field(
        None, description="Unique identifier for the account", title="Account Id"
    )
    cost_on: Optional[date] = Field(
        None, description="Date of the cost", title="Cost On"
    )
    aws_cost: Optional[float] = Field(None, description="AWS cost", title="Aws Cost")
    onelens_cost: Optional[float] = Field(
        None, description="OneLens cost", title="Onelens Cost"
    )
    cost_from: Optional[date] = Field(
        None, description="Start date for cost filtering", title="Cost From"
    )
    cost_to: Optional[date] = Field(
        None, description="End date for cost filtering", title="Cost To"
    )


class GetTenantAccountDailyCostResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    results: List[TenantAccountDailyCostDTO] = Field(
        ..., description="List of tenant account daily cost records", title="Results"
    )


class GetTenantByIDResponse(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        ..., description="Unique identifier for the organization", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")
    short_id: str = Field(
        ..., description="Unique identifier for the tenant", title="Short Id"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    tenant_state: TenantState = Field(..., description="State of the tenant")
    database_connection_string: Optional[str] = Field(
        ...,
        description="DB connection string for tenant",
        title="Database Connection String",
    )
    s3_bucket_name: Optional[str] = Field(
        ..., description="S3 bucket for tenant", title="S3 Bucket Name"
    )
    type: Optional[List[str]] = Field(
        ..., description="Type of the tenant", title="Type"
    )
    status_reason: Optional[str] = Field(
        ..., description="Status reason of the tenant", title="Status Reason"
    )
    expiry_date: Optional[datetime] = Field(
        ..., description="Expiry date of the tenant", title="Expiry Date"
    )
    plan: Optional[str] = Field(..., description="Plan of the tenant", title="Plan")
    plan_config: Optional[Dict[str, Any]] = Field(
        ..., description="Plan config of the tenant", title="Plan Config"
    )
    billing_owner: Optional[UUID4] = Field(
        ..., description="Billing owner of the tenant", title="Billing Owner"
    )
    billing_type: Optional[str] = Field(
        ..., description="Billing type of the tenant", title="Billing Type"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Milestones of the tenant", title="Milestones"
    )
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at of the tenant", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the tenant", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the tenant", title="Updated By"
    )
    external_id: Optional[str] = Field(
        ..., description="External id of the tenant", title="External Id"
    )


class GetTenantEmbedAppsLinkResponse(BaseModel):
    created_by: UUID4 = Field(
        ...,
        description="The unique identifier of the user who created the link",
        title="Created By",
    )
    created_at: datetime = Field(
        ...,
        description="The date and time when the link was created",
        title="Created At",
    )
    updated_at: datetime = Field(
        ...,
        description="The date and time when the link was updated",
        title="Updated At",
    )
    updated_by: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user who updated the link",
        title="Updated By",
    )
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )
    state: TenantEmbedAppsLinkState = Field(..., description="State of the link")
    id: UUID4 = Field(..., description="The unique identifier of the link", title="Id")


class GetTenantPoliciesAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantPolicyFilters] = Field(
        default_factory=lambda: TenantPolicyFilters.model_validate(
            {
                "parent_ptp_ids": [],
                "categories": [],
                "providers": [],
                "services": [],
                "execution_types": [],
                "risk_levels": [],
                "cost_saving_categories": [],
                "change_types": [],
                "effort_levels": [],
            }
        ),
        description="Filters to apply to the tenant policies.",
    )


class GetTenantPoliciesRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantPolicyFilters] = Field(
        default_factory=lambda: TenantPolicyFilters.model_validate(
            {
                "parent_ptp_ids": [],
                "categories": [],
                "providers": [],
                "services": [],
                "execution_types": [],
                "risk_levels": [],
                "cost_saving_categories": [],
                "change_types": [],
                "effort_levels": [],
            }
        ),
        description="Filters to apply to the tenant policies.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantPolicyExclusionsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    policy_ids: Optional[List[UUID4]] = Field(
        [], description="The list of tenant policy ids.", title="Policy Ids"
    )
    resource_catalog_ids: Optional[List[UUID]] = Field(
        [],
        description="The list of resource catalog ids.",
        title="Resource Catalog Ids",
    )
    feature_names: Optional[List[str]] = Field(
        [], description="The list of feature names.", title="Feature Names"
    )
    metric_names: Optional[List[MetricName]] = Field(
        [], description="The list of metric names.", title="Metric Names"
    )
    exclusion_types: Optional[List[PolicyExclusionType]] = Field(
        [], description="The list of exclusion types.", title="Exclusion Types"
    )


class GetTenantPolicyExclusionsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    policy_ids: Optional[List[UUID4]] = Field(
        [], description="The list of tenant policy ids.", title="Policy Ids"
    )
    resource_catalog_ids: Optional[List[UUID]] = Field(
        [],
        description="The list of resource catalog ids.",
        title="Resource Catalog Ids",
    )
    feature_names: Optional[List[str]] = Field(
        [], description="The list of feature names.", title="Feature Names"
    )
    metric_names: Optional[List[MetricName]] = Field(
        [], description="The list of metric names.", title="Metric Names"
    )
    exclusion_types: Optional[List[PolicyExclusionType]] = Field(
        [], description="The list of exclusion types.", title="Exclusion Types"
    )
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class GetTenantPolicyExclusionsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    exclusions: List[TenantPolicyExclusionsMixin] = Field(
        ..., description="The list of exclusions.", title="Exclusions"
    )


class GetTenantSettingsResponse(BaseModel):
    tenant_settings_response: List[TenantSettingsResponse] = Field(
        ..., title="Tenant Settings Response"
    )


class GetTenantTicketsAuditRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    filters: TenantTicketAuditFilters = Field(..., description="Filters to be applied")
    pagination_params: PaginationParams = Field(
        ..., description="Pagination parameters"
    )


class GetTenantTicketsAuditResponse(BaseModel):
    data: List[GetSingleTenantTicketAuditResponse] = Field(
        ..., description="List of tickets", title="Data"
    )
    pagination: PaginationFields = Field(..., description="Pagination fields")


class GetTenantUserProfileResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    profile_pic_url: Optional[str] = Field(
        None, description="Profile picture URL of the user", title="Profile Pic Url"
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )


class GetTenantUsersWithoutUserContextResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    users: List[BaseUser] = Field(
        ..., description="List of tenant users", title="Users"
    )


class GetTenantsListResponse(BaseModel):
    tenants: List[TenantsList] = Field(..., title="Tenants")


class GetTenantsRequest(BaseModel):
    filters: Optional[TenantFilters] = Field(
        {}, description="Filters to apply to the policy templates."
    )


class GetThreadByIdResponse(BaseModel):
    thread: Thread = Field(..., description="Thread with the given unique identifier")
    state: Any = Field(..., description="State of the agent", title="State")


class GetTicketStatsByPriorityResponse(BaseModel):
    stats_by_priority: Optional[List[PriortizedTicketStats]] = Field(
        None,
        description="Array containing ticket stats grouped by priority",
        title="Stats By Priority",
    )


class GetTicketStatsGroupBy(BaseModel):
    field_name: str = Field(
        ..., description="Field name to be fetched", title="Field Name"
    )
    field_value: Optional[float] = Field(
        None, description="Value of the field", title="Field Value"
    )
    field_details: Optional[List[GetTicketStatsSubGroupBy]] = Field(
        [], description="Details of the field", title="Field Details"
    )
    field_display_name: Optional[str] = Field(
        None, description="Display name of the field", title="Field Display Name"
    )


class GetTicketStatsResponse(BaseModel):
    value: float = Field(..., description="Value of the metric", title="Value")
    details: Optional[List[GetTicketStatsGroupBy]] = Field(
        None, description="Details of the metric", title="Details"
    )


class GetTicketTimeseriesCostDataMetricDetails(BaseModel):
    metric_type: TenantTicketsStatsMetrics = Field(
        ..., description="Type of the metric"
    )
    metric_value: float = Field(..., title="Metric Value")


class GetTicketTimeseriesCostDataPoint(BaseModel):
    timestamp: datetime = Field(..., title="Timestamp")
    details: List[GetTicketTimeseriesCostDataMetricDetails] = Field(
        ..., title="Details"
    )


class GetTicketTimeseriesCostDataResponse(BaseModel):
    metrics: List[TenantTicketsStatsMetrics] = Field(..., title="Metrics")
    granularity: OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit
    accumulation_type: TimeSeriesDataAccumulationType
    data: List[GetTicketTimeseriesCostDataPoint] = Field(..., title="Data")


class GetTicketTimeseriesDataMetricDetails(BaseModel):
    field_type: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        None, description="Type of the field"
    )
    field_name: Optional[str] = Field(
        None, description="Name of the field", title="Field Name"
    )
    field_display_name: Optional[str] = Field(
        None, description="Display name of the field", title="Field Display Name"
    )
    metric_value: float = Field(..., title="Metric Value")


class GetTicketTimeseriesDataPoint(BaseModel):
    timestamp: datetime = Field(..., title="Timestamp")
    details: List[GetTicketTimeseriesDataMetricDetails] = Field(..., title="Details")


class GetTicketTimeseriesDataResponse(BaseModel):
    metric: TenantTicketsStatsMetrics
    granularity: OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit
    accumulation_type: TimeSeriesDataAccumulationType
    data: List[GetTicketTimeseriesDataPoint] = Field(..., title="Data")


class GetUserByIDResponse(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )
    id: UUID4 = Field(..., description="Unique identifier for the user", title="Id")


class GetUserCustomTicketByArnResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    custom_tickets: List[CustomTicketResponseModel] = Field(
        ...,
        description="List of custom tickets matching the ARN ID",
        title="Custom Tickets",
    )


class GetUsersNodesCategories(BaseModel):
    categories: Dict[
        str,
        List[OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2],
    ] = Field(
        ...,
        description="Dictionary of node categories and their child categories.",
        title="Categories",
    )


class GetWorkloadsByNamespaceResponse(BaseModel):
    pagination: Optional[PaginationFields] = Field(
        None, description="Pagination metadata for the response"
    )
    groups: Optional[List[NamespaceEfficiencyGroup]] = Field(
        None, description="List of namespace efficiency groups", title="Groups"
    )


class GroupByOption(BaseModel):
    type: GroupByType = Field(
        ..., description="Type of the group (e.g., NODE, GENERAL)"
    )
    value: Union[
        OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2,
        TenantTicketsStatsMetricsGroupBy,
    ] = Field(..., description="Value of the group", title="Value")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class HierarchyNodeAttributionDetails(BaseModel):
    nodes: List[UUID4] = Field(
        ..., description="List of nodes with which the node is shared", title="Nodes"
    )
    strategy: HierarchySharedNodeStrategy = Field(
        ..., description="Strategy for attribution"
    )


class HierarchyNodeEntityDTOInput(BaseModel):
    id: Optional[UUID] = Field(
        None, description="The unique identifier of the hierarchy node.", title="Id"
    )
    name: constr(max_length=30) = Field(..., title="Name")
    category: Category = Field(..., title="HierarchyNodeCategory")
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )
    created_at: Optional[datetime] = Field(
        None, description="Created at timestamp", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Updated at timestamp", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        None, description="Created by user id", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        None, description="Updated by user id", title="Updated By"
    )


class HierarchyNodeEntityDTOOutput(BaseModel):
    id: Optional[UUID] = Field(
        None, description="The unique identifier of the hierarchy node.", title="Id"
    )
    name: constr(max_length=30) = Field(..., title="Name")
    category: Category = Field(..., title="HierarchyNodeCategory")
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )
    created_at: Optional[datetime] = Field(
        None, description="Created at timestamp", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Updated at timestamp", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        None, description="Created by user id", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        None, description="Updated by user id", title="Updated By"
    )


class HierarchyNodeParentItem(BaseModel):
    node_id: Union[UUID4, str] = Field(
        ..., description="The id of the node.", title="Node Id"
    )
    name: str = Field(..., description="The name of the node.", title="Name")
    category: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2 = Field(
        ..., description="The category of the node."
    )


class InsertDeltaEventsAPIRequest(BaseModel):
    delta_events: List[DeltaEventsMixin] = Field(
        ..., description="List of delta events", title="Delta Events"
    )


class InsertDeltaEventsRcaAPIRequest(BaseModel):
    delta_events_rcas: List[DeltaEventsRcaMixin] = Field(
        ..., description="List of delta events", title="Delta Events Rcas"
    )


class InsertDeltaEventsRcaRequest(BaseModel):
    delta_events_rcas: List[DeltaEventsRcaMixin] = Field(
        ..., description="List of delta events", title="Delta Events Rcas"
    )
    tenant_id: UUID = Field(
        ..., description="Tenant ID of the delta event", title="Tenant Id"
    )


class InsertDeltaEventsRcaResponse(BaseModel):
    delta_events_rcas: List[DeltaEventsRca] = Field(
        ..., description="List of delta events", title="Delta Events Rcas"
    )


class InsertDeltaEventsRequest(BaseModel):
    delta_events: List[DeltaEventsMixin] = Field(
        ..., description="List of delta events", title="Delta Events"
    )
    tenant_id: UUID = Field(
        ..., description="Tenant ID of the delta event", title="Tenant Id"
    )


class InsertDeltaEventsResponse(BaseModel):
    delta_events: List[DeltaEvents] = Field(
        ..., description="List of delta events", title="Delta Events"
    )


class InsightAdditionalData(BaseModel):
    description: Optional[str] = Field(
        None, description="Detailed description of the insight", title="Description"
    )
    metrics_data: Optional[InsightMetricsData] = Field(
        None, description="Detailed metrics data"
    )
    potential_savings_explanation: Optional[str] = Field(
        None,
        description="Explanation of potential savings calculation",
        title="Potential Savings Explanation",
    )


class InsightItemInput(BaseModel):
    title: str = Field(..., description="Title of the insight", title="Title")
    description: str = Field(
        ..., description="Short description of the insight", title="Description"
    )
    category: str = Field(..., description="Category of the insight", title="Category")
    transition_cost: Optional[float] = Field(
        None, description="One-time transition cost", title="Transition Cost"
    )
    potential_savings: Optional[float] = Field(
        None, description="Potential monthly savings", title="Potential Savings"
    )
    analysis: Optional[str] = Field(
        None, description="Detailed analysis of the situation", title="Analysis"
    )
    additional_data: Optional[InsightAdditionalData] = Field(
        None, description="Additional data for the insight"
    )
    recommendation: Optional[str] = Field(
        None,
        description="Specific recommendation to address the insight",
        title="Recommendation",
    )


class InsightItemOutput(BaseModel):
    title: str = Field(..., description="Title of the insight", title="Title")
    description: str = Field(
        ..., description="Short description of the insight", title="Description"
    )
    category: str = Field(..., description="Category of the insight", title="Category")
    transition_cost: Optional[float] = Field(
        None, description="One-time transition cost", title="Transition Cost"
    )
    potential_savings: Optional[float] = Field(
        None, description="Potential monthly savings", title="Potential Savings"
    )
    analysis: Optional[str] = Field(
        None, description="Detailed analysis of the situation", title="Analysis"
    )
    additional_data: Optional[InsightAdditionalData] = Field(
        None, description="Additional data for the insight"
    )
    recommendation: Optional[str] = Field(
        None,
        description="Specific recommendation to address the insight",
        title="Recommendation",
    )


class KubernetesProcessorConfig(BaseModel):
    processor_type: Optional[ProcessorType] = "KUBERNETES_PROCESSOR"
    processor_name: str = Field(
        ..., description="Name of the processor", title="Processor Name"
    )
    payloads: Optional[Dict[str, KubernetesProcessorPayload]] = Field(
        None, description="Kubernetes query configurations", title="Payloads"
    )


class LeafNodes(BaseModel):
    nodes: List[HierarchyNodeEntityDTOInput] = Field(
        ..., description="List of leaf nodes.", title="Nodes"
    )


class ListCustomFieldsRequest(BaseModel):
    entity: Optional[EntityTypeModel] = None
    category: Optional[str] = Field(None, title="Category")
    ids: Optional[List[UUID]] = Field(None, title="Ids")
    is_active: Optional[bool] = Field(True, title="Is Active")
    pagination: Optional[PaginationRequest] = Field(
        default_factory=lambda: PaginationRequest.model_validate(
            {"page": 1, "page_size": 10}
        )
    )
    sort_by: Optional[str] = Field("created_at", title="Sort By")
    sort_order: Optional[str] = Field("desc", title="Sort Order")


class ListCustomFieldsResponse(BaseModel):
    items: List[CustomFieldResponse] = Field(..., title="Items")
    pagination: PaginationMetadata


class LogPipelineRunRequest(BaseModel):
    agent_run_id: str = Field(
        ..., description="ID of the agent run", title="Agent Run Id"
    )
    status: PipelineRunStatus = Field(..., description="Status of the pipeline run")


class MappedResourcesResponseEntity(BaseModel):
    ol_key: str = Field(..., title="Ol Key")
    resource_name: EntityName
    service: str = Field(..., title="Service")
    region: str = Field(..., title="Region")
    account: EntityName
    conflict_status: ValidateNodeFilterConflictStatus
    mapped_to: List = Field(..., title="Mapped To")


class MessagePart(BaseModel):
    type: MessagePartType = Field(..., description="Type of the message part")
    value: Any = Field(..., description="Value of the message part", title="Value")


class MetricChartFilters(BaseModel):
    key: str = Field(
        ..., description="Dynamic key-value pairs for metric filters", title="Key"
    )
    value_from: Optional[str] = Field(
        None, description="source of value for the metric filter", title="Value From"
    )
    value: Optional[Union[List[str], str]] = Field(
        None, description="The value of the metric filter", title="Value"
    )
    operator: Optional[OnelensModelsServiceInterfacesPoliciesCommonsOperator] = Field(
        None, description="The operator for the metric filter"
    )


class MetricFeature(BaseModel):
    metric_name: str = Field(..., description="Name of the metric", title="Metric Name")
    status: MetricFeatureStatus = Field(..., description="Status of the metric")
    title: str = Field(..., description="Title of the metric", title="Title")
    description: str = Field(
        ..., description="Description of the metric", title="Description"
    )
    linkDetails: LinkDetails = Field(..., description="Link details for the metric")
    theme: MetricFeatureTheme = Field(..., description="Theme for the metric")


class MetricsControlResponse(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the metrics control", title="Id"
    )
    resource_id: UUID = Field(
        ..., description="The unique identifier of the resource", title="Resource Id"
    )
    metric_name: MetricName = Field(..., description="The name of the metric")
    status: MetricsControlStatus = Field(
        ..., description="The status of the metric control"
    )
    requested_on: datetime = Field(
        ...,
        description="The date and time when the metric control was requested",
        title="Requested On",
    )
    expires_on: datetime = Field(
        ...,
        description="The date and time when the metric control expires",
        title="Expires On",
    )
    entity_id: str = Field(..., description="The entity id", title="Entity Id")
    attributes: Optional[Dict[str, Any]] = Field(
        None, description="The attributes of the metric control", title="Attributes"
    )
    change_manager_event_id: Optional[UUID] = Field(
        None,
        description="The unique identifier of the change manager event",
        title="Change Manager Event Id",
    )


class MetricsLookBackPeriod(BaseModel):
    value_from: str = Field(
        ..., description="value from for the look back.", title="Value From"
    )
    value: MetricsValueUnit = Field(..., description="The value of the look back.")


class MetricsThreshold(BaseModel):
    value_from: Optional[str] = Field(
        None, description="value_from for the threshold.", title="Value From"
    )
    value: Optional[MetricsValueUnit] = Field(
        None, description="The value of the threshold."
    )


class NotificationRequest(BaseModel):
    entity_type: Optional[NotificationEntityType] = "ticket"
    event_type: Optional[NotificationType] = "ticket_processed"
    id: List[UUID] = Field(..., title="Id")
    tenant_id: UUID = Field(..., title="Tenant Id")
    type: Optional[str] = Field("default", title="Type")


class Organization(BaseModel):
    name: str = Field(..., description="Name of the organization", title="Name")
    id: UUID4 = Field(..., description="ID of the organization", title="Id")
    short_id: int = Field(
        ..., description="Unique identifier for the organization", title="Short Id"
    )
    status: Optional[OrganizationState] = Field(
        ..., description="Status of the organization"
    )
    total_tenants: Optional[int] = Field(
        ..., description="Total tenants of the organization", title="Total Tenants"
    )
    country: Optional[str] = Field(
        ..., description="Country of the organization", title="Country"
    )
    industry: Optional[List[str]] = Field(
        ..., description="Industry of the organization", title="Industry"
    )
    monthly_cloud_spend: Optional[int] = Field(
        ...,
        description="Monthly cloud spend of the organization",
        title="Monthly Cloud Spend",
    )
    cloud_service_providers: Optional[List[str]] = Field(
        ...,
        description="Cloud service providers of the organization",
        title="Cloud Service Providers",
    )
    website: Optional[str] = Field(
        ..., description="Website of the organization", title="Website"
    )
    changelogs: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Changelogs of the organization", title="Changelogs"
    )
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the organization", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at of the organization", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the organization", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the organization", title="Updated By"
    )


class OverrideTenantPolicyConfigResponse(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy setting.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    config_overrides: Optional[Dict[str, Any]] = Field(
        None,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    config_hash: Optional[str] = Field(
        None,
        description="The hash of the config overrides for the tenant policy setting.",
        title="Config Hash",
    )
    state: TenantPolicyState = Field(
        ..., description="The state of the policy template."
    )
    version: int = Field(
        ..., description="The version of the tenant policy.", title="Version"
    )
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions for the tenant policy."
    )
    last_run_at: Optional[datetime] = Field(
        None,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class OverrideTenantPolicyExclusionsAPIRequest(BaseModel):
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions to add."
    )


class OverrideTenantPolicyExclusionsRequest(BaseModel):
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions to add."
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )


class OverrideTenantPolicyExclusionsResponse(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy setting.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    config_overrides: Optional[Dict[str, Any]] = Field(
        None,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    config_hash: Optional[str] = Field(
        None,
        description="The hash of the config overrides for the tenant policy setting.",
        title="Config Hash",
    )
    state: TenantPolicyState = Field(
        ..., description="The state of the policy template."
    )
    version: int = Field(
        ..., description="The version of the tenant policy.", title="Version"
    )
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions for the tenant policy."
    )
    last_run_at: Optional[datetime] = Field(
        None,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class PolicyTag(BaseModel):
    tag_key: str = Field(..., description="The key of the tag", title="Tag Key")
    display_name: str = Field(
        ..., description="Display name for the tag", title="Display Name"
    )
    cell_type: str = Field(
        ..., description="Type of cell for display", title="Cell Type"
    )
    values: List[PolicyTagValue] = Field(
        ..., description="Possible values for this tag", title="Values"
    )


class PolicyTemplateFilters(BaseModel):
    search_query: Optional[str] = Field(
        None,
        description="Search query to filter policy templates, applies on title and description.",
        title="Search Query",
    )
    parent_ptp_ids: Optional[List[UUID4]] = Field(
        [],
        description="Filter by parent policy template pack id.",
        title="Parent Ptp Ids",
    )
    states: Optional[List[PolicyTemplateState]] = Field(
        ["ACTIVE"], description="Filter by state. Default is ACTIVE.", title="States"
    )
    categories: Optional[List[PolicyCategory]] = Field(
        [], description="Filter by type.", title="Categories"
    )
    providers: Optional[List[Provider]] = Field(
        [], description="Filter by provider.", title="Providers"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        [], description="Filter by services.", title="Services"
    )
    execution_types: Optional[List[PolicyExecutionType]] = Field(
        [], description="Filter by execution type.", title="Execution Types"
    )


class PolicyTemplatePack(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template pack", title="Alias"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template pack"
    )
    provider: Provider = Field(
        ..., description="The provider of the policy template pack"
    )
    details: PolicyTemplatePackDetails = Field(
        ..., description="The details of the policy template pack"
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template pack", title="Id"
    )
    state: PolicyTemplatePackState = Field(
        ..., description="The state of the policy template pack"
    )


class PolicyTemplateRecommendationDetailsInput(BaseModel):
    applicable_recommendation_units: Optional[
        List[PolicyTemplateRecommendationUnits]
    ] = Field(
        [],
        description="The list of applicable recommendation units",
        title="Applicable Recommendation Units",
    )


class PolicyTemplateRecommendationDetailsOutput(BaseModel):
    applicable_recommendation_units: Optional[
        List[PolicyTemplateRecommendationUnits]
    ] = Field(
        [],
        description="The list of applicable recommendation units",
        title="Applicable Recommendation Units",
    )


class ProviderConfigInput(BaseModel):
    regions: Optional[Dict[str, Any]] = Field(None, title="Regions")
    role_name: Optional[str] = Field(None, title="Role Name")
    cur_bucket_config: Optional[CurBucketConfig] = None
    storage_lens_config: Optional[StorageLensConfig] = None


class ProviderConfigOutput(BaseModel):
    regions: Optional[Dict[str, Any]] = Field(None, title="Regions")
    role_name: Optional[str] = Field(None, title="Role Name")
    cur_bucket_config: Optional[CurBucketConfig] = None
    storage_lens_config: Optional[StorageLensConfig] = None


class RecommendationEngineAPIRequest(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    resource_id: UUID = Field(..., description="Resource ID", title="Resource Id")
    params: RecommendationParams = Field(..., description="Recommendation Params")
    policy_config: Dict[str, Any] = Field(
        ..., description="Policy Config", title="Policy Config"
    )


class RecommendationEngineRequest(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    resource_id: UUID = Field(..., description="Resource ID", title="Resource Id")
    params: RecommendationParams = Field(..., description="Recommendation Params")
    policy_config: Dict[str, Any] = Field(
        ..., description="Policy Config", title="Policy Config"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")


class ResourceCatalogCostDataMixin(BaseModel):
    id: UUID = Field(
        ..., description="The id of the resource catalog cost data.", title="Id"
    )
    resource_catalog_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Resource Catalog Id"
    )
    start_datetime: datetime = Field(
        ..., description="The start datetime.", title="Start Datetime"
    )
    end_datetime: datetime = Field(
        ..., description="The end datetime.", title="End Datetime"
    )
    granularity: OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit = Field(
        ..., description="The granularity."
    )
    unblended_cost: Optional[float] = Field(
        None, description="The unblended cost.", title="Unblended Cost"
    )
    blended_cost: Optional[float] = Field(
        None, description="The blended cost.", title="Blended Cost"
    )
    net_unblended_cost: Optional[float] = Field(
        None, description="The net unblended cost.", title="Net Unblended Cost"
    )


class ResourceCatalogFetchV2ByIDResponse(BaseModel):
    derived_attributes: Optional[DerivedAttributes] = Field(
        None, description="The derived attributes."
    )
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    resource_id: Optional[str] = Field(
        None, description="Id of the Resource", title="Resource Id"
    )
    resource_url_template: str = Field(
        ..., description="Resource url template", title="Resource Url Template"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")
    tags: Optional[Dict[str, Any]] = Field(
        None, description="Resource tags.", title="Tags"
    )
    additional_info: Dict[str, Any] = Field(
        ..., description="Additional info of the resource.", title="Additional Info"
    )
    run_id: Optional[UUID4] = Field(None, description="The run id.", title="Run Id")
    last_updated_at: Optional[datetime] = Field(
        None, description="The last updated at.", title="Last Updated At"
    )
    account_name: Optional[str] = Field(
        None, description="Cloud name of the account", title="Account Name"
    )
    tagged_resource: Optional[bool] = Field(
        False,
        description="true if the resource have tags tagged resource",
        title="Tagged Resource",
    )
    resource_created_at: Optional[datetime] = Field(
        None, description="The resource creation date", title="Resource Created At"
    )
    resource_updated_at: Optional[datetime] = Field(
        None, description="The resource updating date", title="Resource Updated At"
    )
    cost_allocation_tags: Optional[List[str]] = Field(
        [], description="The cost allocation tags.", title="Cost Allocation Tags"
    )


class ResourceCatalogResponse(BaseModel):
    derived_attributes: Optional[DerivedAttributes] = Field(
        None, description="The derived attributes."
    )
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    resource_id: Optional[str] = Field(
        None, description="Id of the Resource", title="Resource Id"
    )
    resource_url_template: str = Field(
        ..., description="Resource url template", title="Resource Url Template"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")
    tags: Optional[Dict[str, Any]] = Field(
        None, description="Resource tags.", title="Tags"
    )
    additional_info: Dict[str, Any] = Field(
        ..., description="Additional info of the resource.", title="Additional Info"
    )
    run_id: Optional[UUID4] = Field(None, description="The run id.", title="Run Id")
    last_updated_at: Optional[datetime] = Field(
        None, description="The last updated at.", title="Last Updated At"
    )
    account_name: Optional[str] = Field(
        None, description="Cloud name of the account", title="Account Name"
    )
    tagged_resource: Optional[bool] = Field(
        False,
        description="true if the resource have tags tagged resource",
        title="Tagged Resource",
    )
    resource_created_at: Optional[datetime] = Field(
        None, description="The resource creation date", title="Resource Created At"
    )
    resource_updated_at: Optional[datetime] = Field(
        None, description="The resource updating date", title="Resource Updated At"
    )


class ResourceCatalogWithCostV2(BaseModel):
    derived_attributes: Optional[DerivedAttributes] = Field(
        None, description="The derived attributes."
    )
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    title: str = Field(..., description="Resource name", title="Title")
    account_name: Optional[str] = Field(
        None, description="Cloud name of the account", title="Account Name"
    )
    current_cost: Optional[float] = Field(
        None, description="The current cost.", title="Current Cost"
    )
    previous_cost: Optional[float] = Field(
        None, description="The previous cost.", title="Previous Cost"
    )
    delta: Optional[float] = Field(None, description="The delta cost.", title="Delta")
    total_potential_savings: Optional[float] = Field(
        None,
        description="Total potential savings for the resource",
        title="Total Potential Savings",
    )
    region: Optional[str] = Field(
        None, description="The region of the resource", title="Region"
    )
    storage_cost: Optional[float] = Field(
        0.0, description="The storage cost.", title="Storage Cost"
    )
    versioning_enabled: Optional[bool] = Field(
        None, description="The versioning enabled.", title="Versioning Enabled"
    )
    lifecycle_rules: Optional[List[Dict[str, Any]]] = Field(
        None, description="The lifecycle rules.", title="Lifecycle Rules"
    )
    total_recommendations: Optional[int] = Field(
        0, description="The total recommendations.", title="Total Recommendations"
    )


class ResourceHierarchyMappingRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    leaf_nodes: LeafNodes = Field(..., description="The leaf nodes")


class ResourceMetrics(BaseModel):
    resource_type: str = Field(
        ..., description="Type of resource", title="Resource Type"
    )
    metrics: List[OnelensModelsServiceInterfacesKubernetesServiceDtoMetric] = Field(
        ..., description="Metrics for the resource", title="Metrics"
    )
    unit: str = Field(..., description="Unit of the resource", title="Unit")
    tool_tip: str = Field(..., description="Tooltip of the resource", title="Tool Tip")
    utilization_percentage: Optional[float] = Field(
        None,
        description="Utilization percentage (may be null if not calculable)",
        title="Utilization Percentage",
    )
    is_underutilized: Optional[bool] = Field(
        False,
        description="Whether the resource is underutilized",
        title="Is Underutilized",
    )


class ResourceType(BaseModel):
    resource_type: str = Field(..., title="Resource Type")
    resource_table: str = Field(..., title="Resource Table")
    identifier_key: Optional[str] = Field(None, title="Identifier Key")
    select_columns: List[str] = Field(..., title="Select Columns")
    resource_url_template: str = Field(..., title="Resource Url Template")
    is_tags_available: bool = Field(..., title="Is Tags Available")
    relationship_config: List[RelationshipConfigItem] = Field(
        ..., title="Relationship Config"
    )
    created_at_column: Optional[str] = Field(None, title="Created At Column")
    updated_at_column: Optional[str] = Field(None, title="Updated At Column")
    metrics: Optional[
        List[OnelensModelsServiceInterfacesTenantMetadataServiceCatalogDtoMetric]
    ] = Field(None, title="Metrics")
    metric_table: Optional[str] = Field(None, title="Metric Table")
    resource_metric_config: Optional[ResourceMetricConfig] = None


class ResponseAddTenantPolicyExclusionsResponse(BaseModel):
    data: AddTenantPolicyExclusionsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCloudwatchMetric(BaseModel):
    data: CloudwatchMetric
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreatePolicyTemplatePackResponse(BaseModel):
    data: CreatePolicyTemplatePackResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateTenantEmbedAppsLinksResponse(BaseModel):
    data: CreateTenantEmbedAppsLinksResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateTenantUserResponse(BaseModel):
    data: CreateTenantUserResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateUserResponse(BaseModel):
    data: CreateUserResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCustomFieldResponse(BaseModel):
    data: CustomFieldResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseDataRetrieverResponse(BaseModel):
    data: DataRetrieverResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseExecuteSqlResponse(BaseModel):
    data: ExecuteSqlResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseFetchTenantDetailResponse(BaseModel):
    data: FetchTenantDetailResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseFetchTenantUsersResponse(BaseModel):
    data: FetchTenantUsersResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetAllNaviraLogResponse(BaseModel):
    data: GetAllNaviraLogResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetAllPolicyViolationsResponse(BaseModel):
    data: GetAllPolicyViolationsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetAllResourceCatalogsResponse(BaseModel):
    data: GetAllResourceCatalogsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetAllTenantEmbedAppsLinksResponse(BaseModel):
    data: GetAllTenantEmbedAppsLinksResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetAllThreadsResponse(BaseModel):
    data: GetAllThreadsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetDeltaEventDetailResponse(BaseModel):
    data: GetDeltaEventDetailResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetDeltaEventLifecycleHistoryEntitiesResponse(BaseModel):
    data: GetDeltaEventLifecycleHistoryEntitiesResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetDeltaEventLifecycleHistoryResponse(BaseModel):
    data: GetDeltaEventLifecycleHistoryResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetDeltaEventsResourceResponse(BaseModel):
    data: GetDeltaEventsResourceResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetDeltaEventsResponse(BaseModel):
    data: GetDeltaEventsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetHierarchyResponse(BaseModel):
    data: GetHierarchyResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetMetricsResponse(BaseModel):
    data: GetMetricsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetNaviraLogsResponse(BaseModel):
    data: GetNaviraLogsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPolicyTemplatePackByIdResponse(BaseModel):
    data: GetPolicyTemplatePackByIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPolicyTicketStatsResponse(BaseModel):
    data: GetPolicyTicketStatsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetRecommendationUnitByIdResponse(BaseModel):
    data: GetRecommendationUnitByIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetRecommendationUnitsResponse(BaseModel):
    data: GetRecommendationUnitsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetResourceResponse(BaseModel):
    data: GetResourceResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetResourceWithRelationResponse(BaseModel):
    data: GetResourceWithRelationResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetServiceDashboardStatsResponse(BaseModel):
    data: GetServiceDashboardStatsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantByIDResponse(BaseModel):
    data: GetTenantByIDResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantEmbedAppsLinkResponse(BaseModel):
    data: GetTenantEmbedAppsLinkResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantPolicyExclusionsResponse(BaseModel):
    data: GetTenantPolicyExclusionsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantUserProfileResponse(BaseModel):
    data: GetTenantUserProfileResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantsListResponse(BaseModel):
    data: GetTenantsListResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetThreadByIdResponse(BaseModel):
    data: GetThreadByIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTicketStatsByPriorityResponse(BaseModel):
    data: GetTicketStatsByPriorityResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTicketStatsResponse(BaseModel):
    data: GetTicketStatsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTicketTimeseriesCostDataResponse(BaseModel):
    data: GetTicketTimeseriesCostDataResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTicketTimeseriesDataResponse(BaseModel):
    data: GetTicketTimeseriesDataResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetUserCustomTicketByArnResponse(BaseModel):
    data: GetUserCustomTicketByArnResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetUsersNodesCategories(BaseModel):
    data: GetUsersNodesCategories
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseInsertDeltaEventsRcaResponse(BaseModel):
    data: InsertDeltaEventsRcaResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseInsertDeltaEventsResponse(BaseModel):
    data: InsertDeltaEventsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseListCustomFieldsResponse(BaseModel):
    data: ListCustomFieldsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseOverrideTenantPolicyExclusionsResponse(BaseModel):
    data: OverrideTenantPolicyExclusionsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseResourceCatalogFetchV2ByIDResponse(BaseModel):
    data: ResourceCatalogFetchV2ByIDResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseResourceCatalogResponse(BaseModel):
    data: ResourceCatalogResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseSetTenantProviderStatusResponse(BaseModel):
    data: SetTenantProviderStatusResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseSetTenantStatusResponse(BaseModel):
    data: SetTenantStatusResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateCURSavedViewResponse(BaseModel):
    data: UpdateCURSavedViewResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateCustomTenantTicketResponse(BaseModel):
    data: UpdateCustomTenantTicketResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateDeltaEventLifecycleResponse(BaseModel):
    data: UpdateDeltaEventLifecycleResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateTenantEmbedAppsLinksResponse(BaseModel):
    data: UpdateTenantEmbedAppsLinksResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateTenantManagementResponse(BaseModel):
    data: UpdateTenantManagementResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateTenantResponse(BaseModel):
    data: UpdateTenantResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateTenantTicketResponse(BaseModel):
    data: UpdateTenantTicketResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateTenantTicketsResponse(BaseModel):
    data: UpdateTenantTicketsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpsertResourceCatalogCostDataResponse(BaseModel):
    data: UpsertResourceCatalogCostDataResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseValidateHierarchyNodeFieldsResponse(BaseModel):
    data: ValidateHierarchyNodeFieldsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseVirtualTagFiltersResponse(BaseModel):
    data: VirtualTagFiltersResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class S3OptimisationGridData(BaseModel):
    ol_id: Optional[str] = Field(..., title="Ol Id")
    cloud_id: str = Field(..., title="Cloud Id")
    account_name: Optional[str] = Field(None, title="Account Name")
    region: str = Field(..., title="Region")
    title: Optional[str] = Field(None, title="Title")
    versioning_enabled: Optional[bool] = Field(None, title="Versioning Enabled")
    lifecycle_rules: Optional[List[Dict[str, Any]]] = Field(
        None, title="Lifecycle Rules"
    )
    total_recommendations: Optional[int] = Field(None, title="Total Recommendations")
    derived_attributes: Optional[Dict[str, AggregatedBucketMetrics]] = Field(
        None, title="Derived Attributes"
    )
    previous_cost: float = Field(..., title="Previous Cost")
    delta: float = Field(..., title="Delta")
    storage_cost: float = Field(..., title="Storage Cost")
    current_cost: float = Field(..., title="Current Cost")


class S3OptimisationGridDataResponse(BaseModel):
    resources: List[S3OptimisationGridData] = Field(..., title="Resources")
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    total_cost: float = Field(..., title="Total Cost")
    total_buckets: int = Field(..., title="Total Buckets")


class S3OptimisationInsight(BaseModel):
    id: str = Field(..., title="Id")
    title: str = Field(..., title="Title")
    description: str = Field(..., title="Description")
    category: InsightsCategory
    transition_cost: Optional[float] = Field(None, title="Transition Cost")
    potential_savings: Optional[float] = Field(None, title="Potential Savings")
    analysis: str = Field(..., title="Analysis")
    additional_data: Dict[str, Any] = Field(..., title="Additional Data")
    recommendation: str = Field(..., title="Recommendation")
    associated_ticket_id: Optional[UUID4] = Field(None, title="Associated Ticket Id")
    ticket_prefill_data: Optional[S3OptimisationInsightTicketMetadata] = None


class S3RequestTimeFilter(BaseModel):
    duration: Optional[TimeFilterOption] = Field(
        "last_60_days", description="Time filter option"
    )


class SearchTenantPoliciesAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    search_term: str = Field(..., title="Search Term")
    sort_criteria: Optional[SortCriteria] = None


class SearchTenantPoliciesRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    search_term: str = Field(..., title="Search Term")
    sort_criteria: Optional[SortCriteria] = None
    tenant_id: UUID4 = Field(..., title="Tenant Id")


class SearchTenantPoliciesResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policies: List[TenantPolicySearchResult] = Field(
        ..., description="List of tenant policies.", title="Policies"
    )


class ServiceCatalog(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    product_code: str = Field(..., title="Product Code")
    display_name: str = Field(..., title="Display Name")
    description: str = Field(..., title="Description")
    resource_types: Optional[List[ResourceType]] = Field([], title="Resource Types")
    features: Optional[Features] = Field(
        default_factory=lambda: Features.model_validate(
            {"enable_in_policy": False, "enable_in_anomalies": False}
        )
    )


class ServiceCatalogResponse(BaseModel):
    services: List[ServiceCatalog] = Field(..., title="Services")


class SimpleTenantUser(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    first_name: str = Field(
        ..., description="First name of the user", title="First Name"
    )
    last_name: str = Field(..., description="Last name of the user", title="Last Name")
    email: EmailStr = Field(..., description="Email of the user", title="Email")
    role: UserRole = Field(..., description="Role of the user in the tenant")
    status: UserStatus = Field(..., description="Status of the user")


class SubGroupByOption(BaseModel):
    type: GroupByType = Field(
        ..., description="Type of the group (e.g., NODE, GENERAL)"
    )
    value: Union[
        OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2,
        TenantTicketsStatsMetricsSubGroupBy,
    ] = Field(..., description="Value of the group", title="Value")


class TableInfo(BaseModel):
    table_name: str = Field(..., description="Table name", title="Table Name")
    service: Optional[str] = Field(
        "", description="Service type of the table", title="Service"
    )
    resource_type: Optional[str] = Field(
        "", description="Resource type of the table", title="Resource Type"
    )
    table_type: Optional[TableType] = Field(None, description="Type of the table")


class TableMetadata(BaseModel):
    table_name: str = Field(..., description="Table name", title="Table Name")
    title: Optional[str] = Field("", description="Title of the table", title="Title")
    description: str = Field(
        ..., description="Description of the table", title="Description"
    )
    service: Optional[str] = Field(
        "", description="Service type of the table", title="Service"
    )
    resource_type: Optional[str] = Field(
        "", description="Resource type of the table", title="Resource Type"
    )
    columns: List[Column] = Field(
        ..., description="Columns in the table", title="Columns"
    )
    example_query_descriptions: Optional[List[ExampleQuery]] = Field(
        None,
        description="Example queries for the table",
        title="Example Query Descriptions",
    )
    table_type: Optional[TableType] = Field(None, description="Type of the table")


class TaskConfig(BaseModel):
    agent_run_id: UUID = Field(
        ..., description="ID of the agent run", title="Agent Run Id"
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    ol_cluster_id: UUID = Field(
        ..., description="ID of the cluster", title="Ol Cluster Id"
    )
    time_range: TimeRangeOutput
    payload: Dict[str, str] = Field(
        ..., description="S3 configuration for the task", title="Payload"
    )


class Tenant(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        ..., description="Unique identifier for the organization", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")
    short_id: str = Field(
        ..., description="Unique identifier for the tenant", title="Short Id"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    tenant_state: TenantState = Field(..., description="State of the tenant")
    database_connection_string: Optional[str] = Field(
        ...,
        description="DB connection string for tenant",
        title="Database Connection String",
    )
    s3_bucket_name: Optional[str] = Field(
        ..., description="S3 bucket for tenant", title="S3 Bucket Name"
    )
    type: Optional[List[str]] = Field(
        ..., description="Type of the tenant", title="Type"
    )
    status_reason: Optional[str] = Field(
        ..., description="Status reason of the tenant", title="Status Reason"
    )
    expiry_date: Optional[datetime] = Field(
        ..., description="Expiry date of the tenant", title="Expiry Date"
    )
    plan: Optional[str] = Field(..., description="Plan of the tenant", title="Plan")
    plan_config: Optional[Dict[str, Any]] = Field(
        ..., description="Plan config of the tenant", title="Plan Config"
    )
    billing_owner: Optional[UUID4] = Field(
        ..., description="Billing owner of the tenant", title="Billing Owner"
    )
    billing_type: Optional[str] = Field(
        ..., description="Billing type of the tenant", title="Billing Type"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Milestones of the tenant", title="Milestones"
    )
    created_at: Optional[datetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        ..., description="Updated at of the tenant", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the tenant", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the tenant", title="Updated By"
    )
    external_id: Optional[str] = Field(
        ..., description="External id of the tenant", title="External Id"
    )


class TenantAccountFilters(BaseModel):
    cloud_ids: Optional[List[str]] = Field(
        None, description="Cloud ID filter", title="Cloud Ids"
    )
    cloud_providers: Optional[List[str]] = Field(
        None, description="Cloud provider filter", title="Cloud Providers"
    )
    parent_ids: Optional[List[UUID4]] = Field(
        None, description="Parent ID filter", title="Parent Ids"
    )
    is_parent_account: Optional[bool] = Field(
        None, description="Parent account filter", title="Is Parent Account"
    )
    is_verified: Optional[bool] = Field(
        None, description="Is verified filter", title="Is Verified"
    )
    states: Optional[List[TenantProviderState]] = Field(
        None, description="State filter", title="States"
    )


class TenantAnomalySettingFilters(BaseModel):
    states: Optional[List[TenantAnomalyState]] = Field(
        ["ACTIVE"], description="Filter by state. Default is ACTIVE.", title="States"
    )


class TenantFeature(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the tenant feature", title="Id"
    )
    feature_id: UUID4 = Field(
        ...,
        description="Unique identifier for the feature from catalog",
        title="Feature Id",
    )
    feature_name: str = Field(
        ..., description="Name of the feature", title="Feature Name"
    )
    is_enabled: bool = Field(
        ..., description="Whether the feature is enabled", title="Is Enabled"
    )
    scope: TenantFeatureScope = Field(..., description="Scope of the feature")
    entity_id: Optional[str] = Field(
        None, description="Entity ID for the feature", title="Entity Id"
    )
    config: Optional[FeatureConfig] = Field(
        None, description="Configuration for the feature"
    )
    integration_status: FeatureIntegrationStatus = Field(
        ..., description="Integration status of the feature"
    )
    created_at: datetime = Field(
        ..., description="Creation datetime of the feature", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Update datetime of the feature", title="Updated At"
    )


class TenantPolicySettings(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy setting.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    config_overrides: Optional[Dict[str, Any]] = Field(
        None,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    config_hash: Optional[str] = Field(
        None,
        description="The hash of the config overrides for the tenant policy setting.",
        title="Config Hash",
    )
    state: TenantPolicyState = Field(
        ..., description="The state of the policy template."
    )
    version: int = Field(
        ..., description="The version of the tenant policy.", title="Version"
    )
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions for the tenant policy."
    )
    last_run_at: Optional[datetime] = Field(
        None,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class TenantPolicySettingsFilters(BaseModel):
    states: Optional[List[TenantPolicyState]] = Field(
        ["ACTIVE"], description="Filter by state. Default is ACTIVE.", title="States"
    )
    policy_ids: Optional[List[UUID4]] = Field(
        [], description="Filter by tenant policy id.", title="Policy Ids"
    )


class TenantProvider(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigOutput] = Field(
        ..., description="provider config"
    )
    id: UUID4 = Field(..., description="Unique ID for the Tenant Provider", title="Id")
    is_parent_account: bool = Field(
        ..., description="billing account", title="Is Parent Account"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    is_billing_account: bool = Field(
        ..., description="is billing account", title="Is Billing Account"
    )
    is_verified: bool = Field(..., description="is verified", title="Is Verified")
    state: TenantProviderState = Field(..., description="state")
    external_id: str = Field(..., description="external id", title="External Id")
    use_external_id: bool = Field(
        ..., description="use external id", title="Use External Id"
    )


class TenantProviderFilters(BaseModel):
    tenant_ids: Optional[List[UUID4]] = Field(
        None, description="Tenant ID filter", title="Tenant Ids"
    )
    cloud_ids: Optional[List[str]] = Field(
        None, description="Cloud ID filter", title="Cloud Ids"
    )
    cloud_providers: Optional[List[str]] = Field(
        None, description="Cloud provider filter", title="Cloud Providers"
    )
    parent_ids: Optional[List[UUID4]] = Field(
        None, description="Parent ID filter", title="Parent Ids"
    )
    is_parent_account: Optional[bool] = Field(
        None, description="Parent account filter", title="Is Parent Account"
    )
    is_billing_account: Optional[bool] = Field(
        None, description="Billing account filter", title="Is Billing Account"
    )
    is_verified: Optional[bool] = Field(
        None, description="Is verified filter", title="Is Verified"
    )
    states: Optional[List[TenantProviderState]] = Field(
        None, description="State filter", title="States"
    )


class TenantTicketFilters(BaseModel):
    monitor_ids: Optional[List[UUID5]] = Field(
        [],
        description="List of violation monitor ids/anomaly node ids for which tickets are to be fetched.",
        title="Monitor Ids",
    )
    ticket_categories: Optional[List[TicketCategory]] = Field(
        [],
        description="List of ticket categories for which tickets are to be fetched.",
        title="Ticket Categories",
    )
    states: Optional[List[TicketState]] = Field(
        [],
        description="List of ticket State for which tickets are to be fetched.",
        title="States",
    )
    statuses: Optional[Union[List[PolicyTicketStatus], List[AnomalyTicketStatus]]] = (
        Field(
            [],
            description="List of ticket Statuss for which tickets are to be fetched.",
            title="Statuses",
        )
    )
    policy_ids: Optional[List[UUID4]] = Field(
        [],
        description="List of policy ids for which tickets are to be fetched.",
        title="Policy Ids",
    )
    trigger_ids: Optional[List[UUID4]] = Field(
        [],
        description="List of trigger ids for which tickets are to be fetched.",
        title="Trigger Ids",
    )
    last_run_ids: Optional[List[UUID4]] = Field(
        [],
        description="List of last run ids for which tickets are to be fetched.",
        title="Last Run Ids",
    )
    last_run_at_lte: Optional[datetime] = Field(
        None,
        description="less than equal to datetime filter for the last policy violation/anomaly run",
        title="Last Run At Lte",
    )
    last_run_at_gte: Optional[datetime] = Field(
        None,
        description="greater than equal to datetime filter for the last policy violation/anomaly run",
        title="Last Run At Gte",
    )
    manual_closure_initiated: Optional[bool] = Field(
        None,
        description="Flag indicating if the manual closure was initiated",
        title="Manual Closure Initiated",
    )


class TenantTicketStatusMetadata(BaseModel):
    id: str = Field(
        ..., description="The unique identifier of the status metadata", title="Id"
    )
    display_name: str = Field(
        ..., description="Display name for the status", title="Display Name"
    )
    activity_log_format: ActivityLogFormat = Field(
        ..., description="JSON containing title and note format templates"
    )
    display_priority: Optional[int] = Field(
        0, description="Priority for display ordering", title="Display Priority"
    )
    state: Optional[TicketState] = Field(
        "OPEN", description="State of the ticket status"
    )
    is_active: Optional[bool] = Field(
        True, description="Whether the status is active", title="Is Active"
    )
    created_by: UUID4 = Field(
        ...,
        description="UUID of the user who created this status metadata",
        title="Created By",
    )
    updated_by: UUID4 = Field(
        ...,
        description="UUID of the user who last updated this status metadata",
        title="Updated By",
    )
    created_at: datetime = Field(
        ..., description="Datetime of metadata creation", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Datetime of metadata updation", title="Updated At"
    )


class TenantTicketStatusMetadataApiResponse(BaseModel):
    id: str = Field(
        ..., description="The unique identifier of the status metadata", title="Id"
    )
    display_name: str = Field(
        ..., description="Display name for the status", title="Display Name"
    )
    display_priority: Optional[int] = Field(
        0, description="Priority for display ordering", title="Display Priority"
    )
    state: Optional[TicketState] = Field(
        "OPEN", description="State of the ticket status"
    )


class TenantUserDetailsUpdateFieldsMixin(BaseModel):
    first_name: str = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: str = Field(..., description="Last name of the user", title="Last Name")
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )


class TenantUserUpdateFieldsMixin(BaseModel):
    role: Optional[UserRole] = Field(None, description="Role of the user in the tenant")
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )


class TenantVerifyCurBucketAPIRequest(BaseModel):
    cur_bucket_config: CurBucketConfig = Field(..., description="cur bucket config")
    cloud_id: str = Field(..., description="cloud id", title="Cloud Id")


class TenantVerifyCurBucketRequest(BaseModel):
    cur_bucket_config: CurBucketConfig = Field(..., description="cur bucket config")
    cloud_id: str = Field(..., description="cloud id", title="Cloud Id")
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")


class TenantVerifyCurBucketResponse(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigOutput] = Field(
        ..., description="provider config"
    )
    id: UUID4 = Field(..., description="Unique ID for the Tenant Provider", title="Id")
    is_parent_account: bool = Field(
        ..., description="billing account", title="Is Parent Account"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    is_billing_account: bool = Field(
        ..., description="is billing account", title="Is Billing Account"
    )
    is_verified: bool = Field(..., description="is verified", title="Is Verified")
    state: TenantProviderState = Field(..., description="state")
    external_id: str = Field(..., description="external id", title="External Id")
    use_external_id: bool = Field(
        ..., description="use external id", title="Use External Id"
    )


class TicketActivity(BaseModel):
    id: UUID4 = Field(..., description="Unique identifier for the activity", title="Id")
    ticket_id: UUID4 = Field(
        ..., description="ID of the ticket this activity belongs to", title="Ticket Id"
    )
    activity_type: TicketActivityLogType = Field(..., description="Type of activity")
    activity_data: Dict[str, Any] = Field(
        ..., description="Activity-specific data", title="Activity Data"
    )
    created_at: datetime = Field(
        ..., description="Timestamp when the activity was created", title="Created At"
    )
    created_by: UUID4 = Field(
        ..., description="User ID who created the activity", title="Created By"
    )
    updated_at: datetime = Field(
        ...,
        description="Timestamp when the activity was last updated",
        title="Updated At",
    )
    updated_by: UUID4 = Field(
        ..., description="User ID who last updated the activity", title="Updated By"
    )


class TicketAdditionalMetadataInput(BaseModel):
    related_insights: Optional[InsightItemInput] = Field(
        None, description="Related insights for this ticket"
    )


class TicketAdditionalMetadataOutput(BaseModel):
    related_insights: Optional[InsightItemOutput] = Field(
        None, description="Related insights for this ticket"
    )


class TicketFileDetails(BaseModel):
    supporting_documents: Optional[UploadedFileDetails] = Field(
        None, description="Request payload for document uploaded/removed"
    )
    resource_file: Optional[UploadedFileDetails] = Field(
        None, description="Request payload for resource file uploaded/removed"
    )


class TicketsSelectedField(BaseModel):
    field: str = Field(..., description="Name of the field", title="Field")
    category: TicketsSelectedFieldsCategory = Field(
        ..., description="Category of the field"
    )


class TimeRangeConfig(BaseModel):
    unit: TimeUnit = Field(
        ..., description="Time unit (days, months, hours, minutes, seconds)"
    )
    value: int = Field(..., description="Number of time units", title="Value")


class TransporterConfig(BaseModel):
    transporter_type: TransporterType
    values: S3PresignedTransporterConfigValues = Field(
        ..., description="Configuration values for the transporter"
    )


class UpdateFeatureStatusResponse(BaseModel):
    feature: TenantFeature


class UpdateHierarchyNodeAPIRequest(BaseModel):
    name: Optional[constr(max_length=30)] = Field(None, title="Name")
    parent_id: Optional[UUID4] = Field(
        None, description="Parent ID of the node", title="Parent Id"
    )
    category: Optional[Category] = None
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node, needs to be provided if resource_filters not provided. For example `{1} AND {2}` where 1 and 2 are keys in resource_filters",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )


class UpdateHierarchyNodeRequest(BaseModel):
    name: Optional[constr(max_length=30)] = Field(None, title="Name")
    parent_id: Optional[UUID4] = Field(
        None, description="Parent ID of the node", title="Parent Id"
    )
    category: Optional[Category] = None
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node, needs to be provided if resource_filters not provided. For example `{1} AND {2}` where 1 and 2 are keys in resource_filters",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )
    node_id: UUID4 = Field(..., description="The id of the node.", title="Node Id")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    updated_by: UUID4 = Field(
        ..., description="The id of the user updating the node.", title="Updated By"
    )


class UpdateHierarchyNodeResponse(BaseModel):
    created_by: Optional[UUID4] = Field(
        None, description="Created by user id", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        None, description="Updated by user id", title="Updated By"
    )
    created_at: Optional[datetime] = Field(
        None, description="Created at timestamp", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Updated at timestamp", title="Updated At"
    )
    name: constr(max_length=30) = Field(..., title="Name")
    parent_id: Optional[UUID4] = Field(
        ..., description="Parent ID of the node", title="Parent Id"
    )
    category: Category = Field(..., title="HierarchyNodeCategory")
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )


class UpdateMetricsControlRequest(BaseModel):
    resource_ids: List[UUID] = Field(
        ..., description="The unique identifiers of the resources", title="Resource Ids"
    )
    metric_name: MetricName = Field(..., description="The name of the metric")
    status: MetricsControlStatus = Field(
        ..., description="The status of the metric control"
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the user", title="User Id"
    )
    user_role: Optional[UserRole] = Field(None, description="The role of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None, description="The unique identifiers of the nodes", title="Node Ids"
    )


class UpdateTenantUserBySystemRequest(BaseModel):
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    first_name: str = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: str = Field(..., description="Last name of the user", title="Last Name")
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantUserBySystemResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )


class UpdateTenantUserDetailsRequest(BaseModel):
    first_name: str = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: str = Field(..., description="Last name of the user", title="Last Name")
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantUserDetailsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class UpdateTenantUserRequest(BaseModel):
    role: Optional[UserRole] = Field(None, description="Role of the user in the tenant")
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class UpdateUserAPIRequest(BaseModel):
    state: Optional[UserCatalogState] = Field(None, description="State of the user.")
    details: Optional[UserCatalogDetails] = Field(
        None, description="Details of the user in catalof DB."
    )


class UpdateUserResponse(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )
    id: UUID4 = Field(..., description="Unique identifier for the user", title="Id")


class UpsertResourceCatalogCostDataAPIRequest(BaseModel):
    resource_catalog_cost_data: List[ResourceCatalogCostDataMixin] = Field(
        ..., description="The resource cost data.", title="Resource Catalog Cost Data"
    )


class UpsertResourceCatalogCostDataRequest(BaseModel):
    resource_catalog_cost_data: List[ResourceCatalogCostDataMixin] = Field(
        ..., description="The resource cost data.", title="Resource Catalog Cost Data"
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class ValidateHierarchyNodeFieldsAPIRequest(BaseModel):
    name: str = Field(..., description="The name of the node.", title="Name")
    category: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2 = Field(
        ..., description="The category of the node."
    )
    parent_id: UUID4 = Field(
        ..., description="The id of the parent node.", title="Parent Id"
    )
    node_id: Optional[UUID4] = Field(
        None, description="The id of the node to be validated.", title="Node Id"
    )


class ValidateHierarchyNodeFieldsRequest(BaseModel):
    name: str = Field(..., description="The name of the node.", title="Name")
    category: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2 = Field(
        ..., description="The category of the node."
    )
    parent_id: UUID4 = Field(
        ..., description="The id of the parent node.", title="Parent Id"
    )
    node_id: Optional[UUID4] = Field(
        None, description="The id of the node to be validated.", title="Node Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class WorkloadData(BaseModel):
    name: str = Field(..., description="Name of the workload", title="Name")
    namespace: str = Field(
        ..., description="Namespace of the workload", title="Namespace"
    )
    type: str = Field(..., description="Type of the workload", title="Type")
    metrics: WorkloadMetrics = Field(..., description="Metrics for the workload")
    labels: Optional[Dict[str, str]] = Field(
        None, description="Kubernetes labels", title="Labels"
    )


class WorkloadGroup(BaseModel):
    group_key: str = Field(..., description="Key of the group", title="Group Key")
    group_type: WorkloadGroupBy = Field(..., description="Type of grouping used")
    workloads: List[WorkloadData] = Field(
        ..., description="List of workloads in this group", title="Workloads"
    )
    metrics: WorkloadMetrics = Field(..., description="Metrics for this group")


class OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria(BaseModel):
    field: Union[List[str], str] = Field(..., title="Field")
    operator: OnelensDomainUtilitiesRepositoriesDynamicFiltersOperator
    value: Optional[Union[List[str], str, List[List]]] = Field(..., title="Value")


class OnelensModelsServiceInterfacesPoliciesCommonsGranularity(BaseModel):
    unit: OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit
    value: int = Field(..., title="Value")


class OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria(BaseModel):
    field: str = Field(..., title="Field")
    operator: OnelensModelsServiceInterfacesTenantDataCurServiceOperator
    values: Union[List[str], str] = Field(..., title="Values")


class OnelensModelsServiceInterfacesTenantDataCurServiceGranularity(BaseModel):
    unit: OnelensModelsServiceInterfacesTenantDataCurServiceGranularityUnit
    value: int = Field(..., title="Value")


class OnelensModelsServiceInterfacesTenantDataCurServiceTimeDimensionInput(BaseModel):
    range: List[str] = Field(..., title="Range")
    granularity: OnelensModelsServiceInterfacesTenantDataCurServiceGranularity


class OnelensModelsServiceInterfacesTenantDataCurServiceTimeDimensionOutput(BaseModel):
    range: List[str] = Field(..., title="Range")
    granularity: OnelensModelsServiceInterfacesTenantDataCurServiceGranularity


class OnelensModelsServiceInterfacesTenantDataMetricsServiceFilterCriteria(BaseModel):
    field: str = Field(..., title="Field")
    operator: OnelensModelsServiceInterfacesTenantDataMetricsServiceOperator
    values: Optional[Union[List[str], str]] = Field(..., title="Values")


class OnelensModelsServiceInterfacesTenantDataMetricsServiceGranularity(BaseModel):
    unit: OnelensModelsServiceInterfacesTenantDataMetricsServiceGranularityUnit
    value: int = Field(..., title="Value")


class OnelensModelsServiceInterfacesTenantDataMetricsServiceTimeDimensionInput(
    BaseModel
):
    range: List[str] = Field(..., title="Range")
    granularity: OnelensModelsServiceInterfacesTenantDataMetricsServiceGranularity


class OnelensModelsServiceInterfacesTenantDataMetricsServiceTimeDimensionOutput(
    BaseModel
):
    range: List[str] = Field(..., title="Range")
    granularity: OnelensModelsServiceInterfacesTenantDataMetricsServiceGranularity


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetHierarchyFlatAPIRequest(
    BaseModel
):
    filters: Optional[
        OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetHierarchyFlatFilters
    ] = Field(
        default_factory=lambda: OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetHierarchyFlatFilters.model_validate(
            {"is_leaf": True, "node_category": []}
        ),
        description="Filters for flat hierarchy nodes.",
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetMappedResourcesAPIRequest(
    BaseModel
):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    node_id: UUID4 = Field(..., description="The id of the node.", title="Node Id")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetMappedResourcesMetricsAPIRequest(
    BaseModel
):
    node_id: UUID4 = Field(..., description="The id of the node.", title="Node Id")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetHierarchyFlatAPIRequest(
    BaseModel
):
    filters: Optional[
        OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetHierarchyFlatFilters
    ] = Field(
        default_factory=lambda: OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetHierarchyFlatFilters.model_validate(
            {"is_leaf": True}
        ),
        description="Filters for flat hierarchy nodes.",
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetMappedResourcesAPIRequest(
    BaseModel
):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    node_id: UUID4 = Field(..., description="The id of the node.", title="Node Id")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetMappedResourcesMetricsAPIRequest(
    BaseModel
):
    node_id: UUID4 = Field(..., description="The id of the node.", title="Node Id")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetMappedResourcesResponse(
    BaseModel
):
    count: CountEntity
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    resources: List[MappedResourcesResponseEntity] = Field(
        ..., description="List of mapped resources.", title="Resources"
    )


class OnelensUtilsApiUtilsApiResponseResponseGetMappedResourcesResponse1(BaseModel):
    data: OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetMappedResourcesResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class APIFetchAccountsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantAccountFilters] = Field(
        {}, description="Filters to apply to the accounts"
    )


class APIGetMemoryMetricsEnabledAccountDetailsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantAccountFilters] = Field(
        {}, description="Filters to apply to the accounts"
    )


class APIUpdateFeatureStatusUpdateResponse(BaseModel):
    feature: TenantFeature


class AchievedSavingsMixinInput(BaseModel):
    calculated_cost_difference: Optional[float] = Field(
        None,
        description="Calculated cost difference of the resource because of the anomaly",
        title="Calculated Cost Difference",
    )
    daily_achieved_savings: Optional[float] = Field(
        None,
        description="Daily achieved savings of the resource because of the anomaly",
        title="Daily Achieved Savings",
    )
    projected_monthly_achieved_savings: Optional[float] = Field(
        None,
        description="Projected monthly achieved savings of the resource because of the anomaly",
        title="Projected Monthly Achieved Savings",
    )
    cur_mapping_available: Optional[bool] = Field(
        None,
        description="Flag indicating if the CUR mapping is available",
        title="Cur Mapping Available",
    )
    from_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp from which the achieved savings are calculated",
        title="From Timestamp",
    )
    to_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp to which the achieved savings are calculated",
        title="To Timestamp",
    )
    pre_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window before the ticket was closed"
    )
    post_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window after the ticket was closed"
    )
    projected_monthly_cost_before_change: Optional[float] = Field(
        None,
        description="The projected monthly cost before the change",
        title="Projected Monthly Cost Before Change",
    )
    projected_monthly_cost_after_change: Optional[float] = Field(
        None,
        description="The projected monthly cost after the change",
        title="Projected Monthly Cost After Change",
    )


class AchievedSavingsMixinOutput(BaseModel):
    calculated_cost_difference: Optional[float] = Field(
        None,
        description="Calculated cost difference of the resource because of the anomaly",
        title="Calculated Cost Difference",
    )
    daily_achieved_savings: Optional[float] = Field(
        None,
        description="Daily achieved savings of the resource because of the anomaly",
        title="Daily Achieved Savings",
    )
    projected_monthly_achieved_savings: Optional[float] = Field(
        None,
        description="Projected monthly achieved savings of the resource because of the anomaly",
        title="Projected Monthly Achieved Savings",
    )
    cur_mapping_available: Optional[bool] = Field(
        None,
        description="Flag indicating if the CUR mapping is available",
        title="Cur Mapping Available",
    )
    from_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp from which the achieved savings are calculated",
        title="From Timestamp",
    )
    to_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp to which the achieved savings are calculated",
        title="To Timestamp",
    )
    pre_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window before the ticket was closed"
    )
    post_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window after the ticket was closed"
    )
    projected_monthly_cost_before_change: Optional[float] = Field(
        None,
        description="The projected monthly cost before the change",
        title="Projected Monthly Cost Before Change",
    )
    projected_monthly_cost_after_change: Optional[float] = Field(
        None,
        description="The projected monthly cost after the change",
        title="Projected Monthly Cost After Change",
    )


class AgentRunConfigInput(BaseModel):
    processor_config_list: List[
        Union[ApiProcessorConfig, KubernetesProcessorConfig, PrometheusProcessorConfig]
    ] = Field(..., title="Processor Config List")
    transporter_config: TransporterConfig


class AgentRunConfigOutput(BaseModel):
    processor_config_list: List[
        Union[ApiProcessorConfig, KubernetesProcessorConfig, PrometheusProcessorConfig]
    ] = Field(..., title="Processor Config List")
    transporter_config: TransporterConfig


class AnomalyLogicConfigInput(BaseModel):
    primary_detection: Optional[AnomalyPrimaryDetectionConfig] = Field(
        None, description="Primary detection configuration for anomalies"
    )
    logic_operation: Optional[AnomalyLogicOperation] = Field(
        None, description="Logic operations for anomaly detection thresholds"
    )


class AnomalyLogicConfigOutput(BaseModel):
    primary_detection: Optional[AnomalyPrimaryDetectionConfig] = Field(
        None, description="Primary detection configuration for anomalies"
    )
    logic_operation: Optional[AnomalyLogicOperation] = Field(
        None, description="Logic operations for anomaly detection thresholds"
    )


class BulkCreateCustomFieldRequest(BaseModel):
    items: List[CreateCustomFieldRequest] = Field(..., title="Items")


class BulkCustomFieldResponse(BaseModel):
    items: List[CustomFieldResponse] = Field(..., title="Items")
    errors: Optional[List[Dict[str, Any]]] = Field([], title="Errors")


class CURDataMetricsQueryInput(BaseModel):
    name: str = Field(..., title="Name")
    dimension: Optional[str] = Field(None, title="Dimension")
    measures: List[CURDataAggregationType] = Field(..., title="Measures")
    filters: List[OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria] = (
        Field(..., title="Filters")
    )
    time_filter: Optional[
        OnelensModelsServiceInterfacesTenantDataCurServiceTimeDimensionInput
    ] = Field(None, description="Time filter for the query. Defaults to last 7 days.")
    timezone: Optional[str] = Field("Asia/Kolkata", title="Timezone")


class CURDataMetricsQueryOutput(BaseModel):
    name: str = Field(..., title="Name")
    dimension: Optional[str] = Field(None, title="Dimension")
    measures: List[CURDataAggregationType] = Field(..., title="Measures")
    filters: List[OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria] = (
        Field(..., title="Filters")
    )
    time_filter: Optional[
        OnelensModelsServiceInterfacesTenantDataCurServiceTimeDimensionOutput
    ] = Field(None, description="Time filter for the query. Defaults to last 7 days.")
    timezone: Optional[str] = Field("Asia/Kolkata", title="Timezone")


class ChartPayload(BaseModel):
    name: Optional[str] = Field("aws_cur", title="Name")
    dimension: str = Field(..., title="Dimension")
    measures: Optional[List[str]] = Field(["sum_unblended_cost"], title="Measures")
    filters: List[OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria] = (
        Field(..., title="Filters")
    )
    time_filter: TimeFilterOutput
    timezone: Optional[str] = Field("Asia/Kolkata", title="Timezone")


class ClusterConfig(BaseModel):
    config_list: Optional[List[TaskConfig]] = Field(
        None, description="List of task configurations", title="Config List"
    )


class CreateAuth0AndOnelensUserResponse(BaseModel):
    onelens_data: CreateUserResponse = Field(
        ..., description="The data of the user in onelens."
    )


class CreateHierarchyNodeAPIRequest(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")
    parent_id: Optional[UUID4] = Field(
        ..., description="Parent ID of the node", title="Parent Id"
    )
    category: Category = Field(..., title="HierarchyNodeCategory")
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )


class CreateHierarchyNodeRequest(BaseModel):
    created_by: Optional[UUID4] = Field(
        None, description="Created by user id", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        None, description="Updated by user id", title="Updated By"
    )
    name: constr(max_length=30) = Field(..., title="Name")
    parent_id: Optional[UUID4] = Field(
        ..., description="Parent ID of the node", title="Parent Id"
    )
    category: Category = Field(..., title="HierarchyNodeCategory")
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class CreateHierarchyNodeResponse(BaseModel):
    created_by: Optional[UUID4] = Field(
        None, description="Created by user id", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        None, description="Updated by user id", title="Updated By"
    )
    created_at: Optional[datetime] = Field(
        None, description="Created at timestamp", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Updated at timestamp", title="Updated At"
    )
    name: constr(max_length=30) = Field(..., title="Name")
    parent_id: Optional[UUID4] = Field(
        ..., description="Parent ID of the node", title="Parent Id"
    )
    category: Category = Field(..., title="HierarchyNodeCategory")
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )


class CreateTenantProviderRequest(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigInput] = Field(
        None, description="Provider config"
    )
    tenant_id: Optional[UUID4] = Field(None, description="Tenant ID", title="Tenant Id")
    use_external_id: Optional[bool] = Field(
        False, description="use external id", title="Use External Id"
    )


class CreateTenantProviderResponse(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigOutput] = Field(
        ..., description="provider config"
    )
    id: UUID4 = Field(..., description="Unique ID for the Tenant Provider", title="Id")
    is_parent_account: bool = Field(
        ..., description="billing account", title="Is Parent Account"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    is_billing_account: bool = Field(
        ..., description="is billing account", title="Is Billing Account"
    )
    is_verified: bool = Field(..., description="is verified", title="Is Verified")
    state: TenantProviderState = Field(..., description="state")
    external_id: str = Field(..., description="external id", title="External Id")
    use_external_id: bool = Field(
        ..., description="use external id", title="Use External Id"
    )


class CreateTicketActivityResponse(BaseModel):
    activities: List[TicketActivity] = Field(
        ..., description="List of created activities", title="Activities"
    )


class DataRequest(BaseModel):
    measures: List[str] = Field(..., description="Metrics to measure", title="Measures")
    dimensions: Optional[List[str]] = Field(
        None, description="Dimensions to group by", title="Dimensions"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    time_dimensions: Optional[
        List[OnelensModelsServiceInterfacesKubernetesServiceDtoTimeDimension]
    ] = Field(None, description="Time-based dimensions", title="Time Dimensions")
    order: Optional[List[SortCriteria]] = Field(
        None, description="Sorting criteria", title="Order"
    )
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the data request."
    )
    is_cluster_charts_request: Optional[bool] = Field(
        False,
        description="Whether the request is for cluster charts",
        title="Is Cluster Charts Request",
    )


class DimensionMetadataFetchAPIRequest(BaseModel):
    fields: List[str] = Field(
        ..., description="Names of dimensions (or dot JSON paths)", title="Fields"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply for context", title="Filters")
    source: Optional[str] = Field(
        None, description="Source of the data", title="Source"
    )


class DimensionMetadataFetchRequest(BaseModel):
    fields: List[str] = Field(
        ..., description="Names of dimensions (or dot JSON paths)", title="Fields"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply for context", title="Filters")
    source: Optional[str] = Field(
        None, description="Source of the data", title="Source"
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class DisableFeatureByNameResponse(BaseModel):
    features: Optional[List[TenantFeature]] = Field(
        [], description="List of features", title="Features"
    )


class DisableTenantAnomalySettingsResponse(BaseModel):
    config_overrides: Optional[AnomalyLogicConfigOutput] = Field(
        None, description="The config overrides for the tenant anomaly."
    )
    state: TenantAnomalyState = Field(
        ..., description="The state of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )


class EnableFeatureByNameResponse(BaseModel):
    features: Optional[List[TenantFeature]] = Field(
        [], description="List of features", title="Features"
    )


class EnableTenantAnomalySettingsResponse(BaseModel):
    config_overrides: Optional[AnomalyLogicConfigOutput] = Field(
        None, description="The config overrides for the tenant anomaly."
    )
    state: TenantAnomalyState = Field(
        ..., description="The state of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )


class Feature(BaseModel):
    id: UUID4 = Field(..., title="Id")
    name: str = Field(..., title="Name")
    description: str = Field(..., title="Description")
    scope: TenantFeatureScope
    feature_store: Optional[FeatureStore] = None


class FeaturesPolicyResponse(BaseModel):
    metrics: Optional[List[MetricFeature]] = Field(
        None, description="List of metrics", title="Metrics"
    )


class FetchAccountsRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the user", title="User Id"
    )
    user_role: Optional[UserRole] = Field(None, description="The role of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None, description="The unique identifiers of the nodes", title="Node Ids"
    )
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantAccountFilters] = Field(
        {}, description="Filters to apply to the accounts"
    )


class GetAchievedSavingsAPIRequest(BaseModel):
    resource_id: UUID = Field(..., title="Resource Id")
    datetime_of_change: datetime = Field(..., title="Datetime Of Change")
    pre_change_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window before the ticket was closed"
    )
    post_change_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window after the ticket was closed"
    )
    is_resource_replaced: Optional[bool] = Field(
        False,
        description="Flag to indicate if the resource is replaced",
        title="Is Resource Replaced",
    )
    alternate_resource_id: Optional[UUID] = Field(
        None, description="Alternate resource id", title="Alternate Resource Id"
    )


class GetAchievedSavingsRequest(BaseModel):
    resource_id: UUID = Field(..., title="Resource Id")
    datetime_of_change: datetime = Field(..., title="Datetime Of Change")
    pre_change_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window before the ticket was closed"
    )
    post_change_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window after the ticket was closed"
    )
    is_resource_replaced: Optional[bool] = Field(
        False,
        description="Flag to indicate if the resource is replaced",
        title="Is Resource Replaced",
    )
    alternate_resource_id: Optional[UUID] = Field(
        None, description="Alternate resource id", title="Alternate Resource Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetAchievedSavingsResponse(BaseModel):
    calculated_cost_difference: Optional[float] = Field(
        None,
        description="Calculated cost difference of the resource because of the anomaly",
        title="Calculated Cost Difference",
    )
    daily_achieved_savings: Optional[float] = Field(
        None,
        description="Daily achieved savings of the resource because of the anomaly",
        title="Daily Achieved Savings",
    )
    projected_monthly_achieved_savings: Optional[float] = Field(
        None,
        description="Projected monthly achieved savings of the resource because of the anomaly",
        title="Projected Monthly Achieved Savings",
    )
    cur_mapping_available: Optional[bool] = Field(
        None,
        description="Flag indicating if the CUR mapping is available",
        title="Cur Mapping Available",
    )
    from_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp from which the achieved savings are calculated",
        title="From Timestamp",
    )
    to_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp to which the achieved savings are calculated",
        title="To Timestamp",
    )
    pre_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window before the ticket was closed"
    )
    post_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window after the ticket was closed"
    )
    projected_monthly_cost_before_change: Optional[float] = Field(
        None,
        description="The projected monthly cost before the change",
        title="Projected Monthly Cost Before Change",
    )
    projected_monthly_cost_after_change: Optional[float] = Field(
        None,
        description="The projected monthly cost after the change",
        title="Projected Monthly Cost After Change",
    )


class GetAgentRunConfigResponse(BaseModel):
    should_export: bool = Field(
        ..., description="Whether export should be performed", title="Should Export"
    )
    run_id: Optional[UUID] = Field(
        None, description="Unique ID for the run", title="Run Id"
    )
    config_hash: Optional[str] = Field(
        None, description="Hash of the configuration", title="Config Hash"
    )
    time_range: Optional[TimeRangeOutput] = None
    granularity_seconds: Optional[int] = Field(
        None, description="Time granularity in seconds", title="Granularity Seconds"
    )
    run_config: Optional[AgentRunConfigOutput] = Field(
        None, description="Configuration for the run"
    )


class GetAllFeaturesResponse(BaseModel):
    features: List[Feature] = Field(..., title="Features")


class GetAllParentNodesResponse(BaseModel):
    parent_nodes: Dict[str, List[HierarchyNodeEntityDTOOutput]] = Field(
        ..., description="List of parent nodes.", title="Parent Nodes"
    )


class GetAllPolicyViolationsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetAllPolicyViolationsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetAllResourceCatalogsAPIRequestV2(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    fetch_recommendation_count: Optional[bool] = Field(
        False,
        description="Whether to fetch the recommendation count",
        title="Fetch Recommendation Count",
    )


class GetAllResourceCatalogsAPIResponseV2(BaseModel):
    resources: List[ResourceCatalogWithCostV2] = Field(
        ..., description="List of resource catalog.", title="Resources"
    )


class GetAllResourceCatalogsApiRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    navira_log_id: Optional[UUID] = Field(
        None, description="Id of the navira log table row", title="Navira Log Id"
    )
    prompt: Optional[str] = Field(
        None,
        description="Prompt text to search resources in resource explorer",
        title="Prompt",
    )


class GetAllResourceCatalogsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")
    user_id: Optional[UUID] = Field(
        None, description="The id of the user.", title="User Id"
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    navira_log_id: Optional[UUID] = Field(
        None, description="Id of the navira log table row", title="Navira Log Id"
    )
    request: Optional[str] = Field(
        None,
        description="Prompt text to search resources in resource explorer",
        title="Request",
    )


class GetAllResourceCatalogsRequestV2(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    fetch_recommendation_count: Optional[bool] = Field(
        False,
        description="Whether to fetch the recommendation count",
        title="Fetch Recommendation Count",
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")
    user_id: Optional[UUID] = Field(
        None, description="The id of the user.", title="User Id"
    )


class GetAllResourceCatalogsResponseV2(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    resources: List[ResourceCatalogWithCostV2] = Field(
        ..., description="List of resource catalog.", title="Resources"
    )
    total_cost: Optional[float] = Field(
        None, description="The total cost.", title="Total Cost"
    )


class GetAllTablesResponse(BaseModel):
    tables: List[TableInfo] = Field(..., description="List of tables", title="Tables")


class GetAllTenantEmbedAppsLinksApiRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )


class GetAllTenantEmbedAppsLinksRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetAllThreadsApiRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[GetAllThreadsFilters] = Field(
        {}, description="Filters for the threads"
    )
    dynamic_filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None, description="Dynamic filters for the threads", title="Dynamic Filters"
    )
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sorting criteria for the threads"
    )


class GetAllThreadsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[GetAllThreadsFilters] = Field(
        {}, description="Filters for the threads"
    )
    dynamic_filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None, description="Dynamic filters for the threads", title="Dynamic Filters"
    )
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sorting criteria for the threads"
    )


class GetAllUsersResponse(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )
    users: List[GetUserByIDResponse] = Field(
        ..., description="List of users", title="Users"
    )


class GetCURCostDataAPIRequest(BaseModel):
    filters: List[OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria] = (
        Field(..., title="Filters")
    )
    datetime_of_change: datetime = Field(..., title="Datetime Of Change")
    pre_change_time_window: TimeRangeConfig
    post_change_time_window: TimeRangeConfig
    alternate_resource_id: Optional[str] = Field(
        None, description="Alternate resource id", title="Alternate Resource Id"
    )
    is_resource_replaced: Optional[bool] = Field(
        False,
        description="Flag to indicate if the resource is replaced",
        title="Is Resource Replaced",
    )


class GetCURCostDataRequest(BaseModel):
    filters: List[OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria] = (
        Field(..., title="Filters")
    )
    datetime_of_change: datetime = Field(..., title="Datetime Of Change")
    pre_change_time_window: TimeRangeConfig
    post_change_time_window: TimeRangeConfig
    alternate_resource_id: Optional[str] = Field(
        None, description="Alternate resource id", title="Alternate Resource Id"
    )
    is_resource_replaced: Optional[bool] = Field(
        False,
        description="Flag to indicate if the resource is replaced",
        title="Is Resource Replaced",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetCURCostDataResponse(BaseModel):
    calculated_cost_difference: Optional[float] = Field(
        None,
        description="Calculated cost difference of the resource because of the anomaly",
        title="Calculated Cost Difference",
    )
    daily_achieved_savings: Optional[float] = Field(
        None,
        description="Daily achieved savings of the resource because of the anomaly",
        title="Daily Achieved Savings",
    )
    projected_monthly_achieved_savings: Optional[float] = Field(
        None,
        description="Projected monthly achieved savings of the resource because of the anomaly",
        title="Projected Monthly Achieved Savings",
    )
    cur_mapping_available: Optional[bool] = Field(
        None,
        description="Flag indicating if the CUR mapping is available",
        title="Cur Mapping Available",
    )
    from_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp from which the achieved savings are calculated",
        title="From Timestamp",
    )
    to_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp to which the achieved savings are calculated",
        title="To Timestamp",
    )
    pre_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window before the ticket was closed"
    )
    post_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window after the ticket was closed"
    )
    projected_monthly_cost_before_change: Optional[float] = Field(
        None,
        description="The projected monthly cost before the change",
        title="Projected Monthly Cost Before Change",
    )
    projected_monthly_cost_after_change: Optional[float] = Field(
        None,
        description="The projected monthly cost after the change",
        title="Projected Monthly Cost After Change",
    )


class GetCURDataMetricsAPIRequest(BaseModel):
    query: CURDataMetricsQueryInput
    can_use_cur_aggregate: Optional[bool] = Field(
        False,
        description="Flag to indicate if the CUR aggregate table can be used.",
        title="Can Use Cur Aggregate",
    )


class GetCURDataMetricsConfigResponse(BaseModel):
    query: CURDataMetricsQueryOutput
    dimensions: List[str] = Field(..., title="Dimensions")


class GetCURDataMetricsRequest(BaseModel):
    query: CURDataMetricsQueryInput
    can_use_cur_aggregate: Optional[bool] = Field(
        False,
        description="Flag to indicate if the CUR aggregate table can be used.",
        title="Can Use Cur Aggregate",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetCURSavedViewsAPIRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters for the saved views", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sort criteria for the saved views"
    )


class GetCURSavedViewsRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters for the saved views", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sort criteria for the saved views"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetClusterDataRequest(BaseModel):
    measures: List[str] = Field(..., description="Metrics to measure", title="Measures")
    dimensions: Optional[List[str]] = Field(
        None, description="Dimensions to group by", title="Dimensions"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    time_dimensions: Optional[
        List[OnelensModelsServiceInterfacesKubernetesServiceDtoTimeDimension]
    ] = Field(None, description="Time-based dimensions", title="Time Dimensions")
    order: Optional[List[SortCriteria]] = Field(
        None, description="Sorting criteria", title="Order"
    )
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the data request."
    )
    is_cluster_charts_request: Optional[bool] = Field(
        False,
        description="Whether the request is for cluster charts",
        title="Is Cluster Charts Request",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")
    show_og_cur_cost: Optional[bool] = Field(
        False,
        description="Whether to use OG CUR aggregate data processor for cost analysis",
        title="Show Og Cur Cost",
    )


class GetClusterDataTransformedAPIRequest(BaseModel):
    measures: List[str] = Field(..., description="Metrics to measure", title="Measures")
    dimensions: Optional[List[str]] = Field(
        None, description="Dimensions to group by", title="Dimensions"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    time_dimensions: Optional[
        List[OnelensModelsServiceInterfacesKubernetesServiceDtoTimeDimension]
    ] = Field(None, description="Time-based dimensions", title="Time Dimensions")
    order: Optional[List[SortCriteria]] = Field(
        None, description="Sorting criteria", title="Order"
    )
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the data request."
    )
    is_cluster_charts_request: Optional[bool] = Field(
        False,
        description="Whether the request is for cluster charts",
        title="Is Cluster Charts Request",
    )
    show_og_cur_cost: Optional[bool] = Field(
        False,
        description="Whether to use OG CUR aggregate data processor for cost analysis",
        title="Show Og Cur Cost",
    )


class GetClusterDataTransformedRequest(BaseModel):
    measures: List[str] = Field(..., description="Metrics to measure", title="Measures")
    dimensions: Optional[List[str]] = Field(
        None, description="Dimensions to group by", title="Dimensions"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    time_dimensions: Optional[
        List[OnelensModelsServiceInterfacesKubernetesServiceDtoTimeDimension]
    ] = Field(None, description="Time-based dimensions", title="Time Dimensions")
    order: Optional[List[SortCriteria]] = Field(
        None, description="Sorting criteria", title="Order"
    )
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the data request."
    )
    is_cluster_charts_request: Optional[bool] = Field(
        False,
        description="Whether the request is for cluster charts",
        title="Is Cluster Charts Request",
    )
    show_og_cur_cost: Optional[bool] = Field(
        False,
        description="Whether to use OG CUR aggregate data processor for cost analysis",
        title="Show Og Cur Cost",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetClusterDataVisualizationsAPIRequest(BaseModel):
    measures: List[str] = Field(..., description="Metrics to measure", title="Measures")
    dimensions: Optional[List[str]] = Field(
        None, description="Dimensions to group by", title="Dimensions"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    time_dimensions: Optional[
        List[OnelensModelsServiceInterfacesKubernetesServiceDtoTimeDimension]
    ] = Field(None, description="Time-based dimensions", title="Time Dimensions")
    order: Optional[List[SortCriteria]] = Field(
        None, description="Sorting criteria", title="Order"
    )
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the data request."
    )
    is_cluster_charts_request: Optional[bool] = Field(
        False,
        description="Whether the request is for cluster charts",
        title="Is Cluster Charts Request",
    )
    top_n: Optional[int] = Field(
        5, description="Number of top series to return", title="Top N"
    )


class GetClusterDataVisualizationsRequest(BaseModel):
    measures: List[str] = Field(..., description="Metrics to measure", title="Measures")
    dimensions: Optional[List[str]] = Field(
        None, description="Dimensions to group by", title="Dimensions"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    time_dimensions: Optional[
        List[OnelensModelsServiceInterfacesKubernetesServiceDtoTimeDimension]
    ] = Field(None, description="Time-based dimensions", title="Time Dimensions")
    order: Optional[List[SortCriteria]] = Field(
        None, description="Sorting criteria", title="Order"
    )
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the data request."
    )
    is_cluster_charts_request: Optional[bool] = Field(
        False,
        description="Whether the request is for cluster charts",
        title="Is Cluster Charts Request",
    )
    top_n: Optional[int] = Field(
        5, description="Number of top series to return", title="Top N"
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetClusterEntitiesStatsAPIRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")


class GetClusterEntitiesStatsRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetClusterInfraStatsAPIRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply for date filtering", title="Filters")
    use_cur_aggregate: Optional[bool] = Field(
        False,
        description="Whether to use CUR aggregate data processor instead of container cost data processor",
        title="Use Cur Aggregate",
    )


class GetClusterInfraStatsRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply for date filtering", title="Filters")
    use_cur_aggregate: Optional[bool] = Field(
        False,
        description="Whether to use CUR aggregate data processor instead of container cost data processor",
        title="Use Cur Aggregate",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetClusterStatsAPIRequest(BaseModel):
    cluster_id: Optional[UUID] = Field(
        None, description="ID of the cluster to filter by", title="Cluster Id"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None,
        description="Filters to apply for date range or other criteria (supports dynamic filter operations)",
        title="Filters",
    )
    is_dashboard_stats_request: Optional[bool] = Field(
        False,
        description="Whether the request is for the dashboard",
        title="Is Dashboard Stats Request",
    )
    show_connected_clusters: Optional[bool] = Field(
        False,
        description="Whether to show connected clusters",
        title="Show Connected Clusters",
    )


class GetClusterStatsRequest(BaseModel):
    cluster_id: Optional[UUID] = Field(
        None, description="ID of the cluster to filter by", title="Cluster Id"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None,
        description="Filters to apply for date range or other criteria (supports dynamic filter operations)",
        title="Filters",
    )
    is_dashboard_stats_request: Optional[bool] = Field(
        False,
        description="Whether the request is for the dashboard",
        title="Is Dashboard Stats Request",
    )
    show_connected_clusters: Optional[bool] = Field(
        False,
        description="Whether to show connected clusters",
        title="Show Connected Clusters",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetClusterUtilizationAPIRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None,
        description="Filters to apply for date range and other criteria",
        title="Filters",
    )


class GetClusterUtilizationRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None,
        description="Filters to apply for date range and other criteria",
        title="Filters",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetClusterUtilizationTimeseriesAPIRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    resource_type: str = Field(
        ..., description="Resource type to filter by", title="Resource Type"
    )
    granularity: Optional[Granularity] = Field(
        "day",
        description="Time granularity used when bucketing the utilization time series.",
        title="Granularity",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None,
        description="Optional filters to apply for date range and other criteria",
        title="Filters",
    )


class GetClusterUtilizationTimeseriesRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    resource_type: str = Field(
        ..., description="Resource type to filter by", title="Resource Type"
    )
    granularity: Optional[Granularity] = Field(
        "day",
        description="Time granularity used when bucketing the utilization time series.",
        title="Granularity",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None,
        description="Optional filters to apply for date range and other criteria",
        title="Filters",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetClustersAPIRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None, description="Filters to apply to the clusters list", title="Filters"
    )
    show_connected_clusters: Optional[bool] = Field(
        False,
        description="Whether to show connected clusters",
        title="Show Connected Clusters",
    )


class GetClustersRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        None, description="Filters to apply to the clusters list", title="Filters"
    )
    show_connected_clusters: Optional[bool] = Field(
        False,
        description="Whether to show connected clusters",
        title="Show Connected Clusters",
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetContainerDetailsAPIRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    namespace: str = Field(
        ..., description="Namespace of the workload", title="Namespace"
    )
    workload_name: str = Field(
        ..., description="Name of the workload", title="Workload Name"
    )
    container_name: str = Field(
        ..., description="Name of the container", title="Container Name"
    )
    workload_type: Optional[str] = Field(
        None,
        description="Type of the workload (e.g., Deployment, StatefulSet)",
        title="Workload Type",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply for date filtering", title="Filters")


class GetContainerDetailsRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    namespace: str = Field(
        ..., description="Namespace of the workload", title="Namespace"
    )
    workload_name: str = Field(
        ..., description="Name of the workload", title="Workload Name"
    )
    container_name: str = Field(
        ..., description="Name of the container", title="Container Name"
    )
    workload_type: Optional[str] = Field(
        None,
        description="Type of the workload (e.g., Deployment, StatefulSet)",
        title="Workload Type",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply for date filtering", title="Filters")
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetContainerDetailsResponse(BaseModel):
    container_name: str = Field(
        ..., description="Name of the container", title="Container Name"
    )
    resource_utilizations: List[ResourceMetrics] = Field(
        ..., description="List of resource utilizations", title="Resource Utilizations"
    )
    provisioned_tooltip: Optional[str] = Field(
        None,
        description="Tooltip explaining the provisioned metric",
        title="Provisioned Tooltip",
    )


class GetDeltaEventsFilters(BaseModel):
    start_time: Optional[datetime] = Field(
        None, description="Start time filter for delta events", title="Start Time"
    )
    end_time: Optional[datetime] = Field(
        None, description="End time filter for delta events", title="End Time"
    )
    event_types: Optional[List[EventType]] = Field(
        None, description="List of event types to filter", title="Event Types"
    )
    metric_names: Optional[List[DeltaEventsMetricName]] = Field(
        None, description="List of metric names to filter", title="Metric Names"
    )
    severities: Optional[List[Severity]] = Field(
        None, description="List of severities to filter", title="Severities"
    )
    run_id: Optional[UUID] = Field(
        None, description="Run ID to filter events", title="Run Id"
    )
    primary_detection: Optional[AnomalyDetectionDimension] = Field(
        "ACCOUNT_REGION", description="Primary detection dimension to filter events"
    )
    group_by: Optional[List[DimensionGroupBy]] = Field(
        None, description="Group by dimension to filter events", title="Group By"
    )
    dimension_filters: Optional[
        List[OnelensModelsServiceInterfacesTenantDataMetricsServiceFilterCriteria]
    ] = Field(
        None,
        description="List of dimension filters to filter events",
        title="Dimension Filters",
    )
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sort criteria to sort events"
    )


class GetDeltaEventsForWorkflowAPIRequest(BaseModel):
    run_id: UUID = Field(..., description="Run ID to filter events", title="Run Id")
    filters: GetDeltaEventsFilters


class GetDeltaEventsForWorkflowRequest(BaseModel):
    run_id: UUID = Field(..., description="Run ID to filter events", title="Run Id")
    filters: GetDeltaEventsFilters
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetDeltaEventsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: GetDeltaEventsFilters
    current_user_id: Optional[UUID] = Field(
        None, description="Current user ID to filter events", title="Current User Id"
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetDeltaEventsStatsRequest(BaseModel):
    filters: GetDeltaEventsFilters
    tenant_id: UUID = Field(..., description="Tenant ID", title="Tenant Id")
    current_user_id: Optional[UUID] = Field(
        None, description="Current user ID to filter events", title="Current User Id"
    )


class GetFeaturesByFiltersResponse(BaseModel):
    features: List[TenantFeature] = Field(..., title="Features")


class GetHierarchyNodeByIdResponse(BaseModel):
    id: Optional[UUID] = Field(
        None, description="The unique identifier of the hierarchy node.", title="Id"
    )
    name: constr(max_length=30) = Field(..., title="Name")
    category: Category = Field(..., title="HierarchyNodeCategory")
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )
    created_at: Optional[datetime] = Field(
        None, description="Created at timestamp", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Updated at timestamp", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        None, description="Created by user id", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        None, description="Updated by user id", title="Updated By"
    )
    path: List[HierarchyNodePathItem] = Field(
        ..., description="The path of the node from root.", title="Path"
    )
    parent: Optional[HierarchyNodeParentItem] = Field(
        None, description="The parent of the node."
    )
    resources_metrics: Optional[HierarchyNodeResourceMetrics] = Field(
        None, description="The metrics of the resources associated with the node."
    )


class GetLeafNodesResponse(BaseModel):
    nodes: List[HierarchyNodeEntityDTOOutput] = Field(
        ..., description="List of leaf nodes.", title="Nodes"
    )


class GetMappedResourcesMetricsRequest(BaseModel):
    node_id: UUID4 = Field(..., description="The id of the node.", title="Node Id")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetMappedResourcesRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    node_id: UUID4 = Field(..., description="The id of the node.", title="Node Id")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetMemoryMetricsEnabledAccountDetailsRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the user", title="User Id"
    )
    user_role: Optional[UserRole] = Field(None, description="The role of the user")
    node_ids: Optional[List[UUID4]] = Field(
        None, description="The unique identifiers of the nodes", title="Node Ids"
    )
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantAccountFilters] = Field(
        {}, description="Filters to apply to the accounts"
    )


class GetMetricsControlStatusResponse(BaseModel):
    metrics_control_entities: List[MetricsControlResponse] = Field(
        ...,
        description="The statuses of the metrics control",
        title="Metrics Control Entities",
    )


class GetMetricsCountAPIRequest(BaseModel):
    node_id: Optional[UUID4] = Field(
        None, description="The id of the node to be validated.", title="Node Id"
    )
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )


class GetMetricsCountRequest(BaseModel):
    node_id: Optional[UUID4] = Field(
        None, description="The id of the node to be validated.", title="Node Id"
    )
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetOrganizationsResponse(BaseModel):
    organizations: List[Organization] = Field(..., title="Organizations")


class GetPolicyTagsResponse(BaseModel):
    tags: List[PolicyTag] = Field(
        ..., description="The policy tags dictionary", title="Tags"
    )


class GetPolicyTemplatePacksResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_template_packs: List[PolicyTemplatePack] = Field(
        ..., title="Policy Template Packs"
    )


class GetPolicyTemplatesRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[PolicyTemplateFilters] = Field(
        default_factory=lambda: PolicyTemplateFilters.model_validate(
            {
                "parent_ptp_ids": [],
                "states": ["ACTIVE"],
                "categories": [],
                "providers": [],
                "services": [],
                "execution_types": [],
            }
        ),
        description="Filters to apply to the policy templates.",
    )


class GetPolicyTicketStatsAPIRequest(BaseModel):
    metric: TenantTicketsStatsMetrics = Field(..., description="Metric to be fetched")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    group: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        None, description="Group by option"
    )
    sub_group: Optional[TenantTicketsStatsMetricsSubGroupBy] = Field(
        None, description="Sub group by option"
    )
    limit_items: Optional[bool] = Field(
        None,
        description="Limit the number of items to be fetched or not",
        title="Limit Items",
    )
    item_count: Optional[int] = Field(
        5, description="Count of the items to be fetched", title="Item Count"
    )


class GetPolicyTicketStatsAPIRequestV2(BaseModel):
    metric: TenantTicketsStatsMetrics = Field(..., description="Metric to be fetched")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    group: Optional[GroupByOption] = Field(None, description="Group by option")
    sub_group: Optional[SubGroupByOption] = Field(
        None, description="Sub group by option"
    )
    limit_items: Optional[bool] = Field(
        None,
        description="Limit the number of items to be fetched or not",
        title="Limit Items",
    )
    item_count: Optional[int] = Field(
        5, description="Count of the items to be fetched", title="Item Count"
    )


class GetPolicyTicketStatsRequest(BaseModel):
    metric: TenantTicketsStatsMetrics = Field(..., description="Metric to be fetched")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    group: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        None, description="Group by option"
    )
    sub_group: Optional[TenantTicketsStatsMetricsSubGroupBy] = Field(
        None, description="Sub group by option"
    )
    limit_items: Optional[bool] = Field(
        None,
        description="Limit the number of items to be fetched or not",
        title="Limit Items",
    )
    item_count: Optional[int] = Field(
        5, description="Count of the items to be fetched", title="Item Count"
    )
    tenant_id: UUID = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetPolicyTicketStatsRequestV2(BaseModel):
    metric: TenantTicketsStatsMetrics = Field(..., description="Metric to be fetched")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    group: Optional[GroupByOption] = Field(None, description="Group by option")
    sub_group: Optional[SubGroupByOption] = Field(
        None, description="Sub group by option"
    )
    limit_items: Optional[bool] = Field(
        None,
        description="Limit the number of items to be fetched or not",
        title="Limit Items",
    )
    item_count: Optional[int] = Field(
        5, description="Count of the items to be fetched", title="Item Count"
    )
    tenant_id: UUID = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetPolicyTicketsByEntityIdAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetPolicyTicketsByEntityIdRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetPolicyTicketsByEntityIdResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    entity_tickets: List[GetSinglePolicyTicketByEntityIdResponse] = Field(
        ..., description="List of tickets", title="Entity Tickets"
    )


class GetPolicyTicketsByPolicyIdAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    selected_fields: Optional[List[TicketsSelectedField]] = Field(
        None, description="Selected fields to be fetched", title="Selected Fields"
    )


class GetPolicyTicketsByPolicyIdRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    selected_fields: Optional[List[TicketsSelectedField]] = Field(
        None, description="Selected fields to be fetched", title="Selected Fields"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetPolicyTicketsByPolicyIdResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_tickets: List[GetSinglePolicyTicketByPolicyIdResponse] = Field(
        ..., description="List of policy_tickets", title="Policy Tickets"
    )


class GetPolicyTicketsExportAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    selected_fields: Optional[List[TicketsSelectedField]] = Field(
        None, description="Selected fields to be fetched", title="Selected Fields"
    )
    file_extension: Optional[ExportFileType] = Field(
        "xlsx", description="export file type"
    )


class GetPolicyTicketsExportRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    selected_fields: Optional[List[TicketsSelectedField]] = Field(
        None, description="Selected fields to be fetched", title="Selected Fields"
    )
    file_extension: Optional[ExportFileType] = Field(
        "xlsx", description="export file type"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    link_expiry_in_seconds: Optional[int] = Field(
        0, description="Export link expiry in seconds", title="Link Expiry In Seconds"
    )


class GetPolicyTicketsForNotificationRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    filter_criteria: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(
        [],
        description="Narrow down the result set further by applying filters",
        title="Filter Criteria",
    )
    can_get_org_cost_center: Optional[bool] = Field(
        False,
        description="Flag to check if the org cost center can be fetched",
        title="Can Get Org Cost Center",
    )
    get_only_ticket_data: Optional[bool] = Field(
        False,
        description="Flag to check if the ticket data can be fetched",
        title="Get Only Ticket Data",
    )
    is_custom_ticket_enabled: Optional[bool] = Field(
        True,
        description="Flag to check if the custom ticket can be fetched",
        title="Is Custom Ticket Enabled",
    )


class GetResourceCatalogCostDataStatsAPIRequest(BaseModel):
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    navira_log_id: Optional[UUID4] = Field(
        None,
        description="Navira log id, if the id is passed it will get the resource cound and stats based on the sql generated by Navira",
        title="Navira Log Id",
    )


class GetResourceCatalogCostDataStatsRequest(BaseModel):
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    navira_log_id: Optional[UUID4] = Field(
        None,
        description="Navira log id, if the id is passed it will get the resource cound and stats based on the sql generated by Navira",
        title="Navira Log Id",
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class GetResourceCatalogCountStatsRequest(BaseModel):
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    navira_log_id: Optional[UUID4] = Field(
        None,
        description="Navira log id, if the id is passed it will get the resource cound and stats based on the sql generated by Navira",
        title="Navira Log Id",
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class GetResourceCatalogStatsAPIRequest(BaseModel):
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    navira_log_id: Optional[UUID4] = Field(
        None,
        description="Navira log id, if the id is passed it will get the resource cound and stats based on the sql generated by Navira",
        title="Navira Log Id",
    )


class GetS3AgentMetricsDataRequest(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    time_filter: Optional[S3RequestTimeFilter] = Field(
        default_factory=lambda: S3RequestTimeFilter.model_validate(
            {"duration": "last_60_days"}
        ),
        description="Time filter",
    )


class GetS3OptimisationAggregatedMetricsRequest(BaseModel):
    resource_id: str = Field(
        ..., description="The id of the resource.", title="Resource Id"
    )
    metrics_query: GetCURDataMetricsAPIRequest = Field(
        ..., description="The metrics query."
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="The id of the tenant.", title="Tenant Id"
    )


class GetS3OptimisationInsightsResponse(BaseModel):
    insights: List[S3OptimisationInsight] = Field(..., title="Insights")


class GetSavedViewsAPIRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters for the saved views", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sort criteria for the saved views"
    )


class GetSavedViewsRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters for the saved views", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sort criteria for the saved views"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetServiceDashboardStatsAPIRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to be applied", title="Filters")
    group_by: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        "service", description="Group by option (defaults to SERVICE)"
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sort criteria")
    limit_items: Optional[bool] = Field(
        True, description="Whether to limit the number of items", title="Limit Items"
    )
    item_count: Optional[int] = Field(
        None, description="Number of items to return", title="Item Count"
    )


class GetServiceDashboardStatsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to be applied", title="Filters")
    group_by: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        "service", description="Group by option (defaults to SERVICE)"
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sort criteria")
    limit_items: Optional[bool] = Field(
        True, description="Whether to limit the number of items", title="Limit Items"
    )
    item_count: Optional[int] = Field(
        None, description="Number of items to return", title="Item Count"
    )


class GetTableMetadataResponse(BaseModel):
    table_metadata: List[TableMetadata] = Field(
        ..., description="Metadata for the tables", title="Table Metadata"
    )


class GetTenantAnomalySettingsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantAnomalySettingFilters] = Field(
        default_factory=lambda: TenantAnomalySettingFilters.model_validate(
            {"states": ["ACTIVE"]}
        ),
        description="Filters to apply to the tenant anomalies.",
    )


class GetTenantAnomalySettingsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantAnomalySettingFilters] = Field(
        default_factory=lambda: TenantAnomalySettingFilters.model_validate(
            {"states": ["ACTIVE"]}
        ),
        description="Filters to apply to the tenant anomalies.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantPoliciesWithSettingsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetTenantPoliciesWithSettingsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantPolicySettingsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantPolicySettingsFilters] = Field(
        default_factory=lambda: TenantPolicySettingsFilters.model_validate(
            {"states": ["ACTIVE"], "policy_ids": []}
        ),
        description="Filters to apply to the tenant policy settings.",
    )


class GetTenantPolicySettingsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantPolicySettingsFilters] = Field(
        default_factory=lambda: TenantPolicySettingsFilters.model_validate(
            {"states": ["ACTIVE"], "policy_ids": []}
        ),
        description="Filters to apply to the tenant policy settings.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantPolicySettingsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_settings: List[TenantPolicySettings] = Field(
        ..., description="List of tenant policy settings.", title="Policy Settings"
    )


class GetTenantPolicyStatsAPIRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field([], description="Filters to be applied", title="Filters")


class GetTenantPolicyStatsRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field([], description="Filters to be applied", title="Filters")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantProviderByIDResponse(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigOutput] = Field(
        ..., description="provider config"
    )
    id: UUID4 = Field(..., description="Unique ID for the Tenant Provider", title="Id")
    is_parent_account: bool = Field(
        ..., description="billing account", title="Is Parent Account"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    is_billing_account: bool = Field(
        ..., description="is billing account", title="Is Billing Account"
    )
    is_verified: bool = Field(..., description="is verified", title="Is Verified")
    state: TenantProviderState = Field(..., description="State of the tenant")
    external_id: str = Field(..., description="external id", title="External Id")
    use_external_id: bool = Field(
        ..., description="use external id", title="Use External Id"
    )


class GetTenantProvidersRequest(BaseModel):
    filters: Optional[TenantProviderFilters] = Field(
        {}, description="Filters to apply to the policy templates."
    )
    attributes: Optional[List[TenantProviderAttributes]] = Field(
        [],
        description="List of items to be returned in the response",
        title="Attributes",
    )


class GetTenantProvidersResponse(BaseModel):
    tenant_provider_filter_data: Optional[List[TenantProvider]] = Field(
        ..., title="Tenant Provider Filter Data"
    )
    attributes_data: Optional[Dict[str, Any]] = Field(..., title="Attributes Data")


class GetTenantTicketStatusMetadataApiRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field([], description="List of filter criteria to apply", title="Filters")


class GetTenantTicketStatusMetadataApiResponse(BaseModel):
    status_metadata: List[TenantTicketStatusMetadataApiResponse] = Field(
        ..., description="List of status metadata entries", title="Status Metadata"
    )


class GetTenantTicketStatusMetadataRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field([], description="List of filter criteria to apply", title="Filters")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTenantTicketStatusMetadataResponse(BaseModel):
    status_metadata: List[TenantTicketStatusMetadata] = Field(
        ..., description="List of status metadata entries", title="Status Metadata"
    )


class GetTenantTicketsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantTicketFilters] = Field(
        default_factory=lambda: TenantTicketFilters.model_validate(
            {
                "monitor_ids": [],
                "ticket_categories": [],
                "states": [],
                "statuses": [],
                "policy_ids": [],
                "trigger_ids": [],
                "last_run_ids": [],
            }
        ),
        description="Filters to apply to the tickets.",
    )


class GetTenantTicketsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantTicketFilters] = Field(
        default_factory=lambda: TenantTicketFilters.model_validate(
            {
                "monitor_ids": [],
                "ticket_categories": [],
                "states": [],
                "statuses": [],
                "policy_ids": [],
                "trigger_ids": [],
                "last_run_ids": [],
            }
        ),
        description="Filters to apply to the tickets.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTenantUsersSimpleResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    users: List[SimpleTenantUser] = Field(
        ..., description="List of tenant users with minimal details", title="Users"
    )


class GetTenantUsersWithFilterAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(
        {"field": "updated_at", "direction": "desc"}, description="Sorting criteria"
    )


class GetTenantUsersWithFilterRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(
        {"field": "updated_at", "direction": "desc"}, description="Sorting criteria"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTenantsResponse(BaseModel):
    tenants: List[Tenant] = Field(..., title="Tenants")


class GetTicketActivitiesApiRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetTicketActivitiesByStatusRequest(BaseModel):
    tenant_id: UUID4 = Field(..., description="ID of the tenant", title="Tenant Id")
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetTicketActivitiesByStatusResponse(BaseModel):
    activities: List[TicketActivity] = Field(
        ..., description="List of activities", title="Activities"
    )


class GetTicketActivitiesRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    tenant_id: UUID4 = Field(..., description="ID of the tenant", title="Tenant Id")


class GetTicketClosureEvidenceDataResponse(BaseModel):
    ticket_closure_metadata: Optional[TicketClosureMetadataMixin] = Field(
        None, description="Ticket closure metadata"
    )
    policy_metadata: Optional[TenantPolicyTicketClosureMetadataMixin] = Field(
        None, description="Policy metadata"
    )
    resource_metadata: Optional[ResourceTicketClosureMetadataMixin] = Field(
        None, description="Resource metadata"
    )
    achieved_savings_data: Optional[AchievedSavingsMixinOutput] = Field(
        None, description="Achieved savings data"
    )
    achieved_savings_evidence_data: Optional[List[AchievedSavingsEvidenceDataPoint]] = (
        Field(
            [],
            description="Achieved savings evidence data",
            title="Achieved Savings Evidence Data",
        )
    )
    detected_change_data: Optional[DetectChangeResponse] = Field(
        None, description="Detect change data"
    )
    detected_change_evidence_data: Optional[List[CURLineItemResult]] = Field(
        [],
        description="Detect change evidence data",
        title="Detected Change Evidence Data",
    )


class GetTicketStatsAPIRequest(BaseModel):
    metric: TenantTicketsStatsMetrics = Field(..., description="Metric to be fetched")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    group: Optional[GroupByOption] = Field(None, description="Group by option")
    sub_group: Optional[SubGroupByOption] = Field(
        None, description="Sub group by option"
    )
    limit_items: Optional[bool] = Field(
        None,
        description="Limit the number of items to be fetched or not",
        title="Limit Items",
    )
    item_count: Optional[int] = Field(
        5, description="Count of the items to be fetched", title="Item Count"
    )


class GetTicketStatsByPriorityAPIRequest(BaseModel):
    start_date: Optional[datetime] = Field(
        None,
        description="The start date (defaults to 30 days ago if not provided)",
        title="Start Date",
    )
    end_date: Optional[datetime] = Field(
        None,
        description="The end date (defaults to today if not provided)",
        title="End Date",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to be applied", title="Filters")


class GetTicketStatsByPriorityRequest(BaseModel):
    start_date: Optional[datetime] = Field(
        None,
        description="The start date (defaults to 30 days ago if not provided)",
        title="Start Date",
    )
    end_date: Optional[datetime] = Field(
        None,
        description="The end date (defaults to today if not provided)",
        title="End Date",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to be applied", title="Filters")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTicketStatsRequest(BaseModel):
    metric: TenantTicketsStatsMetrics = Field(..., description="Metric to be fetched")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    group: Optional[GroupByOption] = Field(None, description="Group by option")
    sub_group: Optional[SubGroupByOption] = Field(
        None, description="Sub group by option"
    )
    limit_items: Optional[bool] = Field(
        None,
        description="Limit the number of items to be fetched or not",
        title="Limit Items",
    )
    item_count: Optional[int] = Field(
        5, description="Count of the items to be fetched", title="Item Count"
    )
    tenant_id: UUID = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTicketTimeseriesCostDataAPIRequest(BaseModel):
    metrics: List[TenantTicketsStatsMetrics] = Field(..., title="Metrics")
    granularity: Optional[
        OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit
    ] = Field("days", description="Granularity of the data")
    accumulation_type: Optional[TimeSeriesDataAccumulationType] = Field(
        "distinct", description="Accumulation type of the data"
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., title="Filters")
    )
    timestamp_field_name: Optional[TimeStampFieldName] = Field(
        "date_of_change", description="Timestamp field name"
    )


class GetTicketTimeseriesCostDataRequest(BaseModel):
    metrics: List[TenantTicketsStatsMetrics] = Field(..., title="Metrics")
    granularity: Optional[
        OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit
    ] = Field("days", description="Granularity of the data")
    accumulation_type: Optional[TimeSeriesDataAccumulationType] = Field(
        "distinct", description="Accumulation type of the data"
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., title="Filters")
    )
    timestamp_field_name: Optional[TimeStampFieldName] = Field(
        "date_of_change", description="Timestamp field name"
    )
    tenant_id: UUID = Field(..., title="Tenant Id")


class GetTicketTimeseriesDataAPIRequest(BaseModel):
    metric: TenantTicketsStatsMetrics
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., title="Filters")
    )
    group: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        None, description="Group by option"
    )
    granularity: Optional[
        OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit
    ] = Field("days", description="Granularity of the data")
    accumulation_type: Optional[TimeSeriesDataAccumulationType] = Field(
        "distinct", description="Accumulation type of the data"
    )
    timestamp_field_name: Optional[TimeStampFieldName] = Field(
        "date_of_change", description="Timestamp field name"
    )


class GetTicketTimeseriesDataRequest(BaseModel):
    metric: TenantTicketsStatsMetrics
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., title="Filters")
    )
    group: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        None, description="Group by option"
    )
    granularity: Optional[
        OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit
    ] = Field("days", description="Granularity of the data")
    accumulation_type: Optional[TimeSeriesDataAccumulationType] = Field(
        "distinct", description="Accumulation type of the data"
    )
    timestamp_field_name: Optional[TimeStampFieldName] = Field(
        "date_of_change", description="Timestamp field name"
    )
    tenant_id: UUID = Field(..., title="Tenant Id")


class GetUntaggedResourceCatalogCountStatsRequest(BaseModel):
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    navira_log_id: Optional[UUID4] = Field(
        None,
        description="Navira log id, if the id is passed it will get the resource cound and stats based on the sql generated by Navira",
        title="Navira Log Id",
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class GetUserCustomTicketByArnAPIRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to be applied", title="Filters")
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters"
    )


class GetUserCustomTicketByArnRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to be applied", title="Filters")
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    arn_id: str = Field(..., description="ARN id of the resource", title="Arn Id")


class GetWorkloadDetailsAPIRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    namespace: str = Field(
        ..., description="Namespace of the workload", title="Namespace"
    )
    workload_name: str = Field(
        ..., description="Name of the workload", title="Workload Name"
    )
    workload_type: Optional[str] = Field(
        None,
        description="Type of the workload (e.g., Deployment, StatefulSet)",
        title="Workload Type",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply for date filtering", title="Filters")


class GetWorkloadDetailsRequest(BaseModel):
    cluster_id: UUID = Field(..., description="ID of the cluster", title="Cluster Id")
    namespace: str = Field(
        ..., description="Namespace of the workload", title="Namespace"
    )
    workload_name: str = Field(
        ..., description="Name of the workload", title="Workload Name"
    )
    workload_type: Optional[str] = Field(
        None,
        description="Type of the workload (e.g., Deployment, StatefulSet)",
        title="Workload Type",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply for date filtering", title="Filters")
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetWorkloadDetailsResponse(BaseModel):
    namespace: str = Field(
        ..., description="Namespace of the workload", title="Namespace"
    )
    workload_name: str = Field(
        ..., description="Name of the workload", title="Workload Name"
    )
    workload_type: str = Field(
        ...,
        description="Type of the workload (e.g., Deployment, StatefulSet)",
        title="Workload Type",
    )
    containers: List[Containers] = Field(
        ..., description="List of containers in the workload", title="Containers"
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description="Kubernetes labels attached to the workload", title="Labels"
    )
    attributes: Optional[Dict[str, Any]] = Field(
        None,
        description="Additional workload attributes and metadata",
        title="Attributes",
    )
    resource_utilizations: List[ResourceMetrics] = Field(
        ..., description="List of resource utilizations", title="Resource Utilizations"
    )


class GetWorkloadStatsAPIRequest(BaseModel):
    cluster_id: Optional[UUID] = Field(
        None, description="ID of the cluster to filter by", title="Cluster Id"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Additional filters to apply", title="Filters")


class GetWorkloadStatsRequest(BaseModel):
    cluster_id: Optional[UUID] = Field(
        None, description="ID of the cluster to filter by", title="Cluster Id"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Additional filters to apply", title="Filters")
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetWorkloadsAPIRequest(BaseModel):
    grouping: Optional[WorkloadGroupBy] = Field(
        None, description="Grouping configuration"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the request"
    )


class GetWorkloadsByNamespaceAPIRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters"
    )


class GetWorkloadsByNamespaceRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters"
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetWorkloadsRequest(BaseModel):
    grouping: Optional[WorkloadGroupBy] = Field(
        None, description="Grouping configuration"
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters to apply", title="Filters")
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the request"
    )
    tenant_id: UUID = Field(..., description="ID of the tenant", title="Tenant Id")


class GetWorkloadsResponse(BaseModel):
    pagination: Optional[PaginationFields] = Field(
        None, description="Pagination metadata for the response"
    )
    workloads: Optional[List[WorkloadData]] = Field(
        None, description="Flat list of workloads when not grouped", title="Workloads"
    )
    groups: Optional[List[WorkloadGroup]] = Field(
        None,
        description="Nested grouped data when grouping is provided",
        title="Groups",
    )


class GranularityOptionInput(BaseModel):
    label: str = Field(
        ..., description="The label of the granularity option.", title="Label"
    )
    value: OnelensModelsServiceInterfacesPoliciesCommonsGranularity = Field(
        ..., description="The value of the granularity option."
    )
    is_default: Optional[bool] = Field(
        False,
        description="Whether the granularity option is the default.",
        title="Is Default",
    )


class GranularityOptionOutput(BaseModel):
    label: str = Field(
        ..., description="The label of the granularity option.", title="Label"
    )
    value: OnelensModelsServiceInterfacesPoliciesCommonsGranularity = Field(
        ..., description="The value of the granularity option."
    )
    is_default: Optional[bool] = Field(
        False,
        description="Whether the granularity option is the default.",
        title="Is Default",
    )


class HierarchyNodeEntityWithDetails(BaseModel):
    id: Optional[UUID] = Field(
        None, description="The unique identifier of the hierarchy node.", title="Id"
    )
    name: constr(max_length=30) = Field(..., title="Name")
    category: Category = Field(..., title="HierarchyNodeCategory")
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )
    description: Optional[str] = Field(
        None, description="Description of the node.", title="Description"
    )
    created_at: Optional[datetime] = Field(
        None, description="Created at timestamp", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Updated at timestamp", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        None, description="Created by user id", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        None, description="Updated by user id", title="Updated By"
    )
    path: List[HierarchyNodePathItem] = Field(
        ..., description="The path of the node from root.", title="Path"
    )
    parent: Optional[HierarchyNodeParentItem] = Field(
        None, description="The parent of the node."
    )
    resources_metrics: Optional[HierarchyNodeResourceMetrics] = Field(
        None, description="The metrics of the resources associated with the node."
    )


class InsertTicketActivitiesResponse(BaseModel):
    activities: List[TicketActivity] = Field(
        ..., description="List of inserted activities", title="Activities"
    )


class LogAgentRunRequest(BaseModel):
    registration_id: UUID = Field(
        ..., description="ID of the cluster registration", title="Registration Id"
    )
    cluster_token: str = Field(
        ..., description="Token for cluster authentication", title="Cluster Token"
    )
    run_id: Optional[UUID] = Field(None, description="ID of the run", title="Run Id")
    config_hash: Optional[str] = Field(
        None, description="Hash of the configuration used", title="Config Hash"
    )
    time_range: Optional[OnelensModelsServiceInterfacesKubernetesCommonTimeRange] = (
        Field(None, description="Time range of the run")
    )
    granularity_seconds: Optional[int] = Field(
        None, description="Time granularity in seconds", title="Granularity Seconds"
    )
    run_config: Optional[AgentRunConfigInput] = Field(
        None, description="Configuration used for the run"
    )
    stats: Optional[AgentRunStats] = Field(None, description="Stats of the run")
    status: AgentRunStatus = Field(..., description="Status of the run")
    details: Optional[str] = Field(
        None, description="Details of the run", title="Details"
    )


class MessageInput(BaseModel):
    id: Optional[UUID4] = Field(
        None, description="Unique identifier of the message", title="Id"
    )
    parts: List[MessagePart] = Field(
        ..., description="Parts of the message", title="Parts"
    )
    created_at: Optional[datetime] = Field(
        None, description="Timestamp of message creation", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Timestamp of last message update", title="Updated At"
    )
    author: MessageAuthor = Field(..., description="Author of the message")
    can_persist: Optional[bool] = Field(
        True,
        description="Whether the message can be persisted in the thread",
        title="Can Persist",
    )


class MessageOutput(BaseModel):
    id: Optional[UUID4] = Field(
        None, description="Unique identifier of the message", title="Id"
    )
    parts: List[MessagePart] = Field(
        ..., description="Parts of the message", title="Parts"
    )
    created_at: Optional[datetime] = Field(
        None, description="Timestamp of message creation", title="Created At"
    )
    updated_at: Optional[datetime] = Field(
        None, description="Timestamp of last message update", title="Updated At"
    )
    author: MessageAuthor = Field(..., description="Author of the message")
    can_persist: Optional[bool] = Field(
        True,
        description="Whether the message can be persisted in the thread",
        title="Can Persist",
    )


class MetricsChartConfigInput(BaseModel):
    chart_title: str = Field(
        ..., description="The title of the chart.", title="Chart Title"
    )
    chart_type: str = Field(
        ..., description="The type of the chart.", title="Chart Type"
    )
    chart_data_tooltip: Optional[str] = Field(
        None, description="The tooltip for chart data", title="Chart Data Tooltip"
    )
    table_name: str = Field(
        ..., description="The name of the table.", title="Table Name"
    )
    metric_name: str = Field(
        ..., description="The name of the metric.", title="Metric Name"
    )
    aggregation_type: MetricsAggregationType = Field(
        ..., description="The aggregation type of the metric."
    )
    look_back_period: Optional[MetricsLookBackPeriod] = Field(
        None, description="The look back period of the metric."
    )
    filter: Optional[List[MetricChartFilters]] = Field(
        None, description="The filters for displaying the metrics", title="Filter"
    )
    threshold: Optional[MetricsThreshold] = Field(
        None, description="The threshold of the metric."
    )
    granularity_options: Optional[List[GranularityOptionInput]] = Field(
        None,
        description="The granularity options for the metric.",
        title="Granularity Options",
    )


class MetricsChartConfigOutput(BaseModel):
    chart_title: str = Field(
        ..., description="The title of the chart.", title="Chart Title"
    )
    chart_type: str = Field(
        ..., description="The type of the chart.", title="Chart Type"
    )
    chart_data_tooltip: Optional[str] = Field(
        None, description="The tooltip for chart data", title="Chart Data Tooltip"
    )
    table_name: str = Field(
        ..., description="The name of the table.", title="Table Name"
    )
    metric_name: str = Field(
        ..., description="The name of the metric.", title="Metric Name"
    )
    aggregation_type: MetricsAggregationType = Field(
        ..., description="The aggregation type of the metric."
    )
    look_back_period: Optional[MetricsLookBackPeriod] = Field(
        None, description="The look back period of the metric."
    )
    filter: Optional[List[MetricChartFilters]] = Field(
        None, description="The filters for displaying the metrics", title="Filter"
    )
    threshold: Optional[MetricsThreshold] = Field(
        None, description="The threshold of the metric."
    )
    granularity_options: Optional[List[GranularityOptionOutput]] = Field(
        None,
        description="The granularity options for the metric.",
        title="Granularity Options",
    )


class MetricsQueryInput(BaseModel):
    name: str = Field(..., title="Name")
    metric_name: str = Field(..., title="Metric Name")
    measures: List[MetricsAggregationType] = Field(..., title="Measures")
    filters: List[
        OnelensModelsServiceInterfacesTenantDataMetricsServiceFilterCriteria
    ] = Field(..., title="Filters")
    time_filter: (
        OnelensModelsServiceInterfacesTenantDataMetricsServiceTimeDimensionInput
    )
    timezone: Optional[str] = Field("Asia/Kolkata", title="Timezone")


class MetricsQueryOutput(BaseModel):
    name: str = Field(..., title="Name")
    metric_name: str = Field(..., title="Metric Name")
    measures: List[MetricsAggregationType] = Field(..., title="Measures")
    filters: List[
        OnelensModelsServiceInterfacesTenantDataMetricsServiceFilterCriteria
    ] = Field(..., title="Filters")
    time_filter: (
        OnelensModelsServiceInterfacesTenantDataMetricsServiceTimeDimensionOutput
    )
    timezone: Optional[str] = Field("Asia/Kolkata", title="Timezone")


class OverrideTenantAnomalyConfigAPIRequest(BaseModel):
    config_override: AnomalyLogicConfigInput = Field(
        ..., description="The config overrides for the anomaly."
    )


class OverrideTenantAnomalyConfigRequest(BaseModel):
    tenant_id: UUID4 = Field(..., description="The tenant id.", title="Tenant Id")
    node_id: Optional[UUID4] = Field(None, description="The node id.", title="Node Id")
    config_override: AnomalyLogicConfigInput = Field(
        ..., description="The config to override with."
    )


class OverrideTenantAnomalyConfigResponse(BaseModel):
    config_overrides: Optional[AnomalyLogicConfigOutput] = Field(
        None, description="The config overrides for the tenant anomaly."
    )
    state: TenantAnomalyState = Field(
        ..., description="The state of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )


class PolicyTemplateDetailsInput(BaseModel):
    inputs: Optional[List[str]] = Field(
        None, description="The input dataset names for the policy.", title="Inputs"
    )
    config_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the policy config for this policy template.",
        title="Config Schema",
    )
    primary_violation_attributes_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the output violation.",
        title="Primary Violation Attributes Schema",
    )
    secondary_violation_attributes_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the .",
        title="Secondary Violation Attributes Schema",
    )
    rule_type: Optional[RuleType] = Field(
        None, description="The type of the rule, SQL etc."
    )
    rule_definition: Optional[str] = Field(
        None, description="The definition of the rule.", title="Rule Definition"
    )
    rule_definition_hash: Optional[str] = Field(
        None,
        description="The hash of the rule definition.",
        title="Rule Definition Hash",
    )
    default_policy_config: Optional[Dict[str, Any]] = Field(
        None,
        description="The default configuration for the policy.",
        title="Default Policy Config",
    )
    default_policy_config_hash: Optional[str] = Field(
        None,
        description="The hash of the default policy config.",
        title="Default Policy Config Hash",
    )
    metrics_details: Optional[List[MetricsChartConfigInput]] = Field(
        None, description="The metrics details for the policy.", title="Metrics Details"
    )


class PolicyTemplateDetailsOutput(BaseModel):
    inputs: Optional[List[str]] = Field(
        None, description="The input dataset names for the policy.", title="Inputs"
    )
    config_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the policy config for this policy template.",
        title="Config Schema",
    )
    primary_violation_attributes_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the output violation.",
        title="Primary Violation Attributes Schema",
    )
    secondary_violation_attributes_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the .",
        title="Secondary Violation Attributes Schema",
    )
    rule_type: Optional[RuleType] = Field(
        None, description="The type of the rule, SQL etc."
    )
    rule_definition: Optional[str] = Field(
        None, description="The definition of the rule.", title="Rule Definition"
    )
    rule_definition_hash: Optional[str] = Field(
        None,
        description="The hash of the rule definition.",
        title="Rule Definition Hash",
    )
    default_policy_config: Optional[Dict[str, Any]] = Field(
        None,
        description="The default configuration for the policy.",
        title="Default Policy Config",
    )
    default_policy_config_hash: Optional[str] = Field(
        None,
        description="The hash of the default policy config.",
        title="Default Policy Config Hash",
    )
    metrics_details: Optional[List[MetricsChartConfigOutput]] = Field(
        None, description="The metrics details for the policy.", title="Metrics Details"
    )


class PolicyTemplateUpdateFieldsMixin(BaseModel):
    title: Optional[str] = Field(
        None, description="The title of the policy template.", title="Title"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        None,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: Optional[PolicyExecutionType] = Field(
        None, description="The execution type of the policy template."
    )
    details: Optional[PolicyTemplateDetailsInput] = Field(
        None, description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: Optional[str] = Field(
        None,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: Optional[PolicyTemplateRecommendationDetailsInput] = Field(
        None, description="The recommendation details for the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )


class RegisterAllFeaturesResponse(BaseModel):
    features: List[TenantFeature] = Field(..., title="Features")


class ResponseBulkCustomFieldResponse(BaseModel):
    data: BulkCustomFieldResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateAuth0AndOnelensUserResponse(BaseModel):
    data: CreateAuth0AndOnelensUserResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseEnableTenantAnomalySettingsResponse(BaseModel):
    data: EnableTenantAnomalySettingsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetAllResourceCatalogsAPIResponseV2(BaseModel):
    data: GetAllResourceCatalogsAPIResponseV2
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPolicyTagsResponse(BaseModel):
    data: GetPolicyTagsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPolicyTemplatePacksResponse(BaseModel):
    data: GetPolicyTemplatePacksResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPolicyTicketsByEntityIdResponse(BaseModel):
    data: GetPolicyTicketsByEntityIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPolicyTicketsByPolicyIdResponse(BaseModel):
    data: GetPolicyTicketsByPolicyIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantPolicySettingsResponse(BaseModel):
    data: GetTenantPolicySettingsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantProviderByIDResponse(BaseModel):
    data: GetTenantProviderByIDResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantProvidersResponse(BaseModel):
    data: GetTenantProvidersResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantTicketStatusMetadataApiResponse(BaseModel):
    data: GetTenantTicketStatusMetadataApiResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantUsersSimpleResponse(BaseModel):
    data: GetTenantUsersSimpleResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantsResponse(BaseModel):
    data: GetTenantsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTicketClosureEvidenceDataResponse(BaseModel):
    data: GetTicketClosureEvidenceDataResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseOverrideTenantAnomalyConfigResponse(BaseModel):
    data: OverrideTenantAnomalyConfigResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseSearchTenantPoliciesResponse(BaseModel):
    data: SearchTenantPoliciesResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseTenantVerifyCurBucketResponse(BaseModel):
    data: TenantVerifyCurBucketResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateTenantUserDetailsResponse(BaseModel):
    data: UpdateTenantUserDetailsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateTenantUserResponse(BaseModel):
    data: UpdateTenantUserResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class S3BucketDetailsExportAPIRequest(BaseModel):
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class S3OptimisationGridDataRequest(BaseModel):
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(
        {"field": "cost", "direction": "desc"}, description="Sorting criteria"
    )
    tenant_id: Optional[UUID4] = Field(
        None, description="The id of the tenant.", title="Tenant Id"
    )
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )


class SavedViewItemPayloadInput(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters for the saved views", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sort criteria for the saved views"
    )
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the saved views"
    )
    selected_fields: Optional[List[TicketsSelectedField]] = Field(
        None, description="Selected fields to be fetched", title="Selected Fields"
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None, description="Additional metadata for the saved view", title="Metadata"
    )


class SavedViewItemPayloadOutput(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field(None, description="Filters for the saved views", title="Filters")
    sort_criteria: Optional[SortCriteria] = Field(
        None, description="Sort criteria for the saved views"
    )
    pagination: Optional[PaginationParams] = Field(
        None, description="Pagination parameters for the saved views"
    )
    selected_fields: Optional[List[TicketsSelectedField]] = Field(
        None, description="Selected fields to be fetched", title="Selected Fields"
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None, description="Additional metadata for the saved view", title="Metadata"
    )


class SendMessageRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None,
        description="Unique identifier of the tenant, required for tenant specific workflows",
        title="Tenant Id",
    )
    thread_id: Optional[UUID4] = Field(
        None,
        description="Unique identifier of the thread, if none is provided, a new thread will be created",
        title="Thread Id",
    )
    agent_type: str = Field(
        ...,
        description="Type of the workflow, required if thread_id is not provided to create a new thread for the workflow",
        title="Agent Type",
    )
    message: MessageInput = Field(..., description="Message to be sent")
    input_state: Optional[Dict[str, Any]] = Field(
        {},
        description="State of the agent, if provided, it will be used to update the agent state",
        title="Input State",
    )


class SendMessageResponse(BaseModel):
    new_messages: List[MessageOutput] = Field(
        ..., description="List of new messages generated", title="New Messages"
    )
    output_state: Dict[str, Any] = Field(
        ..., description="Updated state of the agent", title="Output State"
    )
    thread_id: UUID4 = Field(
        ..., description="Unique identifier of the thread", title="Thread Id"
    )


class SendMessageStreamRequest(BaseModel):
    tenant_id: Optional[UUID4] = Field(
        None,
        description="Unique identifier of the tenant, required for tenant specific workflows",
        title="Tenant Id",
    )
    thread_id: Optional[UUID4] = Field(
        None,
        description="Unique identifier of the thread, if none is provided, a new thread will be created",
        title="Thread Id",
    )
    agent_type: Optional[str] = Field(
        None,
        description="Type of the workflow, required if thread_id is not provided to create a new thread for the workflow",
        title="Agent Type",
    )
    message: MessageInput = Field(..., description="Message to be sent")
    input_state: Optional[Dict[str, Any]] = Field(
        {},
        description="State of the agent, if provided, it will be used to update the agent state",
        title="Input State",
    )


class TenantAnomalySettings(BaseModel):
    config_overrides: Optional[AnomalyLogicConfigOutput] = Field(
        None, description="The config overrides for the tenant anomaly."
    )
    state: TenantAnomalyState = Field(
        ..., description="The state of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )


class TenantConfig(BaseModel):
    clusters: Optional[Dict[str, ClusterConfig]] = Field(
        None, description="Map of cluster ID to configurations", title="Clusters"
    )


class TenantCustomTicketDetailsInput(BaseModel):
    potential_cost_saving: Optional[float] = Field(
        None,
        description="The potential cost savings of the recommendation",
        title="Potential Cost Saving",
    )
    ticket_characterstics: Optional[List[CustomTicketAttributes]] = Field(
        [], description="The ticket characteristics", title="Ticket Characterstics"
    )
    thread_id: Optional[UUID] = Field(
        None, description="The unique identifier of the thread", title="Thread Id"
    )
    source: Optional[str] = Field(
        None, description="The source of the recommendation", title="Source"
    )
    custom_ticket_recommendations: Optional[List[CustomTicketRecommendation]] = Field(
        None,
        description="Custom ticket recommendations",
        title="Custom Ticket Recommendations",
    )
    reason_for_change: Optional[constr(max_length=500)] = Field(
        None, description="Reason for the change", title="Reason For Change"
    )
    achieved_savings: Optional[float] = Field(
        None,
        description="Monthly achieved savings for the ticket",
        title="Achieved Savings",
    )
    achieved_savings_on: Optional[datetime] = Field(
        None, description="Achieved savings details", title="Achieved Savings On"
    )
    account_id: Optional[str] = Field(
        None, description="Account id", title="Account Id"
    )
    service: Optional[List[CustomTicketService]] = Field(
        None, description="Service", title="Service"
    )
    region: Optional[str] = Field(None, description="Region", title="Region")
    change_type: Optional[ChangeType] = Field(None, description="Change type")
    due_date: Optional[datetime] = Field(None, description="Due date", title="Due Date")
    recommendation: Optional[constr(max_length=250)] = Field(
        None, description="Recommendation", title="Recommendation"
    )
    resource_information: Optional[ResourceInformation] = Field(
        None, description="Resource information"
    )
    usage_information: Optional[constr(max_length=200)] = Field(
        None, description="Usage information", title="Usage Information"
    )
    ticket_title: Optional[constr(max_length=100)] = Field(
        None, description="Ticket title", title="Ticket Title"
    )
    policy_id: Optional[UUID] = Field(
        "00000000-0000-6000-8000-000000000000",
        description="Policy id",
        title="Policy Id",
    )
    effort: Optional[Effort] = Field(None, description="Effort")
    risk: Optional[Risk] = Field(None, description="Risk")
    supporting_documents: Optional[List[FileUploadType]] = Field(
        None, description="Supporting documents", title="Supporting Documents"
    )
    additional_metadata: Optional[TicketAdditionalMetadataInput] = Field(
        None, description="Additional metadata for the ticket"
    )


class TenantCustomTicketDetailsOutput(BaseModel):
    potential_cost_saving: Optional[float] = Field(
        None,
        description="The potential cost savings of the recommendation",
        title="Potential Cost Saving",
    )
    ticket_characterstics: Optional[List[CustomTicketAttributes]] = Field(
        [], description="The ticket characteristics", title="Ticket Characterstics"
    )
    thread_id: Optional[UUID] = Field(
        None, description="The unique identifier of the thread", title="Thread Id"
    )
    source: Optional[str] = Field(
        None, description="The source of the recommendation", title="Source"
    )
    custom_ticket_recommendations: Optional[List[CustomTicketRecommendation]] = Field(
        None,
        description="Custom ticket recommendations",
        title="Custom Ticket Recommendations",
    )
    reason_for_change: Optional[constr(max_length=500)] = Field(
        None, description="Reason for the change", title="Reason For Change"
    )
    achieved_savings: Optional[float] = Field(
        None,
        description="Monthly achieved savings for the ticket",
        title="Achieved Savings",
    )
    achieved_savings_on: Optional[datetime] = Field(
        None, description="Achieved savings details", title="Achieved Savings On"
    )
    account_id: Optional[str] = Field(
        None, description="Account id", title="Account Id"
    )
    service: Optional[List[CustomTicketService]] = Field(
        None, description="Service", title="Service"
    )
    region: Optional[str] = Field(None, description="Region", title="Region")
    change_type: Optional[ChangeType] = Field(None, description="Change type")
    due_date: Optional[datetime] = Field(None, description="Due date", title="Due Date")
    recommendation: Optional[constr(max_length=250)] = Field(
        None, description="Recommendation", title="Recommendation"
    )
    resource_information: Optional[ResourceInformation] = Field(
        None, description="Resource information"
    )
    usage_information: Optional[constr(max_length=200)] = Field(
        None, description="Usage information", title="Usage Information"
    )
    ticket_title: Optional[constr(max_length=100)] = Field(
        None, description="Ticket title", title="Ticket Title"
    )
    policy_id: Optional[UUID] = Field(
        "00000000-0000-6000-8000-000000000000",
        description="Policy id",
        title="Policy Id",
    )
    effort: Optional[Effort] = Field(None, description="Effort")
    risk: Optional[Risk] = Field(None, description="Risk")
    supporting_documents: Optional[List[FileUploadType]] = Field(
        None, description="Supporting documents", title="Supporting Documents"
    )
    additional_metadata: Optional[TicketAdditionalMetadataOutput] = Field(
        None, description="Additional metadata for the ticket"
    )


class TenantPolicy(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    policy_template_id: UUID4 = Field(
        ..., description="The id of the policy template.", title="Policy Template Id"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    state: TenantPolicySystemState = Field(
        ..., description="The state of the tenant policy."
    )


class TenantPolicyForPolicyWithSetting(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[str, ServiceCatalog]] = Field(
        ...,
        description="The list of services display names associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: datetime = Field(
        ...,
        description="The timestamp when the policy was activated.",
        title="Activated At",
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    policy_template_id: UUID4 = Field(
        ..., description="The id of the policy template.", title="Policy Template Id"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    state: TenantPolicySystemState = Field(
        ..., description="The state of the tenant policy."
    )
    is_new: Optional[bool] = Field(
        False, description="Flag to indicate if the policy is new.", title="Is New"
    )


class TenantPolicyWithPolicyDisplayAlias(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    policy_template_id: UUID4 = Field(
        ..., description="The id of the policy template.", title="Policy Template Id"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    state: TenantPolicySystemState = Field(
        ..., description="The state of the tenant policy."
    )
    policy_display_alias: str = Field(
        ..., description="Policy display alias ", title="Policy Display Alias"
    )


class TenantPolicyWithSetting(BaseModel):
    policy: TenantPolicyForPolicyWithSetting = Field(
        ..., description="The policy details."
    )
    setting: TenantPolicySettings = Field(
        ..., description="The policy setting details."
    )


class TenantTicketAchievedSavingsMixin(BaseModel):
    calculated_cost_difference: Optional[float] = Field(
        None,
        description="Calculated cost difference of the resource because of the anomaly",
        title="Calculated Cost Difference",
    )
    daily_achieved_savings: Optional[float] = Field(
        None,
        description="Daily achieved savings of the resource because of the anomaly",
        title="Daily Achieved Savings",
    )
    projected_monthly_achieved_savings: Optional[float] = Field(
        None,
        description="Projected monthly achieved savings of the resource because of the anomaly",
        title="Projected Monthly Achieved Savings",
    )
    cur_mapping_available: Optional[bool] = Field(
        None,
        description="Flag indicating if the CUR mapping is available",
        title="Cur Mapping Available",
    )
    from_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp from which the achieved savings are calculated",
        title="From Timestamp",
    )
    to_timestamp: Optional[datetime] = Field(
        None,
        description="The timestamp to which the achieved savings are calculated",
        title="To Timestamp",
    )
    pre_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window before the ticket was closed"
    )
    post_closure_time_window: Optional[TimeRangeConfig] = Field(
        None, description="The time window after the ticket was closed"
    )
    projected_monthly_cost_before_change: Optional[float] = Field(
        None,
        description="The projected monthly cost before the change",
        title="Projected Monthly Cost Before Change",
    )
    projected_monthly_cost_after_change: Optional[float] = Field(
        None,
        description="The projected monthly cost after the change",
        title="Projected Monthly Cost After Change",
    )


class TenantTicketManualClosureMetadataInput(BaseModel):
    date_of_change: Optional[datetime] = Field(
        None, description="Date of change", title="Date Of Change"
    )
    modification_type: Optional[ModificationType] = Field(
        None, description="Modification type"
    )
    new_resource_arn: Optional[str] = Field(
        None, description="New resource arn", title="New Resource Arn"
    )
    new_resource_ol_id: Optional[UUID] = Field(
        None, description="New resource ol id", title="New Resource Ol Id"
    )
    manual_achieved_savings: Optional[float] = Field(
        None, description="Manual achieved savings", title="Manual Achieved Savings"
    )
    calculated_achieved_savings: Optional[float] = Field(
        None,
        description="Calculated achieved savings",
        title="Calculated Achieved Savings",
    )
    achieved_savings: Optional[AchievedSavingsMixinInput] = Field(
        None, description="Achieved savings"
    )
    detected_change: Optional[DetectChangeResponse] = Field(
        None, description="Detected change"
    )
    is_change_detected: Optional[bool] = Field(
        None, description="Is change detected", title="Is Change Detected"
    )
    is_savings_achieved: Optional[bool] = Field(
        None, description="Is savings achieved", title="Is Savings Achieved"
    )
    is_closure_validated: Optional[bool] = Field(
        None, description="Is closure validated", title="Is Closure Validated"
    )


class TenantTicketManualClosureMetadataOutput(BaseModel):
    date_of_change: Optional[datetime] = Field(
        None, description="Date of change", title="Date Of Change"
    )
    modification_type: Optional[ModificationType] = Field(
        None, description="Modification type"
    )
    new_resource_arn: Optional[str] = Field(
        None, description="New resource arn", title="New Resource Arn"
    )
    new_resource_ol_id: Optional[UUID] = Field(
        None, description="New resource ol id", title="New Resource Ol Id"
    )
    manual_achieved_savings: Optional[float] = Field(
        None, description="Manual achieved savings", title="Manual Achieved Savings"
    )
    calculated_achieved_savings: Optional[float] = Field(
        None,
        description="Calculated achieved savings",
        title="Calculated Achieved Savings",
    )
    achieved_savings: Optional[AchievedSavingsMixinOutput] = Field(
        None, description="Achieved savings"
    )
    detected_change: Optional[DetectChangeResponse] = Field(
        None, description="Detected change"
    )
    is_change_detected: Optional[bool] = Field(
        None, description="Is change detected", title="Is Change Detected"
    )
    is_savings_achieved: Optional[bool] = Field(
        None, description="Is savings achieved", title="Is Savings Achieved"
    )
    is_closure_validated: Optional[bool] = Field(
        None, description="Is closure validated", title="Is Closure Validated"
    )


class TenantTicketWithTicketAlias(BaseModel):
    created_at: datetime = Field(
        ..., description="Datetime of ticket creation", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Datetime of ticket updation", title="Updated At"
    )
    monitor_id: Optional[UUID5] = Field(
        None, description="Violation monitor id/anomlay node id", title="Monitor Id"
    )
    ticket_category: TicketCategory = Field(..., description="Category of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_type: str = Field(
        ...,
        description="The type of the resource experiencing policy violation.",
        title="Entity Type",
    )
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {},
        description="The attributes of the resource experiencing policy violation.",
        title="Entity Attributes",
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="The monthly unblended cost of the resource experiencing policy violation.",
        title="Monthly Unblended Cost",
    )
    assignment: TicketAssignment = Field(
        ..., description="Assignment state of the ticket"
    )
    assigned_to: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user the current ticket is assigned to",
        title="Assigned To",
    )
    is_config_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the configuration has changed",
        title="Is Config Changed",
    )
    policy_definition_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the policy definition has changed",
        title="Policy Definition Changed",
    )
    changed_from: Optional[str] = Field(
        None, description="The previous state of the resource", title="Changed From"
    )
    changed_to: Optional[str] = Field(
        None, description="The new state of the resource", title="Changed To"
    )
    resource_terminated: Optional[bool] = Field(
        None,
        description="Flag indicating if the resource has been terminated",
        title="Resource Terminated",
    )
    date_of_change: Optional[datetime] = Field(
        None, description="The date of the last change", title="Date Of Change"
    )
    reason_for_closure: Optional[ChangeReason] = Field(
        None, description="The reason for closing the ticket"
    )
    post_policy_execution_last_run: Optional[datetime] = Field(
        None,
        description="The date of the last post policy execution run",
        title="Post Policy Execution Last Run",
    )
    last_run_id: UUID = Field(
        ...,
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: datetime = Field(
        ...,
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )
    first_run_at: datetime = Field(
        ...,
        description="Datetime of the first policy violation/anomaly run",
        title="First Run At",
    )
    created_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who created the ticket",
        title="Created By",
    )
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    ticket_closure_last_run: Optional[datetime] = Field(
        None,
        description="Datetime of the last ticket closure run, last time the ticket was triggered to be closed/verified_and_waited",
        title="Ticket Closure Last Run",
    )
    ticket_type: Optional[TicketType] = Field(
        "SYSTEM", description="Type of the ticket"
    )
    priority: Optional[Priority] = Field("LOW", description="Priority of the ticket")
    ticket_owner: Optional[UUID] = Field(
        None, description="Owner of the ticket", title="Ticket Owner"
    )
    impact_on_performance: Optional[ImpactOnPerformance] = Field(
        None, description="Impact of the ticket on performance"
    )
    downtime_required: Optional[float] = Field(
        None, description="Downtime required in hours", title="Downtime Required"
    )
    compatibility_issues: Optional[constr(max_length=50)] = Field(
        None,
        description="Description of compatibility issues",
        title="Compatibility Issues",
    )
    objective: Optional[str] = Field(
        None, description="Objective of the ticket", title="Objective"
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataOutput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None,
        description="Flag indicating if the manual closure was initiated",
        title="Manual Closure Initiated",
    )
    note: Optional[str] = Field(None, description="Note of the ticket", title="Note")
    id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Id"
    )
    status: Union[PolicyTicketStatus, AnomalyTicketStatus] = Field(
        ..., description="Status of the ticket", title="Status"
    )
    details: Union[
        TenantPolicyTicketDetailsMixin,
        TenantAnomalyTicketDetailsMixin,
        TenantCustomTicketDetailsOutput,
    ] = Field(..., description="Details of the ticket", title="Details")
    ticket_alias: Optional[str] = Field(
        None,
        description="the # included ticket alias of the ticket",
        title="Ticket Alias",
    )
    trigger_id: UUID4 = Field(
        ...,
        description="The unique identifier of the trigger that created the ticket",
        title="Trigger Id",
    )


class TimeFilterInput(BaseModel):
    filter: OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria
    granularity: Optional[
        OnelensModelsServiceInterfacesTenantDataCurServiceGranularity
    ] = None


class UpdatePolicyTemplateRequest(BaseModel):
    force_update: Optional[bool] = Field(
        False,
        description="Force update (TRUE/FALSE), default: FALSE",
        title="Force Update",
    )
    title: Optional[str] = Field(
        None, description="The title of the policy template.", title="Title"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        None,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: Optional[PolicyExecutionType] = Field(
        None, description="The execution type of the policy template."
    )
    details: Optional[PolicyTemplateDetailsInput] = Field(
        None, description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: Optional[str] = Field(
        None,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: Optional[PolicyTemplateRecommendationDetailsInput] = Field(
        None, description="The recommendation details for the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class UpdatePolicyTemplateResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class UpdateSavedViewAPIRequest(BaseModel):
    name: Optional[constr(min_length=3)] = Field(
        None, description="Name of the saved view", title="Name"
    )
    payload: Optional[SavedViewItemPayloadInput] = Field(
        None, description="Payload of the saved view"
    )


class UpdateSavedViewRequest(BaseModel):
    name: Optional[constr(min_length=3)] = Field(
        None, description="Name of the saved view", title="Name"
    )
    payload: Optional[SavedViewItemPayloadInput] = Field(
        None, description="Payload of the saved view"
    )
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateSavedViewResponse(BaseModel):
    name: constr(min_length=3) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: SavedViewItemPayloadOutput = Field(
        ..., description="Payload of the saved view"
    )
    is_default: Optional[bool] = Field(
        False, description="Whether the saved view is default", title="Is Default"
    )
    is_system_defined: Optional[bool] = Field(
        False,
        description="Whether the saved view is system defined",
        title="Is System Defined",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )


class UpdateSingleTenantTicketAPIRequest(BaseModel):
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    status: Optional[PolicyTicketStatus] = Field(
        None, description="Status of the ticket"
    )
    assignment: Optional[TicketUnassignment] = Field(
        None, description="Assignment state of the ticket"
    )
    assigned_to: Optional[str] = Field(
        None, description="Assignee of the ticket", title="Assigned To"
    )
    note: Optional[str] = Field(None, description="Comment of the ticket", title="Note")
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataInput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None, description="Manual closure initiated", title="Manual Closure Initiated"
    )


class UpdateSingleTenantTicketRequest(BaseModel):
    trigger_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Id"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    status: Optional[PolicyTicketStatus] = Field(
        None, description="Status of the ticket"
    )
    assignment: Optional[TicketUnassignment] = Field(
        None, description="Assignment state of the ticket"
    )
    assigned_to: Optional[str] = Field(
        None, description="Assignee of the ticket", title="Assigned To"
    )
    note: Optional[str] = Field(None, description="Comment of the ticket", title="Note")
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataInput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None, description="Manual closure initiated", title="Manual Closure Initiated"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateSingleTenantTicketResponse(BaseModel):
    created_at: datetime = Field(
        ..., description="Datetime of ticket creation", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Datetime of ticket updation", title="Updated At"
    )
    monitor_id: Optional[UUID5] = Field(
        None, description="Violation monitor id/anomlay node id", title="Monitor Id"
    )
    ticket_category: TicketCategory = Field(..., description="Category of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_type: str = Field(
        ...,
        description="The type of the resource experiencing policy violation.",
        title="Entity Type",
    )
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {},
        description="The attributes of the resource experiencing policy violation.",
        title="Entity Attributes",
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="The monthly unblended cost of the resource experiencing policy violation.",
        title="Monthly Unblended Cost",
    )
    assignment: TicketAssignment = Field(
        ..., description="Assignment state of the ticket"
    )
    assigned_to: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user the current ticket is assigned to",
        title="Assigned To",
    )
    is_config_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the configuration has changed",
        title="Is Config Changed",
    )
    policy_definition_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the policy definition has changed",
        title="Policy Definition Changed",
    )
    changed_from: Optional[str] = Field(
        None, description="The previous state of the resource", title="Changed From"
    )
    changed_to: Optional[str] = Field(
        None, description="The new state of the resource", title="Changed To"
    )
    resource_terminated: Optional[bool] = Field(
        None,
        description="Flag indicating if the resource has been terminated",
        title="Resource Terminated",
    )
    date_of_change: Optional[datetime] = Field(
        None, description="The date of the last change", title="Date Of Change"
    )
    reason_for_closure: Optional[ChangeReason] = Field(
        None, description="The reason for closing the ticket"
    )
    post_policy_execution_last_run: Optional[datetime] = Field(
        None,
        description="The date of the last post policy execution run",
        title="Post Policy Execution Last Run",
    )
    last_run_id: UUID = Field(
        ...,
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: datetime = Field(
        ...,
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )
    first_run_at: datetime = Field(
        ...,
        description="Datetime of the first policy violation/anomaly run",
        title="First Run At",
    )
    created_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who created the ticket",
        title="Created By",
    )
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    ticket_closure_last_run: Optional[datetime] = Field(
        None,
        description="Datetime of the last ticket closure run, last time the ticket was triggered to be closed/verified_and_waited",
        title="Ticket Closure Last Run",
    )
    ticket_type: Optional[TicketType] = Field(
        "SYSTEM", description="Type of the ticket"
    )
    priority: Optional[Priority] = Field("LOW", description="Priority of the ticket")
    ticket_owner: Optional[UUID] = Field(
        None, description="Owner of the ticket", title="Ticket Owner"
    )
    impact_on_performance: Optional[ImpactOnPerformance] = Field(
        None, description="Impact of the ticket on performance"
    )
    downtime_required: Optional[float] = Field(
        None, description="Downtime required in hours", title="Downtime Required"
    )
    compatibility_issues: Optional[constr(max_length=50)] = Field(
        None,
        description="Description of compatibility issues",
        title="Compatibility Issues",
    )
    objective: Optional[str] = Field(
        None, description="Objective of the ticket", title="Objective"
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataOutput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None,
        description="Flag indicating if the manual closure was initiated",
        title="Manual Closure Initiated",
    )
    note: Optional[str] = Field(None, description="Note of the ticket", title="Note")
    id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Id"
    )
    status: Union[PolicyTicketStatus, AnomalyTicketStatus] = Field(
        ..., description="Status of the ticket", title="Status"
    )
    details: Union[
        TenantPolicyTicketDetailsMixin,
        TenantAnomalyTicketDetailsMixin,
        TenantCustomTicketDetailsOutput,
    ] = Field(..., description="Details of the ticket", title="Details")
    ticket_alias: Optional[int] = Field(
        None, description="the numeric ticket alias of the ticket", title="Ticket Alias"
    )
    trigger_id: UUID4 = Field(
        ...,
        description="The unique identifier of the trigger that created the ticket",
        title="Trigger Id",
    )


class UpdateTenantTicketAPIRequest(BaseModel):
    status: Optional[Union[PolicyTicketStatus, AnomalyTicketStatus]] = Field(
        None, description="Status of the ticket", title="Status"
    )
    assignment: Optional[TicketAssignment] = Field(
        None, description="Assignment state of the ticket"
    )
    details: Optional[
        Union[
            TenantPolicyTicketDetailsMixin,
            TenantAnomalyTicketDetailsMixin,
            TenantCustomTicketDetailsInput,
        ]
    ] = Field(None, description="Details of the ticket", title="Details")
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Resource attributes of the ticket", title="Entity Attributes"
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="Monthly unblended cost of the resource experiencing policy violation",
        title="Monthly Unblended Cost",
    )


class UpdateTenantTicketRequest(BaseModel):
    trigger_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Id"
    )
    status: Optional[Union[PolicyTicketStatus, AnomalyTicketStatus]] = Field(
        None, description="Status of the ticket", title="Status"
    )
    assignment: Optional[TicketAssignment] = Field(
        None, description="Assignment state of the ticket"
    )
    details: Optional[
        Union[
            TenantPolicyTicketDetailsMixin,
            TenantAnomalyTicketDetailsMixin,
            TenantCustomTicketDetailsInput,
        ]
    ] = Field(None, description="Details of the ticket", title="Details")
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Resource attributes of the ticket", title="Entity Attributes"
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="Monthly unblended cost of the resource experiencing policy violation",
        title="Monthly Unblended Cost",
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class ValidateNodeFiltersAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    resource_filters: List[HierarchyNodeResourceFilters] = Field(
        ..., description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: constr(max_length=200) = Field(
        ...,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    node_id: Optional[UUID4] = Field(
        None, description="The id of the node to be validated.", title="Node Id"
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )


class ViolationMetricsDetails(BaseModel):
    chart_title: str = Field(
        ..., description="The title of the chart.", title="Chart Title"
    )
    chart_type: str = Field(
        ..., description="The type of the chart.", title="Chart Type"
    )
    chart_data_tooltip: Optional[str] = Field(
        None, description="The tooltip for chart data", title="Chart Data Tooltip"
    )
    table_name: str = Field(
        ..., description="The name of the table.", title="Table Name"
    )
    metric_name: str = Field(
        ..., description="The name of the metric.", title="Metric Name"
    )
    aggregation_type: MetricsAggregationType = Field(
        ..., description="The aggregation type of the metric."
    )
    look_back_period: Optional[MetricsLookBackPeriod] = Field(
        None, description="The look back period of the metric."
    )
    filter: Optional[List[MetricChartFilters]] = Field(
        None, description="The filters for displaying the metrics", title="Filter"
    )
    threshold: Optional[MetricsThreshold] = Field(
        None, description="The threshold of the metric."
    )
    granularity_options: Optional[List[GranularityOptionOutput]] = Field(
        None,
        description="The granularity options for the metric.",
        title="Granularity Options",
    )
    query: MetricsQueryOutput = Field(..., description="Query for the metric")


class OnelensModelsServiceInterfacesTenantDataCloudwatchServiceTimeDimension(BaseModel):
    start_date: str = Field(
        ..., description="Start time in yyyy-MM-dd format", title="Start Date"
    )
    end_date: str = Field(
        ..., description="End time in yyyy-MM-dd format", title="End Date"
    )
    granularity: OnelensModelsServiceInterfacesTenantDataMetricsServiceGranularity = (
        Field(..., description="Time granularity")
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetHierarchyFlatResponse(
    BaseModel
):
    data: List[HierarchyNodeEntityWithDetails] = Field(
        ..., description="The data of the hierarchy.", title="Data"
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetHierarchyFlatResponse(
    BaseModel
):
    data: List[HierarchyNodeEntityWithDetails] = Field(
        ..., description="The data of the hierarchy.", title="Data"
    )


class OnelensUtilsApiUtilsApiResponseResponseGetHierarchyFlatResponse1(BaseModel):
    data: OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoV2GetHierarchyFlatResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class OnelensUtilsApiUtilsApiResponseResponseGetHierarchyFlatResponse2(BaseModel):
    data: OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetHierarchyFlatResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class OnelensUtilsApiUtilsApiResponseResponseGetHierarchyNodeByIdResponse1(BaseModel):
    data: GetHierarchyNodeByIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class OnelensUtilsApiUtilsApiResponseResponseGetHierarchyNodeByIdResponse2(BaseModel):
    data: GetHierarchyNodeByIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class BulkUpdateTenantTicketsAPIRequest(BaseModel):
    trigger_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Id"
    )
    ticket_ids: Optional[List[UUID]] = Field(
        [], description="List of ticket ids", title="Ticket Ids"
    )
    status: Optional[PolicyTicketStatus] = Field(
        None, description="Status of the ticket"
    )
    assignment: Optional[TicketUnassignment] = Field(
        None, description="Assignment state of the ticket"
    )
    assigned_to: Optional[str] = Field(
        None, description="Assignee of the ticket", title="Assigned To"
    )
    note: Optional[str] = Field(None, description="Comment of the ticket", title="Note")
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataInput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None, description="Manual closure initiated", title="Manual Closure Initiated"
    )
    priority: Optional[Priority] = Field(None, description="Priority of the ticket")
    ticket_owner: Optional[UUID] = Field(
        None, description="Owner of the ticket", title="Ticket Owner"
    )


class BulkUpdateTenantTicketsRequest(BaseModel):
    trigger_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Id"
    )
    ticket_ids: Optional[List[UUID]] = Field(
        [], description="List of ticket ids", title="Ticket Ids"
    )
    status: Optional[PolicyTicketStatus] = Field(
        None, description="Status of the ticket"
    )
    assignment: Optional[TicketUnassignment] = Field(
        None, description="Assignment state of the ticket"
    )
    assigned_to: Optional[str] = Field(
        None, description="Assignee of the ticket", title="Assigned To"
    )
    note: Optional[str] = Field(None, description="Comment of the ticket", title="Note")
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataInput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None, description="Manual closure initiated", title="Manual Closure Initiated"
    )
    priority: Optional[Priority] = Field(None, description="Priority of the ticket")
    ticket_owner: Optional[UUID] = Field(
        None, description="Owner of the ticket", title="Ticket Owner"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class BulkUpdateTenantTicketsRequestMixin(BaseModel):
    ticket_ids: Optional[List[UUID]] = Field(
        [], description="List of ticket ids", title="Ticket Ids"
    )
    status: Optional[PolicyTicketStatus] = Field(
        None, description="Status of the ticket"
    )
    assignment: Optional[TicketUnassignment] = Field(
        None, description="Assignment state of the ticket"
    )
    assigned_to: Optional[str] = Field(
        None, description="Assignee of the ticket", title="Assigned To"
    )
    note: Optional[str] = Field(None, description="Comment of the ticket", title="Note")
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataOutput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None, description="Manual closure initiated", title="Manual Closure Initiated"
    )
    priority: Optional[Priority] = Field(None, description="Priority of the ticket")
    ticket_owner: Optional[UUID] = Field(
        None, description="Owner of the ticket", title="Ticket Owner"
    )


class BulkUpdateTenantTicketsResponse(BaseModel):
    data: BulkUpdateTenantTicketsRequestMixin = Field(
        ..., description="Updated tickets data"
    )
    message: Optional[str] = Field(
        None, description="Message of the response", title="Message"
    )
    error: Optional[List[BulkUpdateTenantTicketsErrorMixin]] = Field(
        [], description="Error of the response", title="Error"
    )
    status_code: int = Field(
        ..., description="Status code of the response", title="Status Code"
    )
    trigger_id: Optional[UUID] = Field(
        None, description="Trigger id of the response", title="Trigger Id"
    )


class CURDataQuery(BaseModel):
    name: str = Field(..., title="Name")
    dimensions: Optional[List[str]] = Field([], title="Dimensions")
    measures: List[CURDataAggregationType] = Field(..., title="Measures")
    filters: List[OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria] = (
        Field(..., title="Filters")
    )
    time_filter: TimeFilterInput
    timezone: Optional[str] = Field("Asia/Kolkata", title="Timezone")


class ChartComponentData(BaseModel):
    cost_trend_usage_name: str = Field(..., title="Cost Trend Usage Name")
    query: ChartPayload


class CloudwatchMetricsRequest(BaseModel):
    region: str = Field(..., description="Region", title="Region")
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    cloud_watch_filter: CloudwatchMetric = Field(
        ..., description="CloudWatch filter criteria"
    )
    time_filter: OnelensModelsServiceInterfacesTenantDataCloudwatchServiceTimeDimension = Field(
        ..., description="Time range filter"
    )
    stat_type: StatType = Field(..., description="Statistical aggregation type")


class CreateCustomTenantTicketRequestMixin(BaseModel):
    monitor_id: Optional[UUID5] = Field(
        None, description="Violation monitor id/anomlay node id", title="Monitor Id"
    )
    ticket_category: Optional[TicketCategory] = Field(
        "CUSTOM_TICKET", description="Category of the ticket"
    )
    state: Optional[TicketState] = Field("OPEN", description="State of the ticket")
    entity_id: Optional[UUID] = Field(
        "00000000-0000-5000-8000-000000000000",
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_type: Optional[str] = Field(
        "CUSTOM_ENTITY_TYPE",
        description="The type of the resource experiencing policy violation.",
        title="Entity Type",
    )
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {},
        description="The attributes of the resource experiencing policy violation.",
        title="Entity Attributes",
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="The monthly unblended cost of the resource experiencing policy violation.",
        title="Monthly Unblended Cost",
    )
    assignment: Optional[TicketAssignment] = Field(
        "UNASSIGNED", description="Assignment state of the ticket"
    )
    assigned_to: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user the current ticket is assigned to",
        title="Assigned To",
    )
    is_config_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the configuration has changed",
        title="Is Config Changed",
    )
    policy_definition_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the policy definition has changed",
        title="Policy Definition Changed",
    )
    changed_from: Optional[str] = Field(
        None, description="The previous state of the resource", title="Changed From"
    )
    changed_to: Optional[str] = Field(
        None, description="The new state of the resource", title="Changed To"
    )
    resource_terminated: Optional[bool] = Field(
        None,
        description="Flag indicating if the resource has been terminated",
        title="Resource Terminated",
    )
    date_of_change: Optional[datetime] = Field(
        None, description="The date of the last change", title="Date Of Change"
    )
    reason_for_closure: Optional[ChangeReason] = Field(
        None, description="The reason for closing the ticket"
    )
    post_policy_execution_last_run: Optional[datetime] = Field(
        None,
        description="The date of the last post policy execution run",
        title="Post Policy Execution Last Run",
    )
    last_run_id: Optional[UUID4] = Field(
        "3ed0ebf0-5292-4d31-a598-e9ae22e9efeb",
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: Optional[datetime] = Field(
        "2025-07-21T17:21:06.648941",
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )
    first_run_at: Optional[datetime] = Field(
        "2025-07-21T17:21:06.648957",
        description="Datetime of the first policy violation/anomaly run",
        title="First Run At",
    )
    created_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who created the ticket",
        title="Created By",
    )
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    ticket_closure_last_run: Optional[datetime] = Field(
        None,
        description="Datetime of the last ticket closure run, last time the ticket was triggered to be closed/verified_and_waited",
        title="Ticket Closure Last Run",
    )
    ticket_type: Optional[TicketType] = Field(
        "SYSTEM", description="Type of the ticket"
    )
    priority: Optional[Priority] = Field("LOW", description="Priority of the ticket")
    ticket_owner: Optional[UUID] = Field(
        None, description="Owner of the ticket", title="Ticket Owner"
    )
    impact_on_performance: Optional[ImpactOnPerformance] = Field(
        None, description="Impact of the ticket on performance"
    )
    downtime_required: Optional[float] = Field(
        None, description="Downtime required in hours", title="Downtime Required"
    )
    compatibility_issues: Optional[constr(max_length=50)] = Field(
        None,
        description="Description of compatibility issues",
        title="Compatibility Issues",
    )
    objective: Optional[str] = Field(
        None, description="Objective of the ticket", title="Objective"
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataInput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None,
        description="Flag indicating if the manual closure was initiated",
        title="Manual Closure Initiated",
    )
    note: Optional[str] = Field(None, description="Note of the ticket", title="Note")
    status: Optional[PolicyTicketStatus] = Field(
        "TO_DO", description="Status of the ticket"
    )
    details: TenantCustomTicketDetailsInput = Field(
        ..., description="Request payload for ticket creation"
    )
    achieved_savings: Optional[TenantTicketAchievedSavingsMixin] = Field(
        None, description="Achieved savings details"
    )


class CreateCustomTenantTicketsApiRequest(BaseModel):
    new_ticket_details: CreateCustomTenantTicketRequestMixin = Field(
        ..., description="Request payload for ticket creation"
    )
    ticket_file_details: Optional[TicketFileDetails] = Field(
        None, description="Request payload for document upload"
    )


class CreateCustomTenantTicketsRequest(BaseModel):
    new_ticket_details: CreateCustomTenantTicketRequestMixin = Field(
        ..., description="Request payload for ticket creation"
    )
    ticket_file_details: Optional[TicketFileDetails] = Field(
        None, description="Request payload for document upload"
    )
    trigger_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who created the ticket",
        title="User Id",
    )


class CreatePolicyTemplateRequest(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsInput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsInput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class CreatePolicyTemplateResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class CreateSavedViewAPIRequest(BaseModel):
    name: constr(max_length=30) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3, max_length=30) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: SavedViewItemPayloadInput = Field(
        ..., description="Payload of the saved view"
    )


class CreateSavedViewRequest(BaseModel):
    name: constr(max_length=30) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3, max_length=30) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: SavedViewItemPayloadInput = Field(
        ..., description="Payload of the saved view"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class CreateSavedViewResponse(BaseModel):
    name: constr(min_length=3) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: SavedViewItemPayloadOutput = Field(
        ..., description="Payload of the saved view"
    )
    is_default: Optional[bool] = Field(
        False, description="Whether the saved view is default", title="Is Default"
    )
    is_system_defined: Optional[bool] = Field(
        False,
        description="Whether the saved view is system defined",
        title="Is System Defined",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )


class CreateTenantTicketRequestMixin(BaseModel):
    monitor_id: Optional[UUID5] = Field(
        None, description="Violation monitor id/anomlay node id", title="Monitor Id"
    )
    ticket_category: TicketCategory = Field(..., description="Category of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_type: str = Field(
        ...,
        description="The type of the resource experiencing policy violation.",
        title="Entity Type",
    )
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {},
        description="The attributes of the resource experiencing policy violation.",
        title="Entity Attributes",
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="The monthly unblended cost of the resource experiencing policy violation.",
        title="Monthly Unblended Cost",
    )
    assignment: TicketAssignment = Field(
        ..., description="Assignment state of the ticket"
    )
    assigned_to: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user the current ticket is assigned to",
        title="Assigned To",
    )
    is_config_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the configuration has changed",
        title="Is Config Changed",
    )
    policy_definition_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the policy definition has changed",
        title="Policy Definition Changed",
    )
    changed_from: Optional[str] = Field(
        None, description="The previous state of the resource", title="Changed From"
    )
    changed_to: Optional[str] = Field(
        None, description="The new state of the resource", title="Changed To"
    )
    resource_terminated: Optional[bool] = Field(
        None,
        description="Flag indicating if the resource has been terminated",
        title="Resource Terminated",
    )
    date_of_change: Optional[datetime] = Field(
        None, description="The date of the last change", title="Date Of Change"
    )
    reason_for_closure: Optional[ChangeReason] = Field(
        None, description="The reason for closing the ticket"
    )
    post_policy_execution_last_run: Optional[datetime] = Field(
        None,
        description="The date of the last post policy execution run",
        title="Post Policy Execution Last Run",
    )
    last_run_id: UUID = Field(
        ...,
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: datetime = Field(
        ...,
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )
    first_run_at: datetime = Field(
        ...,
        description="Datetime of the first policy violation/anomaly run",
        title="First Run At",
    )
    created_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who created the ticket",
        title="Created By",
    )
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    ticket_closure_last_run: Optional[datetime] = Field(
        None,
        description="Datetime of the last ticket closure run, last time the ticket was triggered to be closed/verified_and_waited",
        title="Ticket Closure Last Run",
    )
    ticket_type: Optional[TicketType] = Field(
        "SYSTEM", description="Type of the ticket"
    )
    priority: Optional[Priority] = Field("LOW", description="Priority of the ticket")
    ticket_owner: Optional[UUID] = Field(
        None, description="Owner of the ticket", title="Ticket Owner"
    )
    impact_on_performance: Optional[ImpactOnPerformance] = Field(
        None, description="Impact of the ticket on performance"
    )
    downtime_required: Optional[float] = Field(
        None, description="Downtime required in hours", title="Downtime Required"
    )
    compatibility_issues: Optional[constr(max_length=50)] = Field(
        None,
        description="Description of compatibility issues",
        title="Compatibility Issues",
    )
    objective: Optional[str] = Field(
        None, description="Objective of the ticket", title="Objective"
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataInput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None,
        description="Flag indicating if the manual closure was initiated",
        title="Manual Closure Initiated",
    )
    note: Optional[str] = Field(None, description="Note of the ticket", title="Note")
    status: Union[PolicyTicketStatus, AnomalyTicketStatus] = Field(
        ..., description="Status of the ticket", title="Status"
    )
    details: Union[
        TenantPolicyTicketDetailsMixin,
        TenantAnomalyTicketDetailsMixin,
        TenantCustomTicketDetailsInput,
    ] = Field(..., description="Request payload for ticket creation", title="Details")
    achieved_savings: Optional[TenantTicketAchievedSavingsMixin] = Field(
        None, description="Achieved savings details"
    )


class CreateTenantTicketsAPIRequest(BaseModel):
    new_ticket_details: List[CreateTenantTicketRequestMixin] = Field(
        ...,
        description="Request payload for ticket creation",
        title="New Ticket Details",
    )


class CreateTenantTicketsRequest(BaseModel):
    trigger_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Id"
    )
    new_ticket_details: List[CreateTenantTicketRequestMixin] = Field(
        ...,
        description="Request payload for ticket creation",
        title="New Ticket Details",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class DetailsMetadata(BaseModel):
    title: Optional[str] = Field(None, title="Title")
    evidence_data: Optional[List[Dict[str, str]]] = Field(None, title="Evidence Data")
    graph_data: Optional[ChartComponentData] = None


class FormattedTicketActivity(BaseModel):
    time: str = Field(..., description="Time in UTC format (HH:mm UTC)", title="Time")
    status: str = Field(..., description="Status of the ticket", title="Status")
    title: Optional[str] = Field("", description="Title of the activity", title="Title")
    note: Optional[str] = Field(
        "", description="Activity note or changelog data", title="Note"
    )
    details_metadata: Optional[
        Union[DetailsMetadata, TicketEditedDetails, TicketPriorityChangedDetails]
    ] = Field(None, description="Details of the activity", title="Details Metadata")


class GetAllTenantUsersItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    profile_pic_url: Optional[str] = Field(
        None, description="Profile picture URL of the user", title="Profile Pic Url"
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    nodes: List[HierarchyNodeEntityWithDetails] = Field(
        ...,
        description="Hierarchy nodes' details the user has access to",
        title="Nodes",
    )
    action_level: TenantUserActionLevel = Field(
        ..., description="Action that can be performed on this user"
    )


class GetCURDataCostTimeSeriesRequest(BaseModel):
    measures: List[CURDataAggregationType] = Field(..., title="Measures")
    filters: List[OnelensModelsServiceInterfacesTenantDataCurServiceFilterCriteria] = (
        Field(..., title="Filters")
    )
    time_filter: TimeFilterInput
    timestamp_field_name: TimeStampFieldName
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetCURDataQueryRequest(BaseModel):
    query: CURDataQuery


class GetDeltaEventsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        {"page": 1, "page_size": 10},
        description="Pagination parameters for the request.",
    )
    filters: GetDeltaEventsFilters
    current_user_id: Optional[UUID] = Field(
        None, description="Current user ID to filter events", title="Current User Id"
    )


class GetMappedResourceItem(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    resource_id: Optional[str] = Field(
        None, description="Id of the Resource", title="Resource Id"
    )
    resource_url_template: str = Field(
        ..., description="Resource url template", title="Resource Url Template"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")
    tags: Optional[Dict[str, Any]] = Field(
        None, description="Resource tags.", title="Tags"
    )
    additional_info: Dict[str, Any] = Field(
        ..., description="Additional info of the resource.", title="Additional Info"
    )
    run_id: Optional[UUID4] = Field(None, description="The run id.", title="Run Id")
    last_updated_at: Optional[datetime] = Field(
        None, description="The last updated at.", title="Last Updated At"
    )
    account_name: Optional[str] = Field(
        None, description="Cloud name of the account", title="Account Name"
    )
    tagged_resource: Optional[bool] = Field(
        False,
        description="true if the resource have tags tagged resource",
        title="Tagged Resource",
    )
    resource_created_at: Optional[datetime] = Field(
        None, description="The resource creation date", title="Resource Created At"
    )
    resource_updated_at: Optional[datetime] = Field(
        None, description="The resource updating date", title="Resource Updated At"
    )
    conflict_status: ValidateNodeFilterConflictStatus = Field(
        ..., description="conflict status"
    )
    mapped_to: List[HierarchyNodeEntityWithDetails] = Field(
        ...,
        description="The list of node ids to which the resource is mapped.",
        title="Mapped To",
    )


class GetMessagesResponse(BaseModel):
    messages: List[MessageOutput] = Field(
        ..., description="List of messages in the thread", title="Messages"
    )


class GetMetricsAPIRequest(BaseModel):
    query: MetricsQueryInput


class GetMetricsRequest(BaseModel):
    query: MetricsQueryInput
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetMutipleMetricsAPIRequest(BaseModel):
    queries: List[MetricsQueryInput] = Field(
        ..., description="The list of queries.", title="Queries"
    )


class GetMutipleMetricsRequest(BaseModel):
    queries: List[MetricsQueryInput] = Field(
        ..., description="The list of queries.", title="Queries"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetMutipleMetricsResponseMixin(BaseModel):
    query: MetricsQueryOutput = Field(..., description="Query for the metric")
    metrics: List[OnelensModelsServiceInterfacesTenantDataMetricsServiceMetric] = Field(
        ..., title="Metrics"
    )
    unit: str = Field(..., title="Unit")


class GetPipelineRunConfigResponse(BaseModel):
    tenants: Optional[Dict[str, TenantConfig]] = Field(
        None, description="Map of tenant ID to configurations", title="Tenants"
    )


class GetPolicyTemplateByAliasResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class GetPolicyTemplateByIDResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class GetS3OptimisationMetricsRequest(BaseModel):
    resource_id: str = Field(
        ..., description="The id of the resource.", title="Resource Id"
    )
    metrics_query: GetMetricsAPIRequest = Field(..., description="The metrics query.")
    tenant_id: Optional[UUID4] = Field(
        None, description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantAnomalySettingsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    anomaly_settings: List[TenantAnomalySettings] = Field(
        ..., description="List of tenant anomalies.", title="Anomaly Settings"
    )


class GetTenantPoliciesResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policies: List[TenantPolicy] = Field(
        ..., description="List of tenant policies.", title="Policies"
    )


class GetTenantPoliciesWithSettingsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policies_data: List[TenantPolicyWithSetting] = Field(
        ..., description="The list of policies with settings.", title="Policies Data"
    )


class GetTenantPolicyByIdResponse(BaseModel):
    features: Optional[FeaturesPolicyResponse] = Field(
        None, description="Features configuration"
    )
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    policy_template_id: UUID4 = Field(
        ..., description="The id of the policy template.", title="Policy Template Id"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    state: TenantPolicySystemState = Field(
        ..., description="The state of the tenant policy."
    )


class GetTenantPolicyWithSummaryResponse(BaseModel):
    policy: TenantPolicyWithPolicyDisplayAlias = Field(
        ..., description="The policy details."
    )
    recommendation_units: List[str] = Field(
        ...,
        description="List of recommendation units names.",
        title="Recommendation Units",
    )


class GetTenantUserByIDResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    profile_pic_url: Optional[str] = Field(
        None, description="Profile picture URL of the user", title="Profile Pic Url"
    )
    last_login: Optional[datetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    created_at: Optional[datetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    node_ids: List[UUID4] = Field(
        ...,
        description="Hierarchy node ids(cost centers) the user has access to.",
        title="Node Ids",
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")
    nodes: List[HierarchyNodeEntityWithDetails] = Field(
        ...,
        description="Hierarchy nodes' details the user has access to",
        title="Nodes",
    )


class GetTenantUsersWithFilterResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    users: List[GetAllTenantUsersItem] = Field(
        ..., description="List of tenant users", title="Users"
    )


class GetTicketByIdPolicyDetailsResponse(BaseModel):
    tenant_ticket: TenantTicketWithTicketAlias = Field(
        ..., description="Tenant ticket details"
    )
    achieved_savings_details: Optional[AchievedSavingsDetails] = Field(
        None, description="Achieved savings details"
    )
    violation_closure_details: Optional[ViolationClosureDetails] = Field(
        None, description="Violation closure details"
    )
    policy_details: TenantPolicyWithPolicyDisplayAlias = Field(
        ..., description="Policy details"
    )
    recommendation_units: List[str] = Field(
        ..., description="List of recommendation units", title="Recommendation Units"
    )
    hierarchy_details: Optional[Dict[str, Any]] = Field(
        None, description="The resource hierarchy details", title="Hierarchy Details"
    )
    resource_details: Dict[str, Any] = Field(
        ..., description="The resource details", title="Resource Details"
    )
    violation_metrics_details: List[ViolationMetricsDetails] = Field(
        ...,
        description="The violation metrics details",
        title="Violation Metrics Details",
    )
    account_details: Dict[str, Any] = Field(
        ..., description="The account details", title="Account Details"
    )
    features: Optional[FeaturesPolicyResponse] = Field(
        None, description="Features configuration"
    )


class PolicyTemplate(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    activated_at: Optional[datetime] = Field(
        None, description="activated at timestamp", title="Activated At"
    )
    risk: Optional[str] = Field(
        None, description="The risk of the policy template.", title="Risk"
    )
    subcategory: Optional[str] = Field(
        None, description="The subcategory of the policy template.", title="Subcategory"
    )
    change_type: Optional[str] = Field(
        None, description="The change type of the policy template.", title="Change Type"
    )
    effort: Optional[str] = Field(
        None, description="The effort of the policy template.", title="Effort"
    )
    closure_method: Optional[PolicyClosureMethod] = Field(
        None, description="The closure method of the policy template."
    )
    resource_identifiers: Optional[str] = Field(
        None,
        description="The resource identifiers of the policy template.",
        title="Resource Identifiers",
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class ResponseCreatePolicyTemplateResponse(BaseModel):
    data: CreatePolicyTemplateResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseCreateSavedViewResponse(BaseModel):
    data: CreateSavedViewResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPolicyTemplateByIDResponse(BaseModel):
    data: GetPolicyTemplateByIDResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantAnomalySettingsResponse(BaseModel):
    data: GetTenantAnomalySettingsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantPoliciesResponse(BaseModel):
    data: GetTenantPoliciesResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantPoliciesWithSettingsResponse(BaseModel):
    data: GetTenantPoliciesWithSettingsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantPolicyByIdResponse(BaseModel):
    data: GetTenantPolicyByIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantUserByIDResponse(BaseModel):
    data: GetTenantUserByIDResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantUsersWithFilterResponse(BaseModel):
    data: GetTenantUsersWithFilterResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTicketByIdPolicyDetailsResponse(BaseModel):
    data: GetTicketByIdPolicyDetailsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseSendMessageResponse(BaseModel):
    data: SendMessageResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdatePolicyTemplateResponse(BaseModel):
    data: UpdatePolicyTemplateResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateSavedViewResponse(BaseModel):
    data: UpdateSavedViewResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseUpdateSingleTenantTicketResponse(BaseModel):
    data: UpdateSingleTenantTicketResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class SavedViewItem(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the saved view", title="Id"
    )
    name: constr(min_length=3) = Field(
        ..., description="Name of the saved view", title="Name"
    )
    page: constr(min_length=3) = Field(
        ..., description="Page of the saved view", title="Page"
    )
    payload: SavedViewItemPayloadOutput = Field(
        ..., description="Payload of the saved view"
    )
    is_default: Optional[bool] = Field(
        False, description="Whether the saved view is default", title="Is Default"
    )
    is_system_defined: Optional[bool] = Field(
        False,
        description="Whether the saved view is system defined",
        title="Is System Defined",
    )
    created_at: datetime = Field(..., description="Created at", title="Created At")
    updated_at: datetime = Field(..., description="Updated at", title="Updated At")


class TenantTicket(BaseModel):
    created_at: datetime = Field(
        ..., description="Datetime of ticket creation", title="Created At"
    )
    updated_at: datetime = Field(
        ..., description="Datetime of ticket updation", title="Updated At"
    )
    monitor_id: Optional[UUID5] = Field(
        None, description="Violation monitor id/anomlay node id", title="Monitor Id"
    )
    ticket_category: TicketCategory = Field(..., description="Category of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_type: str = Field(
        ...,
        description="The type of the resource experiencing policy violation.",
        title="Entity Type",
    )
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {},
        description="The attributes of the resource experiencing policy violation.",
        title="Entity Attributes",
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="The monthly unblended cost of the resource experiencing policy violation.",
        title="Monthly Unblended Cost",
    )
    assignment: TicketAssignment = Field(
        ..., description="Assignment state of the ticket"
    )
    assigned_to: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user the current ticket is assigned to",
        title="Assigned To",
    )
    is_config_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the configuration has changed",
        title="Is Config Changed",
    )
    policy_definition_changed: Optional[bool] = Field(
        None,
        description="Flag indicating if the policy definition has changed",
        title="Policy Definition Changed",
    )
    changed_from: Optional[str] = Field(
        None, description="The previous state of the resource", title="Changed From"
    )
    changed_to: Optional[str] = Field(
        None, description="The new state of the resource", title="Changed To"
    )
    resource_terminated: Optional[bool] = Field(
        None,
        description="Flag indicating if the resource has been terminated",
        title="Resource Terminated",
    )
    date_of_change: Optional[datetime] = Field(
        None, description="The date of the last change", title="Date Of Change"
    )
    reason_for_closure: Optional[ChangeReason] = Field(
        None, description="The reason for closing the ticket"
    )
    post_policy_execution_last_run: Optional[datetime] = Field(
        None,
        description="The date of the last post policy execution run",
        title="Post Policy Execution Last Run",
    )
    last_run_id: UUID = Field(
        ...,
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: datetime = Field(
        ...,
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )
    first_run_at: datetime = Field(
        ...,
        description="Datetime of the first policy violation/anomaly run",
        title="First Run At",
    )
    created_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who created the ticket",
        title="Created By",
    )
    updated_by: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who updated the ticket",
        title="Updated By",
    )
    ticket_closure_last_run: Optional[datetime] = Field(
        None,
        description="Datetime of the last ticket closure run, last time the ticket was triggered to be closed/verified_and_waited",
        title="Ticket Closure Last Run",
    )
    ticket_type: Optional[TicketType] = Field(
        "SYSTEM", description="Type of the ticket"
    )
    priority: Optional[Priority] = Field("LOW", description="Priority of the ticket")
    ticket_owner: Optional[UUID] = Field(
        None, description="Owner of the ticket", title="Ticket Owner"
    )
    impact_on_performance: Optional[ImpactOnPerformance] = Field(
        None, description="Impact of the ticket on performance"
    )
    downtime_required: Optional[float] = Field(
        None, description="Downtime required in hours", title="Downtime Required"
    )
    compatibility_issues: Optional[constr(max_length=50)] = Field(
        None,
        description="Description of compatibility issues",
        title="Compatibility Issues",
    )
    objective: Optional[str] = Field(
        None, description="Objective of the ticket", title="Objective"
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataOutput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None,
        description="Flag indicating if the manual closure was initiated",
        title="Manual Closure Initiated",
    )
    note: Optional[str] = Field(None, description="Note of the ticket", title="Note")
    id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Id"
    )
    status: Union[PolicyTicketStatus, AnomalyTicketStatus] = Field(
        ..., description="Status of the ticket", title="Status"
    )
    details: Union[
        TenantPolicyTicketDetailsMixin,
        TenantAnomalyTicketDetailsMixin,
        TenantCustomTicketDetailsOutput,
    ] = Field(..., description="Details of the ticket", title="Details")
    ticket_alias: Optional[int] = Field(
        None, description="the numeric ticket alias of the ticket", title="Ticket Alias"
    )
    trigger_id: UUID4 = Field(
        ...,
        description="The unique identifier of the trigger that created the ticket",
        title="Trigger Id",
    )


class TenantTicketClosureEvidenceMixin(BaseModel):
    cur_metrics_query: CURDataQuery
    cur_metrics_data: GetCURDataMetricsResponse


class UpdateCustomTenantTicketApiRequest(BaseModel):
    updated_ticket_details: CreateCustomTenantTicketRequestMixin = Field(
        ..., description="Request payload for ticket updation"
    )
    ticket_file_details: Optional[TicketFileDetails] = Field(
        None, description="Request payload for document upload"
    )


class UpdateCustomTenantTicketRequest(BaseModel):
    updated_ticket_details: CreateCustomTenantTicketRequestMixin = Field(
        ..., description="Request payload for ticket updation"
    )
    ticket_file_details: Optional[TicketFileDetails] = Field(
        None, description="Request payload for document upload"
    )
    trigger_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    user_id: Optional[UUID4] = Field(
        "00000000-0000-4000-8000-000000000000",
        description="User who created the ticket",
        title="User Id",
    )
    ticket_id: UUID4 = Field(..., description="Id of the ticket", title="Ticket Id")


class UpdateTenantTicketRequestMixin(BaseModel):
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    status: Optional[Union[PolicyTicketStatus, AnomalyTicketStatus]] = Field(
        None, description="Status of the ticket", title="Status"
    )
    details: Optional[
        Union[
            TenantPolicyTicketDetailsMixin,
            TenantAnomalyTicketDetailsMixin,
            TenantCustomTicketDetailsInput,
        ]
    ] = Field(None, description="Details of the ticket", title="Details")
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Resource attributes of the ticket", title="Entity Attributes"
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="Monthly unblended cost of the resource experiencing policy violation",
        title="Monthly Unblended Cost",
    )
    cost_impact: Optional[float] = Field(
        None,
        description="Cost impact of the current violation/anomaly responsible for the ticket",
        title="Cost Impact",
    )
    last_run_id: Optional[UUID4] = Field(
        None,
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: Optional[datetime] = Field(
        None,
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )
    note: Optional[str] = Field(None, description="Note for the ticket", title="Note")
    is_config_changed: Optional[bool] = Field(
        None,
        description="Whether the policy configuration has changed",
        title="Is Config Changed",
    )
    policy_definition_changed: Optional[bool] = Field(
        None,
        description="Whether the policy definition has changed",
        title="Policy Definition Changed",
    )
    changed_from: Optional[str] = Field(
        None, description="Previous state before the change", title="Changed From"
    )
    changed_to: Optional[str] = Field(
        None, description="Current state after the change", title="Changed To"
    )
    resource_terminated: Optional[bool] = Field(
        None,
        description="Whether the resource has been terminated",
        title="Resource Terminated",
    )
    date_of_change: Optional[datetime] = Field(
        None, description="Date when the change occurred", title="Date Of Change"
    )
    reason_for_closure: Optional[str] = Field(
        None, description="Reason for closing the ticket", title="Reason For Closure"
    )
    ticket_closure_last_run: Optional[datetime] = Field(
        None,
        description="Last time the ticket closure was processed",
        title="Ticket Closure Last Run",
    )
    post_policy_execution_last_run: Optional[datetime] = Field(
        None,
        description="Last time the post-policy execution was run",
        title="Post Policy Execution Last Run",
    )
    achieved_savings: Optional[TenantTicketAchievedSavingsMixin] = Field(
        None, description="Achieved savings details"
    )
    closure_evidence: Optional[TenantTicketClosureEvidenceMixin] = Field(
        None, description="Closure evidence details"
    )
    manual_closure_metadata: Optional[TenantTicketManualClosureMetadataInput] = Field(
        None, description="Manual closure metadata"
    )
    manual_closure_initiated: Optional[bool] = Field(
        None,
        description="Flag indicating if the manual closure was initiated",
        title="Manual Closure Initiated",
    )


class UpdateTenantTicketsAPIRequest(BaseModel):
    updated_ticket_details: List[UpdateTenantTicketRequestMixin] = Field(
        ...,
        description="Request payload for ticket updation",
        title="Updated Ticket Details",
    )


class UpdateTenantTicketsRequest(BaseModel):
    trigger_id: Optional[UUID4] = Field(
        None, description="The unique identifier of the trigger", title="Trigger Id"
    )
    updated_ticket_details: List[UpdateTenantTicketRequestMixin] = Field(
        ...,
        description="Request payload for ticket updation",
        title="Updated Ticket Details",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetMappedResourcesResponse(
    BaseModel
):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    resources: List[GetMappedResourceItem] = Field(
        ..., description="List of mapped resources.", title="Resources"
    )


class OnelensUtilsApiUtilsApiResponseResponseGetMappedResourcesResponse2(BaseModel):
    data: OnelensModelsServiceInterfacesTenantMetadataHierarchyNodeDtoGetMappedResourcesResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class BulkUpdateTenantTicketsAPIResponse(BaseModel):
    data: BulkUpdateTenantTicketsRequestMixin = Field(
        ..., description="Updated tickets data"
    )
    error: Optional[List[BulkUpdateTenantTicketsErrorMixin]] = Field(
        [], description="Error of the response", title="Error"
    )


class DailyFormattedActivities(BaseModel):
    date: str = Field(..., description="Date in generic format", title="Date")
    data: Optional[List[FormattedTicketActivity]] = Field(
        None, description="List of activities for the given date", title="Data"
    )


class GetFormattedTicketActivitiesApiResponse(BaseModel):
    activities: Optional[List[DailyFormattedActivities]] = Field(
        None, description="List of daily activities", title="Activities"
    )


class GetFormattedTicketActivitiesResponse(BaseModel):
    activities: Optional[List[DailyFormattedActivities]] = Field(
        None, description="List of daily activities", title="Activities"
    )


class GetMutipleMetricsResponse(BaseModel):
    metrics: List[GetMutipleMetricsResponseMixin] = Field(..., title="Metrics")


class GetPolicyTemplatesResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_templates: List[PolicyTemplate] = Field(
        ..., description="List of policy templates.", title="Policy Templates"
    )


class GetSavedViewsResponse(BaseModel):
    saved_views: List[SavedViewItem] = Field(
        ..., description="List of saved views", title="Saved Views"
    )


class GetTenantCustomTicketDetailsResponse(BaseModel):
    custom_ticket: TenantTicket
    resource_details: Dict[str, CustomTicketResourceDetails] = Field(
        ..., title="Resource Details"
    )


class GetTenantTicketsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    tenant_tickets: List[TenantTicket] = Field(
        ..., description="List of tickets of the tenant", title="Tenant Tickets"
    )


class GetTicketMetadataForClosureResponse(BaseModel):
    ticket_data: TenantTicket = Field(..., description="Data of the ticket")
    policy_data: TenantPolicy = Field(..., description="Data of the policy")
    resource_data: ResourceCatalog = Field(..., description="Data of the resource")


class GetUserCustomTicketByIdResponse(BaseModel):
    custom_ticket: TenantTicket


class ResponseBulkUpdateTenantTicketsAPIResponse(BaseModel):
    data: BulkUpdateTenantTicketsAPIResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetFormattedTicketActivitiesApiResponse(BaseModel):
    data: GetFormattedTicketActivitiesApiResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetPolicyTemplatesResponse(BaseModel):
    data: GetPolicyTemplatesResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetSavedViewsResponse(BaseModel):
    data: GetSavedViewsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantCustomTicketDetailsResponse(BaseModel):
    data: GetTenantCustomTicketDetailsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTenantTicketsResponse(BaseModel):
    data: GetTenantTicketsResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetTicketMetadataForClosureResponse(BaseModel):
    data: GetTicketMetadataForClosureResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


class ResponseGetUserCustomTicketByIdResponse(BaseModel):
    data: GetUserCustomTicketByIdResponse
    message: Optional[str] = Field(None, title="Message")
    status_code: Optional[int] = Field(200, title="Status Code")


GroupData.model_rebuild()
