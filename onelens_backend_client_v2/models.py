# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2024-07-31T17:30:45+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import (
    UUID4,
    UUID5,
    AnyUrl,
    AwareDatetime,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    constr,
)
from typing_extensions import Literal


class ActivatePolicyTemplateRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class ActivatePolicyTemplateResponse(BaseModel):
    pass


class AndItem(BaseModel):
    gte: Optional[List] = Field(None, title="Gte")
    gt: Optional[List] = Field(None, title="Gt")


class AnomalyRcaIdsMixin(BaseModel):
    anomaly_id: UUID5 = Field(
        ..., description="The unique identifier of the anomaly", title="Anomaly Id"
    )
    rca_ids: List[UUID5] = Field(
        ..., description="List of rca ids associated with the anomaly", title="Rca Ids"
    )
    actual_cost: float = Field(
        ...,
        description="Actual cost of the resource because of the anomaly",
        title="Actual Cost",
    )
    expected_cost: float = Field(
        ...,
        description="Expected cost of the resource without the anomaly",
        title="Expected Cost",
    )


class AnomalySourceType(Enum):
    USAGE = "USAGE"
    RESOURCE_CREATION = "RESOURCE_CREATION"
    RESOURCE_MODIFICATION = "RESOURCE_MODIFICATION"
    DATA_TRANSFER = "DATA_TRANSFER"


class AnomalyTicketStatus(Enum):
    OPEN = "OPEN"
    ACKNOWLEDGED = "ACKNOWLEDGED"
    INVALID = "INVALID"
    CLOSED = "CLOSED"


class Auth0UserAllFields(BaseModel):
    email: Optional[EmailStr] = Field(
        None, description="The email of the user in Auth0.", title="Email"
    )
    email_verified: Optional[bool] = Field(
        None,
        description="The email_verified of the user in Auth0.",
        title="Email Verified",
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="The created_at of the user in Auth0.", title="Created At"
    )
    identities: Optional[List] = Field(
        None, description="The identities of the user in Auth0.", title="Identities"
    )
    name: Optional[str] = Field(
        None, description="The name of the user in Auth0.", title="Name"
    )
    nickname: Optional[str] = Field(
        None, description="The nickname of the user in Auth0.", title="Nickname"
    )
    picture: Optional[str] = Field(
        None, description="The picture of the user in Auth0.", title="Picture"
    )
    updated_at: Optional[AwareDatetime] = Field(
        None, description="The updated_at of the user in Auth0.", title="Updated At"
    )
    user_id: str = Field(
        ..., description="The user_id of the user in Auth0.", title="User Id"
    )
    user_metadata: Optional[Dict[str, Any]] = Field(
        {}, description="The user_metadata of the user in Auth0.", title="User Metadata"
    )
    app_metadata: Optional[Dict[str, Any]] = Field(
        {}, description="The app_metadata of the user in Auth0.", title="App Metadata"
    )
    last_ip: Optional[str] = Field(
        None, description="The last_ip of the user in Auth0.", title="Last Ip"
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="The last_login of the user in Auth0.", title="Last Login"
    )
    logins_count: Optional[int] = Field(
        None, description="The logins_count of the user in Auth0.", title="Logins Count"
    )
    given_name: Optional[str] = Field(
        None, description="The given_name of the user in Auth0.", title="Given Name"
    )
    family_name: Optional[str] = Field(
        None, description="The family_name of the user in Auth0.", title="Family Name"
    )


class Auth0UserConnection(RootModel[Literal["Username-Password-Authentication"]]):
    root: Literal["Username-Password-Authentication"] = Field(
        ..., title="Auth0UserConnection"
    )


class AwsService(Enum):
    aws_ec2 = "aws_ec2"
    aws_ebs = "aws_ebs"
    aws_rds = "aws_rds"
    aws_s3 = "aws_s3"
    aws_dynamodb = "aws_dynamodb"
    aws_elasticache = "aws_elasticache"
    aws_es = "aws_es"
    aws_cloudwatch = "aws_cloudwatch"
    aws_elasticloadbalancing = "aws_elasticloadbalancing"
    aws_vpc = "aws_vpc"
    aws_account = "aws_account"
    aws_amplifybackend = "aws_amplifybackend"
    aws_amplifyuibuilder = "aws_amplifyuibuilder"
    aws_amplify = "aws_amplify"
    aws_appmesh = "aws_appmesh"
    aws_apprunner = "aws_apprunner"
    aws_a2c = "aws_a2c"
    aws_appconfig = "aws_appconfig"
    aws_appfabric = "aws_appfabric"
    aws_appsync = "aws_appsync"
    aws_mgn = "aws_mgn"
    aws_artifact = "aws_artifact"
    aws_auditmanager = "aws_auditmanager"
    aws_backup = "aws_backup"
    aws_batch = "aws_batch"
    aws_billingconductor = "aws_billingconductor"
    aws_budgets = "aws_budgets"
    aws_bugbust = "aws_bugbust"
    aws_acm = "aws_acm"
    aws_chatbot = "aws_chatbot"
    aws_cleanrooms = "aws_cleanrooms"
    aws_servicediscovery = "aws_servicediscovery"
    aws_cloud9 = "aws_cloud9"
    aws_cloudformation = "aws_cloudformation"
    aws_cloudhsm = "aws_cloudhsm"
    aws_cloudshell = "aws_cloudshell"
    aws_cloudtrail = "aws_cloudtrail"
    aws_rum = "aws_rum"
    aws_codeartifact = "aws_codeartifact"
    aws_codebuild = "aws_codebuild"
    aws_codecommit = "aws_codecommit"
    aws_codedeploy = "aws_codedeploy"
    aws_codepipeline = "aws_codepipeline"
    aws_codestar = "aws_codestar"
    aws_config = "aws_config"
    aws_awsconnector = "aws_awsconnector"
    aws_consoleapp = "aws_consoleapp"
    aws_consolidatedbilling = "aws_consolidatedbilling"
    aws_controltower = "aws_controltower"
    aws_ce = "aws_ce"
    aws_cur = "aws_cur"
    aws_dataexchange = "aws_dataexchange"
    aws_datapipeline = "aws_datapipeline"
    aws_datasync = "aws_datasync"
    aws_dms = "aws_dms"
    aws_deepcomposer = "aws_deepcomposer"
    aws_deeplens = "aws_deeplens"
    aws_deepracer = "aws_deepracer"
    aws_devicefarm = "aws_devicefarm"
    aws_directconnect = "aws_directconnect"
    aws_ds = "aws_ds"
    aws_elasticbeanstalk = "aws_elasticbeanstalk"
    aws_drs = "aws_drs"
    aws_mediaconnect = "aws_mediaconnect"
    aws_mediaconvert = "aws_mediaconvert"
    aws_medialive = "aws_medialive"
    aws_mediapackagev2 = "aws_mediapackagev2"
    aws_mediapackage = "aws_mediapackage"
    aws_mediastore = "aws_mediastore"
    aws_mediatailor = "aws_mediatailor"
    aws_entityresolution = "aws_entityresolution"
    aws_fis = "aws_fis"
    aws_fms = "aws_fms"
    aws_globalaccelerator = "aws_globalaccelerator"
    aws_databrew = "aws_databrew"
    aws_glue = "aws_glue"
    aws_groundstation = "aws_groundstation"
    aws_health = "aws_health"
    aws_healthlake = "aws_healthlake"
    aws_omics = "aws_omics"
    aws_sso = "aws_sso"
    aws_iq = "aws_iq"
    aws_identitystore = "aws_identitystore"
    aws_iam = "aws_iam"
    aws_rolesanywhere = "aws_rolesanywhere"
    aws_iot1click = "aws_iot1click"
    aws_iotanalytics = "aws_iotanalytics"
    aws_iotdeviceadvisor = "aws_iotdeviceadvisor"
    aws_iotevents = "aws_iotevents"
    aws_iotfleethub = "aws_iotfleethub"
    aws_iotfleetwise = "aws_iotfleetwise"
    aws_greengrass = "aws_greengrass"
    aws_iotjobsdata = "aws_iotjobsdata"
    aws_iotroborunner = "aws_iotroborunner"
    aws_iotsitewise = "aws_iotsitewise"
    aws_iottwinmaker = "aws_iottwinmaker"
    aws_iotwireless = "aws_iotwireless"
    aws_iot = "aws_iot"
    aws_kms = "aws_kms"
    aws_lakeformation = "aws_lakeformation"
    aws_lambda = "aws_lambda"
    aws_m2 = "aws_m2"
    aws_serviceextract = "aws_serviceextract"
    aws_mapcredits = "aws_mapcredits"
    aws_mgh = "aws_mgh"
    aws_mobilehub = "aws_mobilehub"
    aws_networkmanager = "aws_networkmanager"
    aws_opsworks = "aws_opsworks"
    aws_organizations = "aws_organizations"
    aws_outposts = "aws_outposts"
    aws_panorama = "aws_panorama"
    aws_pi = "aws_pi"
    aws_proton = "aws_proton"
    aws_rbin = "aws_rbin"
    aws_resiliencehub = "aws_resiliencehub"
    aws_ram = "aws_ram"
    aws_robomaker = "aws_robomaker"
    aws_sqlworkbench = "aws_sqlworkbench"
    aws_savingsplans = "aws_savingsplans"
    aws_secretsmanager = "aws_secretsmanager"
    aws_securityhub = "aws_securityhub"
    aws_sts = "aws_sts"
    aws_sms = "aws_sms"
    aws_serverlessrepo = "aws_serverlessrepo"
    aws_servicecatalog = "aws_servicecatalog"
    aws_shield = "aws_shield"
    aws_signer = "aws_signer"
    aws_simspaceweaver = "aws_simspaceweaver"
    aws_states = "aws_states"
    aws_storagegateway = "aws_storagegateway"
    aws_scn = "aws_scn"
    aws_supportplans = "aws_supportplans"
    aws_sustainability = "aws_sustainability"
    aws_ssm = "aws_ssm"
    aws_tnb = "aws_tnb"
    aws_tiros = "aws_tiros"
    aws_transfer = "aws_transfer"
    aws_trustedadvisor = "aws_trustedadvisor"
    aws_notifications = "aws_notifications"
    aws_wafv2 = "aws_wafv2"
    aws_waf = "aws_waf"
    aws_wellarchitected = "aws_wellarchitected"
    aws_wickr = "aws_wickr"
    aws_xray = "aws_xray"
    aws_a4b = "aws_a4b"
    aws_apigateway = "aws_apigateway"
    aws_appflow = "aws_appflow"
    aws_appstream = "aws_appstream"
    aws_athena = "aws_athena"
    aws_bedrock = "aws_bedrock"
    aws_braket = "aws_braket"
    aws_chime = "aws_chime"
    aws_clouddirectory = "aws_clouddirectory"
    aws_cloudfront = "aws_cloudfront"
    aws_cloudsearch = "aws_cloudsearch"
    aws_evidently = "aws_evidently"
    aws_internetmonitor = "aws_internetmonitor"
    aws_logs = "aws_logs"
    aws_oam = "aws_oam"
    aws_synthetics = "aws_synthetics"
    aws_codecatalyst = "aws_codecatalyst"
    aws_codeguru = "aws_codeguru"
    aws_codewhisperer = "aws_codewhisperer"
    aws_comprehendmedical = "aws_comprehendmedical"
    aws_comprehend = "aws_comprehend"
    aws_cases = "aws_cases"
    aws_profile = "aws_profile"
    aws_voiceid = "aws_voiceid"
    aws_wisdom = "aws_wisdom"
    aws_connect = "aws_connect"
    aws_dlm = "aws_dlm"
    aws_datazonecontrol = "aws_datazonecontrol"
    aws_datazone = "aws_datazone"
    aws_detective = "aws_detective"
    aws_dax = "aws_dax"
    aws_autoscaling = "aws_autoscaling"
    aws_imagebuilder = "aws_imagebuilder"
    aws_ecr = "aws_ecr"
    aws_ecs = "aws_ecs"
    aws_elasticfilesystem = "aws_elasticfilesystem"
    aws_eks = "aws_eks"
    aws_elasticmapreduce = "aws_elasticmapreduce"
    aws_elastictranscoder = "aws_elastictranscoder"
    aws_pipes = "aws_pipes"
    aws_scheduler = "aws_scheduler"
    aws_schemas = "aws_schemas"
    aws_events = "aws_events"
    aws_fsx = "aws_fsx"
    aws_finspace = "aws_finspace"
    aws_forecast = "aws_forecast"
    aws_frauddetector = "aws_frauddetector"
    aws_freertos = "aws_freertos"
    aws_gamelift = "aws_gamelift"
    aws_gamesparks = "aws_gamesparks"
    aws_groundtruthlabeling = "aws_groundtruthlabeling"
    aws_guardduty = "aws_guardduty"
    aws_honeycode = "aws_honeycode"
    aws_inspector2 = "aws_inspector2"
    aws_ivschat = "aws_ivschat"
    aws_ivs = "aws_ivs"
    aws_kendra = "aws_kendra"
    aws_cassandra = "aws_cassandra"
    aws_kinesisanalytics = "aws_kinesisanalytics"
    aws_kinesis = "aws_kinesis"
    aws_firehose = "aws_firehose"
    aws_kinesisvideo = "aws_kinesisvideo"
    aws_lex = "aws_lex"
    aws_lightsail = "aws_lightsail"
    aws_geo = "aws_geo"
    aws_lookoutequipment = "aws_lookoutequipment"
    aws_lookoutmetrics = "aws_lookoutmetrics"
    aws_lookoutvision = "aws_lookoutvision"
    aws_mq = "aws_mq"
    aws_machinelearning = "aws_machinelearning"
    aws_macie2 = "aws_macie2"
    aws_managedblockchain = "aws_managedblockchain"
    aws_grafana = "aws_grafana"
    aws_aps = "aws_aps"
    aws_kafka = "aws_kafka"
    aws_kafkaconnect = "aws_kafkaconnect"
    aws_airflow = "aws_airflow"
    aws_memorydb = "aws_memorydb"
    aws_monitron = "aws_monitron"
    aws_nimble = "aws_nimble"
    aws_osis = "aws_osis"
    aws_aoss = "aws_aoss"
    aws_personalize = "aws_personalize"
    aws_mobiletargeting = "aws_mobiletargeting"
    aws_polly = "aws_polly"
    aws_qldb = "aws_qldb"
    aws_quicksight = "aws_quicksight"
    aws_rhelkb = "aws_rhelkb"
    aws_redshift = "aws_redshift"
    aws_rekognition = "aws_rekognition"
    aws_route53resolver = "aws_route53resolver"
    aws_route53 = "aws_route53"
    aws_glacier = "aws_glacier"
    aws_ses = "aws_ses"
    aws_sns = "aws_sns"
    aws_sqs = "aws_sqs"
    aws_sagemaker = "aws_sagemaker"
    aws_securitylake = "aws_securitylake"
    aws_swf = "aws_swf"
    aws_sdb = "aws_sdb"
    aws_textract = "aws_textract"
    aws_timestream = "aws_timestream"
    aws_transcribe = "aws_transcribe"
    aws_translate = "aws_translate"
    aws_verifiedpermissions = "aws_verifiedpermissions"
    aws_worklink = "aws_worklink"
    aws_workmailmessageflow = "aws_workmailmessageflow"
    aws_workmail = "aws_workmail"
    aws_workspaces = "aws_workspaces"
    aws_mediaimport = "aws_mediaimport"
    aws_dbqms = "aws_dbqms"
    aws_servicequotas = "aws_servicequotas"


class BulkUpdateTenantTicketsErrorMixin(BaseModel):
    ticket_id: UUID = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    description: str = Field(
        ..., description="Description of the error", title="Description"
    )
    code: int = Field(..., description="Status code of the error", title="Code")


class CreateDefaultHierarchyRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class CreateDefaultHierarchyResponse(BaseModel):
    pass


class CreateHierarchyRootNodeAPIRequest(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")


class CreateHierarchyRootNodeRequest(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class CreateHierarchyRootNodeResponse(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    name: constr(max_length=30) = Field(..., title="Name")


class CreateOrganizationRequest(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the organization", title="Name"
    )


class CreatePolicyTemplatePullRequest(BaseModel):
    title: str = Field(..., description="The title of the pull request.", title="Title")
    description: str = Field(
        ..., description="The description of the pull request.", title="Description"
    )
    source_branch: str = Field(
        ..., description="The source branch of the pull request.", title="Source Branch"
    )
    branch_name: str = Field(
        ..., description="The branch name of the pull request.", title="Branch Name"
    )
    alias: str = Field(
        ...,
        description="The unique identifier of the policy template by alias.",
        title="Alias",
    )


class CreatePolicyTemplatePullResponse(BaseModel):
    pr_link: AnyUrl = Field(
        ..., description="The policy pull request link.", title="Pr Link"
    )


class CreateTenantEmbedAppsLinksRequest(BaseModel):
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )


class CreateTenantEmbedAppsLinksResponse(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )


class CreateTenantRequestWithUser(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: UUID4 = Field(
        ..., description="Organization id of the tenant", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    user_id: UUID4 = Field(
        ..., description="Unique identifier for the user in onelens", title="User Id"
    )


class CreateTenantTicketsResponse(BaseModel):
    pass


class CreateUserTenantMappingRequest(BaseModel):
    user_id: UUID4 = Field(
        ..., description="Unique identifier for the user in onelens.", title="User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="Unique identifier for the tenant.", title="Tenant Id"
    )


class CreateUserTenantMappingResponse(BaseModel):
    user_id: UUID4 = Field(
        ..., description="Unique identifier for the user in onelens.", title="User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="Unique identifier for the tenant.", title="Tenant Id"
    )


class CurBucketVersion(Enum):
    v1 = "v1"
    v2 = "v2"


class DeactivatePolicyTemplateRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class DeactivatePolicyTemplateResponse(BaseModel):
    pass


class DeleteHierarchyNodeRequest(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class DeleteHierarchyNodeResponse(BaseModel):
    pass


class DeleteTenantEmbedAppsLinksResponse(BaseModel):
    pass


class DeprecatePolicyTemplateRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class DeprecatePolicyTemplateResponse(BaseModel):
    pass


class Direction(Enum):
    asc = "asc"
    desc = "desc"


class DisableTenantAnomalySettingsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_id: Optional[Any] = Field(
        None, description="The id of the node.", title="Node Id"
    )


class DisableTenantPolicyRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )


class DisableTenantPolicyResponse(BaseModel):
    pass


class DisableTenantUserRequest(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class Effort(Enum):
    Easy = "Easy"
    Medium = "Medium"
    Hard = "Hard"


class EnableAllPoliciesRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class EnableAllPoliciesResponse(BaseModel):
    pass


class EnableTenantAnomalySettingsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_id: Optional[Any] = Field(
        None, description="The id of the node.", title="Node Id"
    )


class EnableTenantPolicyRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )


class EnableTenantPolicyResponse(BaseModel):
    pass


class EnableTenantUserRequest(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class Features(BaseModel):
    enable_in_policy: Optional[bool] = Field(False, title="Enable In Policy")
    enable_in_anomalies: Optional[bool] = Field(False, title="Enable In Anomalies")


class GcpService(Enum):
    GCE = "GCE"
    GCS = "GCS"
    GKE = "GKE"


class GetCloudMetadataRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetCloudMetadataResponse(BaseModel):
    cloud_ids: List = Field(..., description="List of Cloud IDs", title="Cloud Ids")
    regions: List = Field(..., description="List of regions", title="Regions")
    services: List = Field(..., description="List of services", title="Services")


class GetHierarchyNodeByIdRequest(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetPolicyTemplateByAliasRequest(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )


class GetPolicyTemplateByIDRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class GetPolicyTemplatePackByIdRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template pack", title="Id"
    )


class GetPolicyTicketStatsSubGroupBy(BaseModel):
    field_name: str = Field(
        ..., description="Field name to be fetched", title="Field Name"
    )
    field_value: Optional[float] = Field(
        None, description="Value of the field", title="Field Value"
    )


class GetRecommendationTicketRequest(BaseModel):
    ticket_id: UUID4 = Field(..., description="Ticket ID", title="Ticket Id")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetRecommendationUnitByIdRequest(BaseModel):
    id: str = Field(..., description="Recommendation Unit ID", title="Id")


class GetRecommendationUnitsRequest(BaseModel):
    ids: List[str] = Field(..., description="Recommendation Unit ID", title="Ids")


class GetResourceHierarchyMappingByOlIdRequest(BaseModel):
    resource_catalog_ol_id: UUID = Field(
        ..., description="Resource Catalog Ol Id", title="Resource Catalog Ol Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetResourceHierarchyMappingByOlIdResponse(BaseModel):
    resource_catalog_ol_id: UUID = Field(
        ..., description="Resource Catalog Ol Id", title="Resource Catalog Ol Id"
    )
    node_id: UUID = Field(..., description="The id of the node.", title="Node Id")


class GetSinglePolicyViolationsResponse(BaseModel):
    policy_id: UUID = Field(
        ..., description="The unique identifier of the policy", title="Policy Id"
    )
    policy_title: str = Field(..., description="Policy name", title="Policy Title")
    policy_labels: Optional[List[str]] = Field(
        [], description="List of policy labels", title="Policy Labels"
    )
    policy_services: List[str] = Field(
        ..., description="List of services", title="Policy Services"
    )
    potential_savings: float = Field(
        ...,
        description="Potential savings possible for the current policy violation",
        title="Potential Savings",
    )
    resources: int = Field(
        ...,
        description="Number of resources affected by the policy violation",
        title="Resources",
    )


class GetTenantByIDRequest(BaseModel):
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")


class GetTenantEmbedAppsLinksRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    id: UUID4 = Field(..., description="The unique identifier of the link", title="Id")


class GetTenantEmbedAppsLinksResponse(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )
    id: UUID4 = Field(..., description="The unique identifier of the link", title="Id")


class GetTenantPolicyByIdRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantPolicyStatsResponse(BaseModel):
    metric_value: int = Field(..., description="Fetched metric", title="Metric Value")


class GetTenantPolicyWithSummaryRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantProviderByIDRequest(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the Tenant Provider", title="Id"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")


class GetTenantUserByIDRequest(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTicketByIdPolicyDetailsRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )


class Granularity(RootModel[Literal["days"]]):
    root: Literal["days"] = Field(..., title="Granularity")


class HierarchyNodeResourceFilters(BaseModel):
    key: int = Field(..., title="Key")
    field: str = Field(..., title="Field")
    operator: str = Field(..., title="Operator")
    value: Union[List, str] = Field(..., title="Value")


class HierarchyNodeState(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class HierarchySharedNodeStrategy(RootModel[Literal["EQUAL"]]):
    root: Literal["EQUAL"] = Field(..., title="HierarchySharedNodeStrategy")


class HierarchyState(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    DRAFT = "DRAFT"


class HierarchyType(Enum):
    DEFAULT = "DEFAULT"
    CUSTOM = "CUSTOM"


class Join(BaseModel):
    current_table_column: str = Field(..., title="Current Table Column")
    join_table: str = Field(..., title="Join Table")
    join_table_column: str = Field(..., title="Join Table Column")


class LastRunAtUpdateItem(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    last_run_at: AwareDatetime = Field(
        ...,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class Metric(BaseModel):
    measures: Dict[str, Any] = Field(..., title="Measures")
    timestamp: str = Field(..., title="Timestamp")


class MetricsAggregationType(Enum):
    p99_maximum = "p99_maximum"
    p95_maximum = "p95_maximum"
    p90_maximum = "p90_maximum"
    sum_maximum = "sum_maximum"
    max_maximum = "max_maximum"
    sum_sum = "sum_sum"
    sum_average = "sum_average"
    maximum = "maximum"


class MetricsValueUnit(BaseModel):
    value: int = Field(..., description="The value of the metric.", title="Value")
    unit: str = Field(..., description="The unit of the value.", title="Unit")


class OrItem(BaseModel):
    gte: Optional[List] = Field(None, title="Gte")
    gt: Optional[List] = Field(None, title="Gt")


class OrganizationFilters(BaseModel):
    ids: Optional[List[UUID4]] = Field(None, title="Ids")
    names: Optional[List[str]] = Field(None, title="Names")
    organization_states: Optional[List[str]] = Field(None, title="Organization States")


class OrganizationState(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class OverrideTenantPolicyConfigAPIRequest(BaseModel):
    config_overrides: Dict[str, Any] = Field(
        ...,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )


class OverrideTenantPolicyConfigRequest(BaseModel):
    config_overrides: Dict[str, Any] = Field(
        ...,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    tenant_policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Tenant Policy Id"
    )


class PaginationFields(BaseModel):
    total_items: int = Field(
        ..., description="Total number of items.", title="Total Items"
    )
    total_pages: int = Field(
        ..., description="Total number of pages.", title="Total Pages"
    )
    current_page: int = Field(
        ..., description="Current page number.", title="Current Page"
    )
    page_size: int = Field(
        ..., description="Number of items per page.", title="Page Size"
    )


class PaginationParams(BaseModel):
    page: Optional[int] = Field(1, description="Page number (1-indexed).", title="Page")
    page_size: Optional[int] = Field(
        10, description="Number of items per page.", title="Page Size"
    )


class PasswordChangeEmailRequest(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class PasswordChangeEmailResponse(BaseModel):
    message: str = Field(
        ..., description="Message for password change email response", title="Message"
    )


class PolicyCategory(Enum):
    COST_SAVING = "COST_SAVING"
    BUDGETING = "BUDGETING"
    SECURITY = "SECURITY"
    COMPLIANCE = "COMPLIANCE"


class PolicyExecutionType(Enum):
    DETECTIVE = "DETECTIVE"
    PREVENTIVE = "PREVENTIVE"


class PolicyRecommendationParams(BaseModel):
    current: Optional[Dict[str, Any]] = Field(
        None,
        description="The current value of the policy template recommendation",
        title="Current",
    )
    target: Optional[Dict[str, Any]] = Field(
        None,
        description="The target value of the policy template recommendation",
        title="Target",
    )


class PolicyTemplatePackDetails(BaseModel):
    source_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the source of the policy template pack.",
        title="Source Schema",
    )


class PolicyTemplatePackState(Enum):
    DRAFT = "DRAFT"
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    DEPRECATED = "DEPRECATED"


class PolicyTemplateRecommendationUnits(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    params: PolicyRecommendationParams = Field(
        ..., description="Policy template Recommendation Params"
    )


class PolicyTemplateState(Enum):
    DRAFT = "DRAFT"
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    DEPRECATED = "DEPRECATED"


class PolicyTicketStatus(Enum):
    TO_DO = "TO_DO"
    IN_PROGRESS = "IN_PROGRESS"
    DONE = "DONE"
    INVALID = "INVALID"
    SYSTEM_INVALID = "SYSTEM_INVALID"
    DONE_AND_VERIFIED = "DONE_AND_VERIFIED"


class Provider(Enum):
    AWS = "AWS"
    GCP = "GCP"
    AZURE = "AZURE"


class PublishCustomHierarchyRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class PublishCustomHierarchyResponse(BaseModel):
    pass


class QueryDetailsDerivedVariables(BaseModel):
    key: str = Field(..., description="Key", title="Key")
    value_type: str = Field(..., description="Value Type", title="Value Type")
    source_key: str = Field(..., description="Source Key", title="Source Key")


class QueryFilters(BaseModel):
    dimension: Optional[str] = Field(
        None, description="dimension filter", title="Dimension"
    )
    operator: Optional[str] = Field(
        None, description="Operator filter", title="Operator"
    )
    values: Optional[List[str]] = Field(
        None, description="List of values filter", title="Values"
    )


class QueryOrder(Enum):
    asc = "asc"
    desc = "desc"


class RecommendationEngine(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    action_type_id: int = Field(
        ..., description="Action Type ID", title="Action Type Id"
    )
    sequence: int = Field(..., description="Sequence", title="Sequence")
    priority: int = Field(..., description="Priority", title="Priority")
    effort: Effort = Field(..., description="Effort")
    instance_type: Optional[str] = Field(
        None, description="Instance Type", title="Instance Type"
    )
    instance_family: Optional[str] = Field(
        None, description="Instance Family", title="Instance Family"
    )
    price_per_unit: str = Field(
        ..., description="Price Per Unit", title="Price Per Unit"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    unit: str = Field(..., description="Unit", title="Unit")
    new_cost: str = Field(..., description="New Cost", title="New Cost")
    current_cost: str = Field(..., description="Current Cost", title="Current Cost")
    potential_saving: str = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    description: str = Field(..., description="Description", title="Description")
    begin_range: str = Field(..., description="Begin Range", title="Begin Range")
    end_range: str = Field(..., description="End Range", title="End Range")
    attributes: Dict[str, Any] = Field(
        ..., description="Attributes", title="Attributes"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )


class RecommendationEngineResponse(BaseModel):
    recommendations: List[RecommendationEngine] = Field(
        ..., description="Recommendations", title="Recommendations"
    )


class RecommendationParams(BaseModel):
    actual: Dict[str, Any] = Field(..., description="Actual", title="Actual")
    target: Dict[str, Any] = Field(..., description="Target", title="Target")


class RecommendationQueryDetails(BaseModel):
    derived_variables: List[QueryDetailsDerivedVariables] = Field(
        ..., description="Actual", title="Derived Variables"
    )
    query: str = Field(
        ..., description="Sql Query to get the recommendation", title="Query"
    )


class RecommendationTicket(BaseModel):
    id: UUID4 = Field(
        ..., description="Unique identifier for the Recommendation Ticket", title="Id"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    action_type_id: int = Field(
        ..., description="Action Type ID", title="Action Type Id"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    sequence: int = Field(..., description="Sequence", title="Sequence")
    effort: Effort = Field(..., description="Effort")
    price_per_unit: str = Field(
        ..., description="Price Per Unit", title="Price Per Unit"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    unit: str = Field(..., description="Unit", title="Unit")
    new_cost: str = Field(..., description="New Cost", title="New Cost")
    current_cost: str = Field(..., description="Current Cost", title="Current Cost")
    potential_saving: str = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    description: str = Field(..., description="Description", title="Description")
    begin_range: str = Field(..., description="Begin Range", title="Begin Range")
    end_range: str = Field(..., description="End Range", title="End Range")
    attributes: Dict[str, Any] = Field(
        ..., description="Attributes", title="Attributes"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )
    created_at: AwareDatetime = Field(
        ..., description="Datetime of ticket creation", title="Created At"
    )


class RecommendationTicketAPIRequestInput(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    action_type_id: int = Field(
        ..., description="Action Type ID", title="Action Type Id"
    )
    sequence: int = Field(..., description="Sequence", title="Sequence")
    priority: int = Field(..., description="Priority", title="Priority")
    effort: Effort = Field(..., description="Effort")
    instance_type: Optional[str] = Field(
        None, description="Instance Type", title="Instance Type"
    )
    instance_family: Optional[str] = Field(
        None, description="Instance Family", title="Instance Family"
    )
    price_per_unit: Union[float, str] = Field(
        ..., description="Price Per Unit", title="Price Per Unit"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    unit: str = Field(..., description="Unit", title="Unit")
    new_cost: Union[float, str] = Field(..., description="New Cost", title="New Cost")
    current_cost: Union[float, str] = Field(
        ..., description="Current Cost", title="Current Cost"
    )
    potential_saving: Union[float, str] = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    description: str = Field(..., description="Description", title="Description")
    begin_range: Union[float, str] = Field(
        ..., description="Begin Range", title="Begin Range"
    )
    end_range: Union[float, str] = Field(
        ..., description="End Range", title="End Range"
    )
    attributes: Dict[str, Any] = Field(
        ..., description="Attributes", title="Attributes"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    id: Optional[UUID4] = Field(
        None, description="The unique identifier of the ticket", title="Id"
    )


class RecommendationTicketAPIRequestOutput(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    action_type_id: int = Field(
        ..., description="Action Type ID", title="Action Type Id"
    )
    sequence: int = Field(..., description="Sequence", title="Sequence")
    priority: int = Field(..., description="Priority", title="Priority")
    effort: Effort = Field(..., description="Effort")
    instance_type: Optional[str] = Field(
        None, description="Instance Type", title="Instance Type"
    )
    instance_family: Optional[str] = Field(
        None, description="Instance Family", title="Instance Family"
    )
    price_per_unit: str = Field(
        ..., description="Price Per Unit", title="Price Per Unit"
    )
    currency: str = Field(..., description="Currency", title="Currency")
    unit: str = Field(..., description="Unit", title="Unit")
    new_cost: str = Field(..., description="New Cost", title="New Cost")
    current_cost: str = Field(..., description="Current Cost", title="Current Cost")
    potential_saving: str = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    description: str = Field(..., description="Description", title="Description")
    begin_range: str = Field(..., description="Begin Range", title="Begin Range")
    end_range: str = Field(..., description="End Range", title="End Range")
    attributes: Dict[str, Any] = Field(
        ..., description="Attributes", title="Attributes"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    id: Optional[UUID4] = Field(
        None, description="The unique identifier of the ticket", title="Id"
    )


class RecommendationTicketRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    ticket_ids: List[UUID4] = Field(
        ..., description="The unique identifier of the tickets", title="Ticket Ids"
    )
    recommendations: List[RecommendationTicketAPIRequestInput] = Field(
        ..., description="The unique identifier of the tenant", title="Recommendations"
    )


class RecommendationTicketResponse(BaseModel):
    recommendations: List[RecommendationTicketAPIRequestOutput] = Field(
        ..., description="The recommendations", title="Recommendations"
    )


class RecommendationUnit(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_id: Optional[int] = Field(
        None, description="Action type identifier", title="Action Type Id"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )


class RecommendationUnitFilters(BaseModel):
    search_query: Optional[str] = Field(
        None,
        description="Search query to filter recommendation units, applies on title, subtitle and description.",
        title="Search Query",
    )
    ids: Optional[List[str]] = Field(
        [], description="Filter by recommendation unit id/alias.", title="Ids"
    )
    services: Optional[List[str]] = Field(
        [], description="Filter by Services", title="Services"
    )
    action_type_ids: Optional[List[int]] = Field(
        [], description="Filter by action type.", title="Action Type Ids"
    )
    priorities: Optional[List[int]] = Field(
        [], description="Filter by priorities.", title="Priorities"
    )
    efforts: Optional[List[Effort]] = Field(
        [], description="Filter by effort.", title="Efforts"
    )


class RecommendationUnitWithActionType(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_id: Optional[int] = Field(
        None, description="Action type identifier", title="Action Type Id"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )
    action_type_service: Optional[str] = Field(
        None, description="Action type service", title="Action Type Service"
    )
    action_type_title: Optional[str] = Field(
        None, description="Action type title", title="Action Type Title"
    )
    action_type_subtitle: Optional[str] = Field(
        None, description="Action type subtitle", title="Action Type Subtitle"
    )
    action_type_description: Optional[str] = Field(
        None, description="Action type description", title="Action Type Description"
    )


class RelationshipConfigItem(BaseModel):
    relationship_type: str = Field(..., title="Relationship Type")
    join: Join


class ResourceCatalog(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    resource_url_template: str = Field(
        ..., description="Resource url template", title="Resource Url Template"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")
    tags: Optional[Dict[str, Any]] = Field(
        None, description="Resource tags.", title="Tags"
    )
    additional_info: Dict[str, Any] = Field(
        ..., description="Additional info of the resource.", title="Additional Info"
    )
    run_id: UUID4 = Field(..., description="The run id.", title="Run Id")
    last_updated_at: AwareDatetime = Field(
        ..., description="The last updated at.", title="Last Updated At"
    )


class ResourceCatalogRequest(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class ResourceCatalogResponse(BaseModel):
    ol_id: UUID = Field(
        ..., description="The id of the resource catalog.", title="Ol Id"
    )
    cloud_id: str = Field(
        ..., description="Resource cloud identifier", title="Cloud Id"
    )
    region: str = Field(..., description="Resource region", title="Region")
    service: str = Field(..., description="Resource service class", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    resource_type: str = Field(..., description="Resource type", title="Resource Type")
    resource_url_template: str = Field(
        ..., description="Resource url template", title="Resource Url Template"
    )
    crn: str = Field(..., description="Cloud resource identifier", title="Crn")
    title: str = Field(..., description="Resource name", title="Title")
    provider: str = Field(..., description="Resource provider", title="Provider")
    status: str = Field(..., description="Resource status", title="Status")
    tags: Optional[Dict[str, Any]] = Field(
        None, description="Resource tags.", title="Tags"
    )
    additional_info: Dict[str, Any] = Field(
        ..., description="Additional info of the resource.", title="Additional Info"
    )
    run_id: UUID4 = Field(..., description="The run id.", title="Run Id")
    last_updated_at: AwareDatetime = Field(
        ..., description="The last updated at.", title="Last Updated At"
    )


class ResourceHierarchyMappingRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class ResourceHierarchyMappingResponse(BaseModel):
    pass


class ResourceRelationshipResponse(BaseModel):
    relationship_type: str = Field(
        ..., description="The relationship type", title="Relationship Type"
    )
    direction: str = Field(
        ..., description="The relationship direction", title="Direction"
    )
    resource: ResourceCatalog = Field(..., description="The resource details.")


class ResourceType(BaseModel):
    resource_type: str = Field(..., title="Resource Type")
    resource_table: str = Field(..., title="Resource Table")
    select_columns: List[str] = Field(..., title="Select Columns")
    resource_url_template: str = Field(..., title="Resource Url Template")
    is_tags_available: bool = Field(..., title="Is Tags Available")
    relationship_config: List[RelationshipConfigItem] = Field(
        ..., title="Relationship Config"
    )


class ResponseActivatePolicyTemplateResponse(BaseModel):
    data: ActivatePolicyTemplateResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreateDefaultHierarchyResponse(BaseModel):
    data: CreateDefaultHierarchyResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreateHierarchyRootNodeResponse(BaseModel):
    data: CreateHierarchyRootNodeResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreateTenantEmbedAppsLinksResponse(BaseModel):
    data: CreateTenantEmbedAppsLinksResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreateTenantTicketsResponse(BaseModel):
    data: CreateTenantTicketsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreateUserTenantMappingResponse(BaseModel):
    data: CreateUserTenantMappingResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseDeleteTenantEmbedAppsLinksResponse(BaseModel):
    data: DeleteTenantEmbedAppsLinksResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseDeprecatePolicyTemplateResponse(BaseModel):
    data: DeprecatePolicyTemplateResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseDisableTenantPolicyResponse(BaseModel):
    data: DisableTenantPolicyResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseEnableAllPoliciesResponse(BaseModel):
    data: EnableAllPoliciesResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseEnableTenantPolicyResponse(BaseModel):
    data: EnableTenantPolicyResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetCloudMetadataResponse(BaseModel):
    data: GetCloudMetadataResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantEmbedAppsLinksResponse(BaseModel):
    data: GetTenantEmbedAppsLinksResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantPolicyStatsResponse(BaseModel):
    data: GetTenantPolicyStatsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantPolicyWithSummaryRequest(BaseModel):
    data: GetTenantPolicyWithSummaryRequest
    message: Optional[str] = Field(None, title="Message")


class ResponsePasswordChangeEmailResponse(BaseModel):
    data: PasswordChangeEmailResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseRecommendationEngineResponse(BaseModel):
    data: RecommendationEngineResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseRecommendationTicketResponse(BaseModel):
    data: RecommendationTicketResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseResourceCatalogResponse(BaseModel):
    data: ResourceCatalogResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseResourceHierarchyMappingResponse(BaseModel):
    data: ResourceHierarchyMappingResponse
    message: Optional[str] = Field(None, title="Message")


class RuleType(Enum):
    SQL = "SQL"
    PYTHON = "PYTHON"


class ServiceCatalog(BaseModel):
    id: str = Field(..., title="Id")
    name: str = Field(..., title="Name")
    product_code: str = Field(..., title="Product Code")
    display_name: str = Field(..., title="Display Name")
    description: str = Field(..., title="Description")
    resource_types: Optional[List[ResourceType]] = Field([], title="Resource Types")
    features: Optional[Features] = Field(
        default_factory=lambda: Features.model_validate(
            {"enable_in_policy": False, "enable_in_anomalies": False}
        )
    )


class ServiceCatalogRequest(BaseModel):
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")


class ServiceCatalogRequestFind(BaseModel):
    tenant_id: UUID = Field(..., description="The id of the tenant.", title="Tenant Id")
    id: str = Field(..., description="The id of the service catalog.", title="Id")


class ServiceCatalogResponse(BaseModel):
    services: List[ServiceCatalog] = Field(..., title="Services")


class SetOrganizationStatusResponse(BaseModel):
    pass


class SetTenantProviderStatusResponse(BaseModel):
    pass


class SetTenantStatusRequest(BaseModel):
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")


class SetTenantStatusResponse(BaseModel):
    pass


class SortCriteria(BaseModel):
    field: str = Field(..., title="Field")
    direction: Direction


class StorageLensConfig(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    region: Optional[str] = Field(None, title="Region")


class SyncPoliciesFromRepoRequest(BaseModel):
    alias: str = Field(
        ...,
        description="The unique identifier of the policy template by alias.",
        title="Alias",
    )


class SyncPoliciesFromRepoResponse(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The policy which got updated.", title="Policy Id"
    )


class TenantAnomalyState(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class TenantAnomalyTicketDetailsMixin(BaseModel):
    anomalies: List[AnomalyRcaIdsMixin] = Field(
        ..., description="List of anomaly ids and rca ids.", title="Anomalies"
    )
    total_cost_impact: float = Field(
        ...,
        description="Total cost incurred due to the anomaly.",
        title="Total Cost Impact",
    )
    rca_hash: str = Field(
        ...,
        description="The hash of the RCA associated with the anomaly.",
        title="Rca Hash",
    )
    deviation: Union[float, str] = Field(
        ..., description="The percentage delta of the anomaly.", title="Deviation"
    )
    duration: float = Field(
        ..., description="The duration of the anomaly.", title="Duration"
    )
    duration_unit: str = Field(
        ..., description="The duration unit of the anomaly.", title="Duration Unit"
    )
    source_type: AnomalySourceType = Field(
        ..., description="The source type of the anomaly."
    )
    usage_type: str = Field(
        ..., description="The usage type of the anomaly.", title="Usage Type"
    )
    operation_type: str = Field(
        ..., description="The operation type of the anomaly.", title="Operation Type"
    )
    is_continuous: bool = Field(
        ..., description="Is the anomaly continuous.", title="Is Continuous"
    )


class TenantFilters(BaseModel):
    ids: Optional[List[UUID4]] = Field(None, title="Ids")
    names: Optional[List[str]] = Field(None, title="Names")
    tenant_states: Optional[List[str]] = Field(None, title="Tenant States")
    short_ids: Optional[List[str]] = Field(None, title="Short Ids")
    regions: Optional[List[str]] = Field(None, title="Regions")
    org_ids: Optional[List[UUID4]] = Field(None, title="Org Ids")
    status_reasons: Optional[List[str]] = Field(None, title="Status Reasons")
    expiry_date: Optional[AwareDatetime] = Field(None, title="Expiry Date")
    plans: Optional[List[str]] = Field(None, title="Plans")
    billing_owners: Optional[List[UUID4]] = Field(None, title="Billing Owners")
    billing_types: Optional[List[str]] = Field(None, title="Billing Types")


class TenantPolicyExclusions(BaseModel):
    entity_ids: List[str] = Field(
        ...,
        description="The resources excluded from running the policies on.",
        title="Entity Ids",
    )


class TenantPolicyFilters(BaseModel):
    search_query: Optional[str] = Field(
        None,
        description="Search query to filter policy templates, applies on title and description.",
        title="Search Query",
    )
    parent_ptp_ids: Optional[List[UUID4]] = Field(
        [],
        description="Filter by parent policy template pack id.",
        title="Parent Ptp Ids",
    )
    categories: Optional[List[PolicyCategory]] = Field(
        [], description="Filter by type.", title="Categories"
    )
    providers: Optional[List[Provider]] = Field(
        [], description="Filter by provider.", title="Providers"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        [], description="Filter by services.", title="Services"
    )
    execution_types: Optional[List[PolicyExecutionType]] = Field(
        [], description="Filter by execution type.", title="Execution Types"
    )


class TenantPolicyState(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    DEPRECATED = "DEPRECATED"


class TenantPolicySystemState(Enum):
    ACTIVE = "ACTIVE"
    SYSTEM_DISABLED = "SYSTEM_DISABLED"
    DEPRECATED = "DEPRECATED"


class TenantPolicyTicketDetailsMixin(BaseModel):
    policy_id: UUID4 = Field(
        ..., description="The id of the policy being violated.", title="Policy Id"
    )
    policy_template_id: UUID4 = Field(
        ...,
        description="The id of the policy template being violated.",
        title="Policy Template Id",
    )
    policy_config: Dict[str, Any] = Field(
        ...,
        description="The config of the policy being violated.",
        title="Policy Config",
    )
    policy_config_hash: Optional[str] = Field(
        None, description="The hash of the policy config.", title="Policy Config Hash"
    )
    policy_config_version: int = Field(
        ...,
        description="The config version of the policy being violated.",
        title="Policy Config Version",
    )
    violation_attributes: Dict[str, Any] = Field(
        ...,
        description="The attributes of the violation.",
        title="Violation Attributes",
    )
    potential_cost_saving: float = Field(
        ...,
        description="The potential cost accrued because of the violation.",
        title="Potential Cost Saving",
    )
    preferred_recommendation_id: Optional[UUID4] = Field(
        None,
        description="The id of the preferred recommendation for the violation.",
        title="Preferred Recommendation Id",
    )
    rule_definition_hash: Optional[str] = Field(
        "NA",
        description="The hash of the policy sql query",
        title="Rule Definition Hash",
    )


class TenantProviderAttributes(Enum):
    role_arn = "role_arn"
    db_connection_string = "db_connection_string"
    storage_lens_configuration = "storage_lens_configuration"


class TenantProviderState(Enum):
    INITIALISED = "INITIALISED"
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class TenantState(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class TenantTicketsStatsMetrics(Enum):
    SUM_SAVINGS = "SUM_SAVINGS"
    DISTINCT_ENTITY_COUNT = "DISTINCT_ENTITY_COUNT"
    COUNT = "COUNT"


class TenantTicketsStatsMetricsGroupBy(Enum):
    service = "service"
    region = "region"
    cloud_id = "cloud_id"
    effort = "effort"


class TenantTicketsStatsMetricsSubGroupBy(Enum):
    service = "service"
    region = "region"
    cloud_id = "cloud_id"


class TenantVerifyRequestWithUser(BaseModel):
    role_name: str = Field(
        ..., description="Role name of the tenant", title="Role Name"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    tenant_provider_id: UUID4 = Field(
        ..., description="Tenant Provider ID", title="Tenant Provider Id"
    )
    storage_lens_config: Optional[StorageLensConfig] = Field(
        None, description="AWS storage lens configuration"
    )
    user_id: UUID4 = Field(..., description="List of users", title="User Id")


class TenantVerifyResponse(BaseModel):
    verified: bool = Field(..., description="verified status", title="Verified")
    accounts: Dict[str, Any] = Field(..., description="accounts", title="Accounts")


class TicketAssignment(Enum):
    UNASSIGNED = "UNASSIGNED"
    ASSIGNED = "ASSIGNED"


class TicketCategory(Enum):
    POLICY_TICKET = "POLICY_TICKET"
    ANOMALY_TICKET = "ANOMALY_TICKET"


class TicketState(Enum):
    OPEN = "OPEN"
    CLOSED = "CLOSED"


class TicketUnassignment(RootModel[Literal["UNASSIGNED"]]):
    root: Literal["UNASSIGNED"] = Field(..., title="TicketUnassignment")


class TimeDimensionOutput(BaseModel):
    dimension: Optional[str] = Field(
        None, description="Time dimension", title="Dimension"
    )
    dateRange: Optional[List[str]] = Field(
        None, description="Date range", title="Daterange"
    )
    compareDateRange: Optional[List[Union[str, List[str]]]] = Field(
        None, description="Compare date range", title="Comparedaterange"
    )
    granularity: Optional[str] = Field(
        None, description="Granularity", title="Granularity"
    )


class UpdateActionTypeRequest(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    id: int = Field(..., description="Action Type ID", title="Id")


class UpdateActionTypeResponse(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    id: int = Field(..., description="Action Type ID", title="Id")


class UpdateOrganizationRequest(BaseModel):
    name: Optional[str] = Field(
        None, description="Name of the organization", title="Name"
    )


class UpdateOrganizationResponse(BaseModel):
    name: str = Field(..., description="Name of the organization", title="Name")
    id: UUID4 = Field(..., description="ID of the organization", title="Id")
    short_id: int = Field(
        ..., description="Unique identifier for the organization", title="Short Id"
    )
    status: Optional[OrganizationState] = Field(
        ..., description="Status of the organization"
    )
    total_tenants: Optional[int] = Field(
        ..., description="Total tenants of the organization", title="Total Tenants"
    )
    country: Optional[str] = Field(
        ..., description="Country of the organization", title="Country"
    )
    industry: Optional[List[str]] = Field(
        ..., description="Industry of the organization", title="Industry"
    )
    monthly_cloud_spend: Optional[int] = Field(
        ...,
        description="Monthly cloud spend of the organization",
        title="Monthly Cloud Spend",
    )
    cloud_service_providers: Optional[List[str]] = Field(
        ...,
        description="Cloud service providers of the organization",
        title="Cloud Service Providers",
    )
    website: Optional[str] = Field(
        ..., description="Website of the organization", title="Website"
    )
    changelogs: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Changelogs of the organization", title="Changelogs"
    )
    created_at: Optional[AwareDatetime] = Field(
        ..., description="Created at of the organization", title="Created At"
    )
    updated_at: Optional[AwareDatetime] = Field(
        ..., description="Updated at of the organization", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the organization", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the organization", title="Updated By"
    )


class UpdateRecommendationUnitRequest(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_id: Optional[int] = Field(
        None, description="Action type identifier", title="Action Type Id"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )


class UpdateRecommendationUnitResponse(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_id: Optional[int] = Field(
        None, description="Action type identifier", title="Action Type Id"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )


class UpdateTenantEmbedAppsLinksRequest(BaseModel):
    tab_name: Optional[str] = Field(
        None, description="Name of the tab", title="Tab Name"
    )
    link: Optional[str] = Field(None, description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )


class UpdateTenantEmbedAppsLinksResponse(BaseModel):
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )
    tab_name: str = Field(..., description="Name of the tab", title="Tab Name")
    link: str = Field(..., description="Link of the tab", title="Link")
    system_created: Optional[bool] = Field(
        False,
        description="Whether the tab is system created or not",
        title="System Created",
    )


class UpdateTenantPolicySettingLastRunAtRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    updates: List[LastRunAtUpdateItem] = Field(
        ..., description="The list of updates.", title="Updates"
    )


class UpdateTenantPolicySettingLastRunAtResponse(BaseModel):
    pass


class UpdateTenantRequest(BaseModel):
    name: Optional[str] = Field(None, description="Name of the tenant", title="Name")
    domains: Optional[List[str]] = Field(
        None, description="List of domains", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        None, description="Organization id of the tenant", title="Org Id"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the tenant", title="Timezone"
    )


class UpdateTenantResponse(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        ..., description="Unique identifier for the organization", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")
    short_id: str = Field(
        ..., description="Unique identifier for the tenant", title="Short Id"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    tenant_state: TenantState = Field(..., description="State of the tenant")
    database_connection_string: Optional[str] = Field(
        ...,
        description="DB connection string for tenant",
        title="Database Connection String",
    )
    s3_bucket_name: Optional[str] = Field(
        ..., description="S3 bucket for tenant", title="S3 Bucket Name"
    )
    type: Optional[List[str]] = Field(
        ..., description="Type of the tenant", title="Type"
    )
    status_reason: Optional[str] = Field(
        ..., description="Status reason of the tenant", title="Status Reason"
    )
    expiry_date: Optional[AwareDatetime] = Field(
        ..., description="Expiry date of the tenant", title="Expiry Date"
    )
    plan: Optional[str] = Field(..., description="Plan of the tenant", title="Plan")
    plan_config: Optional[Dict[str, Any]] = Field(
        ..., description="Plan config of the tenant", title="Plan Config"
    )
    billing_owner: Optional[UUID4] = Field(
        ..., description="Billing owner of the tenant", title="Billing Owner"
    )
    billing_type: Optional[str] = Field(
        ..., description="Billing type of the tenant", title="Billing Type"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Milestones of the tenant", title="Milestones"
    )
    created_at: Optional[AwareDatetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )
    updated_at: Optional[AwareDatetime] = Field(
        ..., description="Updated at of the tenant", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the tenant", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the tenant", title="Updated By"
    )


class UpdateTenantTicketAPIRequest(BaseModel):
    status: Optional[Union[PolicyTicketStatus, AnomalyTicketStatus]] = Field(
        None, description="Status of the ticket", title="Status"
    )
    assignment: Optional[TicketAssignment] = Field(
        None, description="Assignment state of the ticket"
    )
    details: Optional[
        Union[TenantPolicyTicketDetailsMixin, TenantAnomalyTicketDetailsMixin]
    ] = Field(None, description="Details of the ticket", title="Details")
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Resource attributes of the ticket", title="Entity Attributes"
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="Monthly unblended cost of the resource experiencing policy violation",
        title="Monthly Unblended Cost",
    )


class UpdateTenantTicketRequest(BaseModel):
    status: Optional[Union[PolicyTicketStatus, AnomalyTicketStatus]] = Field(
        None, description="Status of the ticket", title="Status"
    )
    assignment: Optional[TicketAssignment] = Field(
        None, description="Assignment state of the ticket"
    )
    details: Optional[
        Union[TenantPolicyTicketDetailsMixin, TenantAnomalyTicketDetailsMixin]
    ] = Field(None, description="Details of the ticket", title="Details")
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Resource attributes of the ticket", title="Entity Attributes"
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="Monthly unblended cost of the resource experiencing policy violation",
        title="Monthly Unblended Cost",
    )
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantTicketRequestMixin(BaseModel):
    ticket_id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    status: Optional[Union[PolicyTicketStatus, AnomalyTicketStatus]] = Field(
        None, description="Status of the ticket", title="Status"
    )
    details: Optional[
        Union[TenantPolicyTicketDetailsMixin, TenantAnomalyTicketDetailsMixin]
    ] = Field(None, description="Details of the ticket", title="Details")
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Resource attributes of the ticket", title="Entity Attributes"
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="Monthly unblended cost of the resource experiencing policy violation",
        title="Monthly Unblended Cost",
    )
    cost_impact: Optional[float] = Field(
        None,
        description="Cost impact of the current violation/anomaly responsible for the ticket",
        title="Cost Impact",
    )
    last_run_id: Optional[UUID4] = Field(
        None,
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: Optional[AwareDatetime] = Field(
        None,
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )


class UpdateTenantTicketResponse(BaseModel):
    pass


class UpdateTenantTicketsAPIRequest(BaseModel):
    updated_ticket_details: List[UpdateTenantTicketRequestMixin] = Field(
        ...,
        description="Request payload for ticket updation",
        title="Updated Ticket Details",
    )


class UpdateTenantTicketsRequest(BaseModel):
    updated_ticket_details: List[UpdateTenantTicketRequestMixin] = Field(
        ...,
        description="Request payload for ticket updation",
        title="Updated Ticket Details",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantTicketsResponse(BaseModel):
    pass


class UserCatalogDetails(BaseModel):
    connections: List[str] = Field(
        ..., description="List of user auth connections.", title="Connections"
    )


class UserCatalogState(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"


class UserPersona(Enum):
    DevOps = "DevOps"
    FinOps = "FinOps"
    CXO = "CXO"
    Product_Manager = "Product Manager"
    Engineer = "Engineer"
    Finance = "Finance"
    Other = "Other"


class UserRole(Enum):
    ADMIN = "ADMIN"
    MEMBER = "MEMBER"
    READER = "READER"


class UserStatus(Enum):
    ACTIVE = "ACTIVE"
    INACTIVE = "INACTIVE"
    BLOCKED = "BLOCKED"
    DELETED = "DELETED"
    PENDING_INVITE = "PENDING_INVITE"


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class OnelensDomainUtilitiesRepositoriesDynamicFiltersOperator(Enum):
    between = "between"
    contains = "contains"
    ends_with = "ends_with"
    equals = "equals"
    greater_than = "greater_than"
    greater_than_equal = "greater_than_equal"
    in_ = "in"
    less_than = "less_than"
    less_than_equal = "less_than_equal"
    not_equals = "not_equals"
    not_in = "not_in"
    starts_with = "starts_with"


class OnelensModelsServiceInterfacesTenantDataMetricsServiceOperator(
    RootModel[Literal["equals"]]
):
    root: Literal["equals"] = Field(..., title="Operator")


class OnelensModelsServiceInterfacesTenantDataMetricsServiceTimeDimension(BaseModel):
    range: List[str] = Field(..., title="Range")
    granularity: Granularity


class OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1(Enum):
    ROOT = "ROOT"
    BUSINESS_UNIT = "BUSINESS_UNIT"
    PRODUCT = "PRODUCT"
    SERVICE = "SERVICE"
    ENVIRONMENT = "ENVIRONMENT"
    RESIDUAL = "RESIDUAL"
    CLOUD_ID = "CLOUD_ID"
    REGION = "REGION"


class OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory2(
    RootModel[OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1]
):
    root: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1


class OnelensModelsServiceInterfacesUtilitiesDataRetrieverServiceTimeDimension(
    BaseModel
):
    dimension: Optional[str] = Field(
        None, description="Time dimension", title="Dimension"
    )
    dateRange: Optional[List[str]] = Field(
        None, description="Date range", title="Daterange"
    )
    compareDateRange: Optional[List[Union[str, List[str]]]] = Field(
        None, description="Compare date range", title="Comparedaterange"
    )
    granularity: Optional[str] = Field(
        None, description="Granularity", title="Granularity"
    )


class ActionType(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    id: int = Field(..., description="Action Type ID", title="Id")


class ActionTypeFilters(BaseModel):
    search_query: Optional[str] = Field(
        None,
        description="Search query to filter action types applies on title, subtitle and description.",
        title="Search Query",
    )
    ids: Optional[List[int]] = Field(
        [], description="Filter by recommendation unit id/alias.", title="Ids"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        [], description="Filter by Services", title="Services"
    )


class AddTenantPolicyExclusionsAPIRequest(BaseModel):
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions to add."
    )


class AddTenantPolicyExclusionsRequest(BaseModel):
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions to add."
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )


class AddTenantPolicyExclusionsResponse(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy setting.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    config_overrides: Optional[Dict[str, Any]] = Field(
        None,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    config_hash: Optional[str] = Field(
        None,
        description="The hash of the config overrides for the tenant policy setting.",
        title="Config Hash",
    )
    state: TenantPolicyState = Field(
        ..., description="The state of the policy template."
    )
    version: int = Field(
        ..., description="The version of the tenant policy.", title="Version"
    )
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions for the tenant policy."
    )
    last_run_at: Optional[AwareDatetime] = Field(
        None,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class AnomalyLogicOperation(BaseModel):
    and_: Optional[List[AndItem]] = Field(None, alias="and", title="And")
    or_: Optional[List[OrItem]] = Field(None, alias="or", title="Or")


class Auth0CreateUserAppMetadata(BaseModel):
    role: UserRole = Field(..., description="The role of the user in Auth0.")
    tenant_id: Optional[str] = Field(
        None, description="The tenant_id of the user in Auth0.", title="Tenant Id"
    )


class BulkUpdateTenantTicketsAPIRequest(BaseModel):
    ticket_ids: Optional[List[UUID]] = Field(
        [], description="List of ticket ids", title="Ticket Ids"
    )
    status: Optional[PolicyTicketStatus] = Field(
        None, description="Status of the ticket"
    )
    assignment: Optional[TicketUnassignment] = Field(
        None, description="Assignment state of the ticket"
    )
    assigned_to: Optional[str] = Field(
        None, description="Assignee of the ticket", title="Assigned To"
    )
    comment: Optional[str] = Field(
        None, description="Comment of the ticket", title="Comment"
    )


class BulkUpdateTenantTicketsRequest(BaseModel):
    ticket_ids: Optional[List[UUID]] = Field(
        [], description="List of ticket ids", title="Ticket Ids"
    )
    status: Optional[PolicyTicketStatus] = Field(
        None, description="Status of the ticket"
    )
    assignment: Optional[TicketUnassignment] = Field(
        None, description="Assignment state of the ticket"
    )
    assigned_to: Optional[str] = Field(
        None, description="Assignee of the ticket", title="Assigned To"
    )
    comment: Optional[str] = Field(
        None, description="Comment of the ticket", title="Comment"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class BulkUpdateTenantTicketsRequestMixin(BaseModel):
    ticket_ids: Optional[List[UUID]] = Field(
        [], description="List of ticket ids", title="Ticket Ids"
    )
    status: Optional[PolicyTicketStatus] = Field(
        None, description="Status of the ticket"
    )
    assignment: Optional[TicketUnassignment] = Field(
        None, description="Assignment state of the ticket"
    )
    assigned_to: Optional[str] = Field(
        None, description="Assignee of the ticket", title="Assigned To"
    )
    comment: Optional[str] = Field(
        None, description="Comment of the ticket", title="Comment"
    )


class BulkUpdateTenantTicketsResponse(BaseModel):
    data: BulkUpdateTenantTicketsRequestMixin = Field(
        ..., description="Updated tickets data"
    )
    message: Optional[str] = Field(
        None, description="Message of the response", title="Message"
    )
    error: Optional[List[BulkUpdateTenantTicketsErrorMixin]] = Field(
        [], description="Error of the response", title="Error"
    )
    status_code: int = Field(
        ..., description="Status code of the response", title="Status Code"
    )


class CreateActionTypeRequest(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")


class CreateActionTypeResponse(BaseModel):
    service: Union[AwsService, GcpService] = Field(
        ..., description="Service AWS etc.", title="Service"
    )
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    id: int = Field(..., description="Action Type ID", title="Id")


class CreateAuth0UserRequest(BaseModel):
    email: EmailStr = Field(
        ..., description="The email of the user in Auth0.", title="Email"
    )
    password: str = Field(
        ..., description="The password of the user in Auth0.", title="Password"
    )
    email_verified: Optional[bool] = Field(
        None,
        description="The email_verified of the user in Auth0.",
        title="Email Verified",
    )
    app_metadata: Auth0CreateUserAppMetadata = Field(
        ..., description="The app_metadata of the user in Auth0."
    )
    connection: Optional[Auth0UserConnection] = Field(
        default_factory=lambda: Auth0UserConnection.model_validate(
            "Username-Password-Authentication"
        ),
        description="The connection of the user in Auth0.",
    )
    given_name: Optional[str] = Field(
        None, description="The given_name of the user in Auth0.", title="Given Name"
    )
    family_name: Optional[str] = Field(
        None, description="The family_name of the user in Auth0.", title="Family Name"
    )


class CreateOrganizationResponse(BaseModel):
    name: str = Field(..., description="Name of the organization", title="Name")
    id: UUID4 = Field(..., description="ID of the organization", title="Id")
    short_id: int = Field(
        ..., description="Unique identifier for the organization", title="Short Id"
    )
    status: Optional[OrganizationState] = Field(
        ..., description="Status of the organization"
    )
    total_tenants: Optional[int] = Field(
        ..., description="Total tenants of the organization", title="Total Tenants"
    )
    country: Optional[str] = Field(
        ..., description="Country of the organization", title="Country"
    )
    industry: Optional[List[str]] = Field(
        ..., description="Industry of the organization", title="Industry"
    )
    monthly_cloud_spend: Optional[int] = Field(
        ...,
        description="Monthly cloud spend of the organization",
        title="Monthly Cloud Spend",
    )
    cloud_service_providers: Optional[List[str]] = Field(
        ...,
        description="Cloud service providers of the organization",
        title="Cloud Service Providers",
    )
    website: Optional[str] = Field(
        ..., description="Website of the organization", title="Website"
    )
    changelogs: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Changelogs of the organization", title="Changelogs"
    )
    created_at: Optional[AwareDatetime] = Field(
        ..., description="Created at of the organization", title="Created At"
    )
    updated_at: Optional[AwareDatetime] = Field(
        ..., description="Updated at of the organization", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the organization", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the organization", title="Updated By"
    )


class CreatePolicyTemplatePackRequest(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template pack", title="Alias"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template pack"
    )
    provider: Provider = Field(
        ..., description="The provider of the policy template pack"
    )
    details: PolicyTemplatePackDetails = Field(
        ..., description="The details of the policy template pack"
    )


class CreatePolicyTemplatePackResponse(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template pack", title="Alias"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template pack"
    )
    provider: Provider = Field(
        ..., description="The provider of the policy template pack"
    )
    details: PolicyTemplatePackDetails = Field(
        ..., description="The details of the policy template pack"
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template pack", title="Id"
    )
    state: PolicyTemplatePackState = Field(
        ..., description="The state of the policy template pack"
    )


class CreateRecommendationUnitRequest(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_id: Optional[int] = Field(
        None, description="Action type identifier", title="Action Type Id"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )


class CreateRecommendationUnitResponse(BaseModel):
    id: str = Field(..., description="Recommendation Config ID", title="Id")
    service: str = Field(..., description="Service AWS etc.", title="Service")
    action_type_id: Optional[int] = Field(
        None, description="Action type identifier", title="Action Type Id"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    title: str = Field(..., description="Title", title="Title")
    subtitle: Optional[str] = Field(None, description="Subtitle", title="Subtitle")
    description: str = Field(..., description="Description", title="Description")
    effort: Effort = Field(..., description="Effort")
    query_details: Optional[RecommendationQueryDetails] = Field(
        ..., description="Recommendation query details"
    )


class CreateTenantResponse(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        ..., description="Unique identifier for the organization", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")
    short_id: str = Field(
        ..., description="Unique identifier for the tenant", title="Short Id"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    tenant_state: TenantState = Field(..., description="State of the tenant")
    database_connection_string: Optional[str] = Field(
        ...,
        description="DB connection string for tenant",
        title="Database Connection String",
    )
    s3_bucket_name: Optional[str] = Field(
        ..., description="S3 bucket for tenant", title="S3 Bucket Name"
    )
    type: Optional[List[str]] = Field(
        ..., description="Type of the tenant", title="Type"
    )
    status_reason: Optional[str] = Field(
        ..., description="Status reason of the tenant", title="Status Reason"
    )
    expiry_date: Optional[AwareDatetime] = Field(
        ..., description="Expiry date of the tenant", title="Expiry Date"
    )
    plan: Optional[str] = Field(..., description="Plan of the tenant", title="Plan")
    plan_config: Optional[Dict[str, Any]] = Field(
        ..., description="Plan config of the tenant", title="Plan Config"
    )
    billing_owner: Optional[UUID4] = Field(
        ..., description="Billing owner of the tenant", title="Billing Owner"
    )
    billing_type: Optional[str] = Field(
        ..., description="Billing type of the tenant", title="Billing Type"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Milestones of the tenant", title="Milestones"
    )
    created_at: Optional[AwareDatetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )
    updated_at: Optional[AwareDatetime] = Field(
        ..., description="Updated at of the tenant", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the tenant", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the tenant", title="Updated By"
    )


class CreateTenantTicketRequestMixin(BaseModel):
    monitor_id: Optional[UUID5] = Field(
        None, description="Violation monitor id/anomlay node id", title="Monitor Id"
    )
    ticket_category: TicketCategory = Field(..., description="Category of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_type: str = Field(
        ...,
        description="The type of the resource experiencing policy violation.",
        title="Entity Type",
    )
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {},
        description="The attributes of the resource experiencing policy violation.",
        title="Entity Attributes",
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="The monthly unblended cost of the resource experiencing policy violation.",
        title="Monthly Unblended Cost",
    )
    assignment: TicketAssignment = Field(
        ..., description="Assignment state of the ticket"
    )
    assigned_to: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user the current ticket is assigned to",
        title="Assigned To",
    )
    last_run_id: UUID4 = Field(
        ...,
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: AwareDatetime = Field(
        ...,
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )
    first_run_at: AwareDatetime = Field(
        ...,
        description="Datetime of the first policy violation/anomaly run",
        title="First Run At",
    )
    status: Union[PolicyTicketStatus, AnomalyTicketStatus] = Field(
        ..., description="Status of the ticket", title="Status"
    )
    details: Union[TenantPolicyTicketDetailsMixin, TenantAnomalyTicketDetailsMixin] = (
        Field(..., description="Request payload for ticket creation", title="Details")
    )


class CreateTenantTicketsAPIRequest(BaseModel):
    new_ticket_details: List[CreateTenantTicketRequestMixin] = Field(
        ...,
        description="Request payload for ticket creation",
        title="New Ticket Details",
    )


class CreateTenantTicketsRequest(BaseModel):
    new_ticket_details: List[CreateTenantTicketRequestMixin] = Field(
        ...,
        description="Request payload for ticket creation",
        title="New Ticket Details",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class CreateTenantUserRequest(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: EmailStr = Field(..., description="Email of the user", title="Email")
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )


class CreateTenantUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class CreateUserRequest(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )


class CreateUserResponse(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )
    id: UUID4 = Field(..., description="Unique identifier for the user", title="Id")


class CurBucketConfig(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    role: Optional[str] = Field(None, title="Role")
    path: Optional[str] = Field(None, title="Path")
    version: Optional[CurBucketVersion] = None
    status: Optional[TenantProviderState] = None


class DataRetrieverQueryInput(BaseModel):
    measures: Optional[List[str]] = Field(
        None, description="List of measures", title="Measures"
    )
    dimensions: Optional[List[str]] = Field(
        None, description="List of dimensions", title="Dimensions"
    )
    filters: Optional[List[QueryFilters]] = Field(
        None, description="List of filters", title="Filters"
    )
    timeDimensions: Optional[
        List[OnelensModelsServiceInterfacesUtilitiesDataRetrieverServiceTimeDimension]
    ] = Field(None, description="List of time dimensions", title="Timedimensions")
    segments: Optional[List[str]] = Field(
        None, description="List of segments", title="Segments"
    )
    limit: Optional[int] = Field(None, description="Limit for query", title="Limit")
    total: Optional[bool] = Field(None, description="Total for query", title="Total")
    offset: Optional[int] = Field(None, description="Offset for query", title="Offset")
    order: Optional[List[QueryOrder]] = Field(
        None, description="Order for query", title="Order"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone for query", title="Timezone"
    )
    renewQuery: Optional[bool] = Field(
        None, description="Renew query", title="Renewquery"
    )
    ungrouped: Optional[bool] = Field(
        None, description="Ungrouped query", title="Ungrouped"
    )


class DataRetrieverQueryOutput(BaseModel):
    measures: Optional[List[str]] = Field(
        None, description="List of measures", title="Measures"
    )
    dimensions: Optional[List[str]] = Field(
        None, description="List of dimensions", title="Dimensions"
    )
    filters: Optional[List[QueryFilters]] = Field(
        None, description="List of filters", title="Filters"
    )
    timeDimensions: Optional[List[TimeDimensionOutput]] = Field(
        None, description="List of time dimensions", title="Timedimensions"
    )
    segments: Optional[List[str]] = Field(
        None, description="List of segments", title="Segments"
    )
    limit: Optional[int] = Field(None, description="Limit for query", title="Limit")
    total: Optional[bool] = Field(None, description="Total for query", title="Total")
    offset: Optional[int] = Field(None, description="Offset for query", title="Offset")
    order: Optional[List[QueryOrder]] = Field(
        None, description="Order for query", title="Order"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone for query", title="Timezone"
    )
    renewQuery: Optional[bool] = Field(
        None, description="Renew query", title="Renewquery"
    )
    ungrouped: Optional[bool] = Field(
        None, description="Ungrouped query", title="Ungrouped"
    )


class DataRetrieverRequest(BaseModel):
    query: DataRetrieverQueryInput = Field(..., description="Query to be executed")


class DataRetrieverResponse(BaseModel):
    query: Optional[DataRetrieverQueryOutput] = Field(
        None, description="Query to be executed"
    )
    data: Optional[List[Dict[str, Any]]] = Field(
        None, description="Data returned from query", title="Data"
    )
    annotation: Optional[Dict[str, Any]] = Field(
        None, description="Annotation returned from query", title="Annotation"
    )
    lastRefreshTime: Optional[str] = Field(
        None, description="Last refresh time of query", title="Lastrefreshtime"
    )
    dataSource: Optional[str] = Field(
        None, description="Data source of query", title="Datasource"
    )
    dbType: Optional[str] = Field(None, description="DB type of query", title="Dbtype")
    extDbType: Optional[str] = Field(
        None, description="External DB type of query", title="Extdbtype"
    )
    external: Optional[bool] = Field(
        None, description="External query", title="External"
    )
    slowQuery: Optional[bool] = Field(None, description="Slow query", title="Slowquery")
    total: Optional[int] = Field(None, description="Total of query", title="Total")
    error: Optional[str] = Field(None, description="Error of query", title="Error")


class DisableTenantAnomalySettingsResponse(BaseModel):
    config_overrides: Optional[AnomalyLogicOperation] = Field(
        None, description="The config overrides for the tenant anomaly."
    )
    state: TenantAnomalyState = Field(
        ..., description="The state of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )


class DisableTenantUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class EnableTenantAnomalySettingsResponse(BaseModel):
    config_overrides: Optional[AnomalyLogicOperation] = Field(
        None, description="The config overrides for the tenant anomaly."
    )
    state: TenantAnomalyState = Field(
        ..., description="The state of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )


class EnableTenantUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class GetActionTypeRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[ActionTypeFilters] = Field(
        default_factory=lambda: ActionTypeFilters.model_validate(
            {"ids": [], "services": []}
        ),
        description="Filters to apply to the Action Types.",
    )


class GetActionTypeResponse(BaseModel):
    action_types: List[ActionType] = Field(
        ..., description="Action Types", title="Action Types"
    )
    pagination: PaginationFields = Field(..., description="Pagination fields")


class GetAllPolicyViolationsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_violations: List[GetSinglePolicyViolationsResponse] = Field(
        ..., description="List of policy violations", title="Policy Violations"
    )


class GetAllTenantUsersItem(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    profile_pic_url: Optional[str] = Field(
        None, description="Profile picture URL of the user", title="Profile Pic Url"
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )


class GetAllUsersRequest(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )


class GetHierarchyFilters(BaseModel):
    state: Optional[HierarchyState] = Field(
        "ACTIVE", description="Filter by state(ACTIVE, INACTIVE, DRAFT)"
    )
    type: Optional[HierarchyType] = Field(
        None, description="Filter by type(DEFAUT, CUSTOM)"
    )


class GetHierarchyRequest(BaseModel):
    filters: Optional[GetHierarchyFilters] = Field(
        default_factory=lambda: GetHierarchyFilters.model_validate({"state": "ACTIVE"}),
        description="Filters for the hierarchy nodes.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetHierarchyResponse(BaseModel):
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy.", title="Id"
    )
    data: Dict[str, Any] = Field(
        ..., description="The data of the hierarchy.", title="Data"
    )
    version: int = Field(
        ..., description="The version of the hierarchy.", title="Version"
    )
    state: HierarchyState = Field(..., description="The state of the hierarchy.")
    type: HierarchyType = Field(..., description="The type of the hierarchy.")


class GetLeafNodesRequest(BaseModel):
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    filters: Optional[GetHierarchyFilters] = Field(
        {"state": "ACTIVE"}, description="Filters for the hierarchy nodes."
    )


class GetMetricsResponse(BaseModel):
    metrics: List[Metric] = Field(..., title="Metrics")
    unit: str = Field(..., title="Unit")


class GetOrganizationByIDResponse(BaseModel):
    name: str = Field(..., description="Name of the organization", title="Name")
    id: UUID4 = Field(..., description="ID of the organization", title="Id")
    short_id: int = Field(
        ..., description="Unique identifier for the organization", title="Short Id"
    )
    status: Optional[OrganizationState] = Field(
        ..., description="Status of the organization"
    )
    total_tenants: Optional[int] = Field(
        ..., description="Total tenants of the organization", title="Total Tenants"
    )
    country: Optional[str] = Field(
        ..., description="Country of the organization", title="Country"
    )
    industry: Optional[List[str]] = Field(
        ..., description="Industry of the organization", title="Industry"
    )
    monthly_cloud_spend: Optional[int] = Field(
        ...,
        description="Monthly cloud spend of the organization",
        title="Monthly Cloud Spend",
    )
    cloud_service_providers: Optional[List[str]] = Field(
        ...,
        description="Cloud service providers of the organization",
        title="Cloud Service Providers",
    )
    website: Optional[str] = Field(
        ..., description="Website of the organization", title="Website"
    )
    changelogs: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Changelogs of the organization", title="Changelogs"
    )
    created_at: Optional[AwareDatetime] = Field(
        ..., description="Created at of the organization", title="Created At"
    )
    updated_at: Optional[AwareDatetime] = Field(
        ..., description="Updated at of the organization", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the organization", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the organization", title="Updated By"
    )


class GetOrganizationsRequest(BaseModel):
    filters: Optional[OrganizationFilters] = Field(
        {}, description="Filters to apply to the policy templates."
    )


class GetPolicyTemplatePackByIdResponse(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template pack", title="Alias"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template pack"
    )
    provider: Provider = Field(
        ..., description="The provider of the policy template pack"
    )
    details: PolicyTemplatePackDetails = Field(
        ..., description="The details of the policy template pack"
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template pack", title="Id"
    )
    state: PolicyTemplatePackState = Field(
        ..., description="The state of the policy template pack"
    )


class GetPolicyTemplatePacksRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )


class GetPolicyTicketStatsGroupBy(BaseModel):
    field_name: str = Field(
        ..., description="Field name to be fetched", title="Field Name"
    )
    field_value: Optional[float] = Field(
        None, description="Value of the field", title="Field Value"
    )
    field_details: Optional[List[GetPolicyTicketStatsSubGroupBy]] = Field(
        None, description="Details of the field", title="Field Details"
    )


class GetPolicyTicketStatsResponse(BaseModel):
    value: float = Field(..., description="Value of the metric", title="Value")
    details: Optional[List[GetPolicyTicketStatsGroupBy]] = Field(
        None, description="Details of the metric", title="Details"
    )


class GetRecommendationTicket(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    potential_saving: str = Field(
        ..., description="Potential Saving", title="Potential Saving"
    )
    priority: int = Field(..., description="Priority", title="Priority")
    data: List[RecommendationTicket] = Field(..., description="Data", title="Data")


class GetRecommendationTicketResponse(BaseModel):
    recommendations: List[GetRecommendationTicket] = Field(
        ..., description="The recommendations for the ticket", title="Recommendations"
    )
    source_attributes: Optional[Dict[str, Any]] = Field(
        {}, description="Source Attributes", title="Source Attributes"
    )


class GetRecommendationUnitByIdResponse(BaseModel):
    recommendation_unit: RecommendationUnit = Field(
        ..., description="Recommendation Unit"
    )


class GetRecommendationUnitRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[RecommendationUnitFilters] = Field(
        default_factory=lambda: RecommendationUnitFilters.model_validate(
            {
                "ids": [],
                "services": [],
                "action_type_ids": [],
                "priorities": [],
                "efforts": [],
            }
        ),
        description="Filters to apply to the Recommendation Unit.",
    )


class GetRecommendationUnitsResponse(BaseModel):
    recommendation_units: List[RecommendationUnitWithActionType] = Field(
        ..., description="Recommendation Unit", title="Recommendation Units"
    )
    pagination: PaginationFields = Field(..., description="Pagination fields")


class GetResourceWithRelationResponse(BaseModel):
    resource: ResourceCatalog = Field(..., description="The resource details.")
    relationships: Optional[List[ResourceRelationshipResponse]] = Field(
        [], description="The resource relationships.", title="Relationships"
    )


class GetSinglePolicyTicketByEntityIdResponse(BaseModel):
    ticket_id: UUID = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    status: PolicyTicketStatus = Field(..., description="Status of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    violation_attributes: Dict[str, Any] = Field(
        ..., description="Attributes of the violation", title="Violation Attributes"
    )
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_name: str = Field(
        ..., description="Name of the resource", title="Entity Name"
    )
    region: str = Field(..., description="Region of the resource", title="Region")
    service: str = Field(..., description="Service of the resource", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    account_id: str = Field(
        ..., description="Account Id managing the resource", title="Account Id"
    )
    recommendation_unit_title: Optional[str] = Field(
        None,
        description="recommendation names of the ticket",
        title="Recommendation Unit Title",
    )
    policy_id: UUID = Field(
        ..., description="The unique identifier of the policy", title="Policy Id"
    )
    policy_title: str = Field(..., description="Policy name", title="Policy Title")
    policy_labels: Optional[List[str]] = Field(
        None, description="List of policy labels", title="Policy Labels"
    )
    policy_violated_on: AwareDatetime = Field(
        ..., description="Datetime of the policy violation", title="Policy Violated On"
    )
    potential_savings: float = Field(
        ...,
        description="Potential savings possible for the current policy violation",
        title="Potential Savings",
    )


class GetSinglePolicyTicketByPolicyIdResponse(BaseModel):
    ticket_id: UUID = Field(
        ..., description="The unique identifier of the ticket", title="Ticket Id"
    )
    status: PolicyTicketStatus = Field(..., description="Status of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    violation_attributes: Dict[str, Any] = Field(
        ..., description="Attributes of the violation", title="Violation Attributes"
    )
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_name: str = Field(
        ..., description="Name of the resource", title="Entity Name"
    )
    region: str = Field(..., description="Region of the resource", title="Region")
    service: str = Field(..., description="Service of the resource", title="Service")
    service_display_name: str = Field(
        ..., description="Service name in UI", title="Service Display Name"
    )
    account_id: str = Field(
        ..., description="Account Id managing the resource", title="Account Id"
    )
    recommendation_unit_title: Optional[str] = Field(
        None,
        description="recommendation names of the ticket",
        title="Recommendation Unit Title",
    )
    potential_savings: float = Field(
        ..., description="Potential savings of the ticket", title="Potential Savings"
    )


class GetTenantByIDResponse(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        ..., description="Unique identifier for the organization", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")
    short_id: str = Field(
        ..., description="Unique identifier for the tenant", title="Short Id"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    tenant_state: TenantState = Field(..., description="State of the tenant")
    database_connection_string: Optional[str] = Field(
        ...,
        description="DB connection string for tenant",
        title="Database Connection String",
    )
    s3_bucket_name: Optional[str] = Field(
        ..., description="S3 bucket for tenant", title="S3 Bucket Name"
    )
    type: Optional[List[str]] = Field(
        ..., description="Type of the tenant", title="Type"
    )
    status_reason: Optional[str] = Field(
        ..., description="Status reason of the tenant", title="Status Reason"
    )
    expiry_date: Optional[AwareDatetime] = Field(
        ..., description="Expiry date of the tenant", title="Expiry Date"
    )
    plan: Optional[str] = Field(..., description="Plan of the tenant", title="Plan")
    plan_config: Optional[Dict[str, Any]] = Field(
        ..., description="Plan config of the tenant", title="Plan Config"
    )
    billing_owner: Optional[UUID4] = Field(
        ..., description="Billing owner of the tenant", title="Billing Owner"
    )
    billing_type: Optional[str] = Field(
        ..., description="Billing type of the tenant", title="Billing Type"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Milestones of the tenant", title="Milestones"
    )
    created_at: Optional[AwareDatetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )
    updated_at: Optional[AwareDatetime] = Field(
        ..., description="Updated at of the tenant", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the tenant", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the tenant", title="Updated By"
    )


class GetTenantPoliciesAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantPolicyFilters] = Field(
        default_factory=lambda: TenantPolicyFilters.model_validate(
            {
                "parent_ptp_ids": [],
                "categories": [],
                "providers": [],
                "services": [],
                "execution_types": [],
            }
        ),
        description="Filters to apply to the tenant policies.",
    )


class GetTenantPoliciesRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantPolicyFilters] = Field(
        default_factory=lambda: TenantPolicyFilters.model_validate(
            {
                "parent_ptp_ids": [],
                "categories": [],
                "providers": [],
                "services": [],
                "execution_types": [],
            }
        ),
        description="Filters to apply to the tenant policies.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantUserByIDResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    profile_pic_url: Optional[str] = Field(
        None, description="Profile picture URL of the user", title="Profile Pic Url"
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class GetTenantUserProfileResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    profile_pic_url: Optional[str] = Field(
        None, description="Profile picture URL of the user", title="Profile Pic Url"
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )


class GetTenantUsersWithFilterResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    users: List[GetAllTenantUsersItem] = Field(
        ..., description="List of tenant users", title="Users"
    )


class GetTenantsRequest(BaseModel):
    filters: Optional[TenantFilters] = Field(
        {}, description="Filters to apply to the policy templates."
    )


class GetUserByIDResponse(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )
    id: UUID4 = Field(..., description="Unique identifier for the user", title="Id")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class HierarchyNodeAttributionDetails(BaseModel):
    nodes: List[UUID4] = Field(
        ..., description="List of nodes with which the node is shared", title="Nodes"
    )
    strategy: HierarchySharedNodeStrategy = Field(
        ..., description="Strategy for attribution"
    )


class HierarchyNodeEntityDTO(BaseModel):
    id: Optional[UUID] = Field(
        None, description="The unique identifier of the hierarchy node.", title="Id"
    )
    name: constr(max_length=30) = Field(..., title="Name")
    category: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )


class MetricsLookBackPeriod(BaseModel):
    value_from: str = Field(
        ..., description="value from for the look back.", title="Value From"
    )
    value: MetricsValueUnit = Field(..., description="The value of the look back.")


class MetricsThreshold(BaseModel):
    value_from: str = Field(
        ..., description="value_from for the threshold.", title="Value From"
    )
    value: MetricsValueUnit = Field(..., description="The value of the threshold.")


class Organization(BaseModel):
    name: str = Field(..., description="Name of the organization", title="Name")
    id: UUID4 = Field(..., description="ID of the organization", title="Id")
    short_id: int = Field(
        ..., description="Unique identifier for the organization", title="Short Id"
    )
    status: Optional[OrganizationState] = Field(
        ..., description="Status of the organization"
    )
    total_tenants: Optional[int] = Field(
        ..., description="Total tenants of the organization", title="Total Tenants"
    )
    country: Optional[str] = Field(
        ..., description="Country of the organization", title="Country"
    )
    industry: Optional[List[str]] = Field(
        ..., description="Industry of the organization", title="Industry"
    )
    monthly_cloud_spend: Optional[int] = Field(
        ...,
        description="Monthly cloud spend of the organization",
        title="Monthly Cloud Spend",
    )
    cloud_service_providers: Optional[List[str]] = Field(
        ...,
        description="Cloud service providers of the organization",
        title="Cloud Service Providers",
    )
    website: Optional[str] = Field(
        ..., description="Website of the organization", title="Website"
    )
    changelogs: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Changelogs of the organization", title="Changelogs"
    )
    created_at: Optional[AwareDatetime] = Field(
        ..., description="Created at of the organization", title="Created At"
    )
    updated_at: Optional[AwareDatetime] = Field(
        ..., description="Updated at of the organization", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the organization", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the organization", title="Updated By"
    )


class OverrideTenantAnomalyConfigAPIRequest(BaseModel):
    config_override: AnomalyLogicOperation = Field(
        ..., description="The config overrides for the anomaly."
    )


class OverrideTenantAnomalyConfigRequest(BaseModel):
    config_override: AnomalyLogicOperation = Field(
        ..., description="The config overrides for the anomaly."
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    node_id: Optional[Any] = Field(
        None, description="The id of the node.", title="Node Id"
    )


class OverrideTenantAnomalyConfigResponse(BaseModel):
    config_overrides: Optional[AnomalyLogicOperation] = Field(
        None, description="The config overrides for the tenant anomaly."
    )
    state: TenantAnomalyState = Field(
        ..., description="The state of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )


class OverrideTenantPolicyConfigResponse(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy setting.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    config_overrides: Optional[Dict[str, Any]] = Field(
        None,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    config_hash: Optional[str] = Field(
        None,
        description="The hash of the config overrides for the tenant policy setting.",
        title="Config Hash",
    )
    state: TenantPolicyState = Field(
        ..., description="The state of the policy template."
    )
    version: int = Field(
        ..., description="The version of the tenant policy.", title="Version"
    )
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions for the tenant policy."
    )
    last_run_at: Optional[AwareDatetime] = Field(
        None,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class OverrideTenantPolicyExclusionsAPIRequest(BaseModel):
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions to add."
    )


class OverrideTenantPolicyExclusionsRequest(BaseModel):
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions to add."
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )


class OverrideTenantPolicyExclusionsResponse(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy setting.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    config_overrides: Optional[Dict[str, Any]] = Field(
        None,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    config_hash: Optional[str] = Field(
        None,
        description="The hash of the config overrides for the tenant policy setting.",
        title="Config Hash",
    )
    state: TenantPolicyState = Field(
        ..., description="The state of the policy template."
    )
    version: int = Field(
        ..., description="The version of the tenant policy.", title="Version"
    )
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions for the tenant policy."
    )
    last_run_at: Optional[AwareDatetime] = Field(
        None,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class PolicyTemplateFilters(BaseModel):
    search_query: Optional[str] = Field(
        None,
        description="Search query to filter policy templates, applies on title and description.",
        title="Search Query",
    )
    parent_ptp_ids: Optional[List[UUID4]] = Field(
        [],
        description="Filter by parent policy template pack id.",
        title="Parent Ptp Ids",
    )
    states: Optional[List[PolicyTemplateState]] = Field(
        ["ACTIVE"], description="Filter by state. Default is ACTIVE.", title="States"
    )
    categories: Optional[List[PolicyCategory]] = Field(
        [], description="Filter by type.", title="Categories"
    )
    providers: Optional[List[Provider]] = Field(
        [], description="Filter by provider.", title="Providers"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        [], description="Filter by services.", title="Services"
    )
    execution_types: Optional[List[PolicyExecutionType]] = Field(
        [], description="Filter by execution type.", title="Execution Types"
    )


class PolicyTemplatePack(BaseModel):
    alias: str = Field(
        ..., description="The alias of the policy template pack", title="Alias"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template pack"
    )
    provider: Provider = Field(
        ..., description="The provider of the policy template pack"
    )
    details: PolicyTemplatePackDetails = Field(
        ..., description="The details of the policy template pack"
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template pack", title="Id"
    )
    state: PolicyTemplatePackState = Field(
        ..., description="The state of the policy template pack"
    )


class PolicyTemplateRecommendationDetailsInput(BaseModel):
    applicable_recommendation_units: Optional[
        List[PolicyTemplateRecommendationUnits]
    ] = Field(
        [],
        description="The list of applicable recommendation units",
        title="Applicable Recommendation Units",
    )


class PolicyTemplateRecommendationDetailsOutput(BaseModel):
    applicable_recommendation_units: Optional[
        List[PolicyTemplateRecommendationUnits]
    ] = Field(
        [],
        description="The list of applicable recommendation units",
        title="Applicable Recommendation Units",
    )


class ProviderConfigInput(BaseModel):
    regions: Optional[Dict[str, Any]] = Field(None, title="Regions")
    role_name: Optional[str] = Field(None, title="Role Name")
    cur_bucket_config: Optional[CurBucketConfig] = None
    storage_lens_config: Optional[StorageLensConfig] = None


class ProviderConfigOutput(BaseModel):
    regions: Optional[Dict[str, Any]] = Field(None, title="Regions")
    role_name: Optional[str] = Field(None, title="Role Name")
    cur_bucket_config: Optional[CurBucketConfig] = None
    storage_lens_config: Optional[StorageLensConfig] = None


class RecommendationEngineAPIRequest(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    resource_id: UUID = Field(..., description="Resource ID", title="Resource Id")
    params: RecommendationParams = Field(..., description="Recommendation Params")
    policy_config: Dict[str, Any] = Field(
        ..., description="Policy Config", title="Policy Config"
    )


class RecommendationEngineRequest(BaseModel):
    recommendation_unit_id: str = Field(
        ..., description="Recommendation Unit ID", title="Recommendation Unit Id"
    )
    resource_id: UUID = Field(..., description="Resource ID", title="Resource Id")
    params: RecommendationParams = Field(..., description="Recommendation Params")
    policy_config: Dict[str, Any] = Field(
        ..., description="Policy Config", title="Policy Config"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")


class ResponseAddTenantPolicyExclusionsResponse(BaseModel):
    data: AddTenantPolicyExclusionsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreatePolicyTemplatePackResponse(BaseModel):
    data: CreatePolicyTemplatePackResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreateTenantUserResponse(BaseModel):
    data: CreateTenantUserResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreateUserResponse(BaseModel):
    data: CreateUserResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseDataRetrieverResponse(BaseModel):
    data: DataRetrieverResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseEnableTenantAnomalySettingsResponse(BaseModel):
    data: EnableTenantAnomalySettingsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetAllPolicyViolationsResponse(BaseModel):
    data: GetAllPolicyViolationsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetHierarchyResponse(BaseModel):
    data: GetHierarchyResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetMetricsResponse(BaseModel):
    data: GetMetricsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetPolicyTemplatePackByIdResponse(BaseModel):
    data: GetPolicyTemplatePackByIdResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetPolicyTicketStatsResponse(BaseModel):
    data: GetPolicyTicketStatsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetRecommendationUnitByIdResponse(BaseModel):
    data: GetRecommendationUnitByIdResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetRecommendationUnitsResponse(BaseModel):
    data: GetRecommendationUnitsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetResourceWithRelationResponse(BaseModel):
    data: GetResourceWithRelationResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantByIDResponse(BaseModel):
    data: GetTenantByIDResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantUserByIDResponse(BaseModel):
    data: GetTenantUserByIDResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantUserProfileResponse(BaseModel):
    data: GetTenantUserProfileResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantUsersWithFilterResponse(BaseModel):
    data: GetTenantUsersWithFilterResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseOverrideTenantAnomalyConfigResponse(BaseModel):
    data: OverrideTenantAnomalyConfigResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseOverrideTenantPolicyExclusionsResponse(BaseModel):
    data: OverrideTenantPolicyExclusionsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseSetTenantProviderStatusResponse(BaseModel):
    data: SetTenantProviderStatusResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseSetTenantStatusResponse(BaseModel):
    data: SetTenantStatusResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseUpdateTenantEmbedAppsLinksResponse(BaseModel):
    data: UpdateTenantEmbedAppsLinksResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseUpdateTenantResponse(BaseModel):
    data: UpdateTenantResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseUpdateTenantTicketResponse(BaseModel):
    data: UpdateTenantTicketResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseUpdateTenantTicketsResponse(BaseModel):
    data: UpdateTenantTicketsResponse
    message: Optional[str] = Field(None, title="Message")


class Tenant(BaseModel):
    name: constr(max_length=200) = Field(
        ..., description="Name of the tenant", title="Name"
    )
    domains: List[str] = Field(
        ..., description="List of domains associated with the tenant", title="Domains"
    )
    org_id: Optional[UUID4] = Field(
        ..., description="Unique identifier for the organization", title="Org Id"
    )
    timezone: str = Field(..., description="Timezone of the tenant", title="Timezone")
    id: UUID4 = Field(..., description="Unique identifier for the tenant", title="Id")
    short_id: str = Field(
        ..., description="Unique identifier for the tenant", title="Short Id"
    )
    region: str = Field(..., description="Region of the tenant", title="Region")
    tenant_state: TenantState = Field(..., description="State of the tenant")
    database_connection_string: Optional[str] = Field(
        ...,
        description="DB connection string for tenant",
        title="Database Connection String",
    )
    s3_bucket_name: Optional[str] = Field(
        ..., description="S3 bucket for tenant", title="S3 Bucket Name"
    )
    type: Optional[List[str]] = Field(
        ..., description="Type of the tenant", title="Type"
    )
    status_reason: Optional[str] = Field(
        ..., description="Status reason of the tenant", title="Status Reason"
    )
    expiry_date: Optional[AwareDatetime] = Field(
        ..., description="Expiry date of the tenant", title="Expiry Date"
    )
    plan: Optional[str] = Field(..., description="Plan of the tenant", title="Plan")
    plan_config: Optional[Dict[str, Any]] = Field(
        ..., description="Plan config of the tenant", title="Plan Config"
    )
    billing_owner: Optional[UUID4] = Field(
        ..., description="Billing owner of the tenant", title="Billing Owner"
    )
    billing_type: Optional[str] = Field(
        ..., description="Billing type of the tenant", title="Billing Type"
    )
    milestones: Optional[List[Dict[str, Any]]] = Field(
        ..., description="Milestones of the tenant", title="Milestones"
    )
    created_at: Optional[AwareDatetime] = Field(
        ..., description="Created at of the tenant", title="Created At"
    )
    updated_at: Optional[AwareDatetime] = Field(
        ..., description="Updated at of the tenant", title="Updated At"
    )
    created_by: Optional[UUID4] = Field(
        ..., description="Created by of the tenant", title="Created By"
    )
    updated_by: Optional[UUID4] = Field(
        ..., description="Updated by of the tenant", title="Updated By"
    )


class TenantAnomalySettingFilters(BaseModel):
    states: Optional[List[TenantAnomalyState]] = Field(
        ["ACTIVE"], description="Filter by state. Default is ACTIVE.", title="States"
    )


class TenantAnomalySettings(BaseModel):
    config_overrides: Optional[AnomalyLogicOperation] = Field(
        None, description="The config overrides for the tenant anomaly."
    )
    state: TenantAnomalyState = Field(
        ..., description="The state of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )


class TenantPolicySettings(BaseModel):
    id: UUID4 = Field(
        ...,
        description="The unique identifier of the tenant policy setting.",
        title="Id",
    )
    policy_id: UUID4 = Field(
        ..., description="The id of the tenant policy.", title="Policy Id"
    )
    config_overrides: Optional[Dict[str, Any]] = Field(
        None,
        description="The config overrides for the tenant policy.",
        title="Config Overrides",
    )
    config_hash: Optional[str] = Field(
        None,
        description="The hash of the config overrides for the tenant policy setting.",
        title="Config Hash",
    )
    state: TenantPolicyState = Field(
        ..., description="The state of the policy template."
    )
    version: int = Field(
        ..., description="The version of the tenant policy.", title="Version"
    )
    exclusions: TenantPolicyExclusions = Field(
        ..., description="The exclusions for the tenant policy."
    )
    last_run_at: Optional[AwareDatetime] = Field(
        None,
        description="The timestamp of the last run of the policy.",
        title="Last Run At",
    )


class TenantPolicySettingsFilters(BaseModel):
    states: Optional[List[TenantPolicyState]] = Field(
        ["ACTIVE"], description="Filter by state. Default is ACTIVE.", title="States"
    )
    policy_ids: Optional[List[UUID4]] = Field(
        [], description="Filter by tenant policy id.", title="Policy Ids"
    )


class TenantProvider(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigOutput] = Field(
        ..., description="provider config"
    )
    id: UUID4 = Field(..., description="Unique ID for the Tenant Provider", title="Id")
    is_parent_account: bool = Field(
        ..., description="billing account", title="Is Parent Account"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    is_billing_account: bool = Field(
        ..., description="is billing account", title="Is Billing Account"
    )
    is_verified: bool = Field(..., description="is verified", title="Is Verified")
    state: TenantProviderState = Field(..., description="state")


class TenantProviderFilters(BaseModel):
    tenant_ids: Optional[List[UUID4]] = Field(
        None, description="Tenant ID filter", title="Tenant Ids"
    )
    cloud_ids: Optional[List[str]] = Field(
        None, description="Cloud ID filter", title="Cloud Ids"
    )
    cloud_providers: Optional[List[str]] = Field(
        None, description="Cloud provider filter", title="Cloud Providers"
    )
    parent_ids: Optional[List[UUID4]] = Field(
        None, description="Parent ID filter", title="Parent Ids"
    )
    is_parent_account: Optional[bool] = Field(
        None, description="Parent account filter", title="Is Parent Account"
    )
    is_billing_account: Optional[bool] = Field(
        None, description="Billing account filter", title="Is Billing Account"
    )
    is_verified: Optional[bool] = Field(
        None, description="Is verified filter", title="Is Verified"
    )
    states: Optional[List[TenantProviderState]] = Field(
        None, description="State filter", title="States"
    )


class TenantTicket(BaseModel):
    created_at: AwareDatetime = Field(
        ..., description="Datetime of ticket creation", title="Created At"
    )
    updated_at: AwareDatetime = Field(
        ..., description="Datetime of ticket updation", title="Updated At"
    )
    monitor_id: Optional[UUID5] = Field(
        None, description="Violation monitor id/anomlay node id", title="Monitor Id"
    )
    ticket_category: TicketCategory = Field(..., description="Category of the ticket")
    state: TicketState = Field(..., description="State of the ticket")
    entity_id: UUID = Field(
        ...,
        description="The id of the resource experiencing policy violation.",
        title="Entity Id",
    )
    entity_type: str = Field(
        ...,
        description="The type of the resource experiencing policy violation.",
        title="Entity Type",
    )
    entity_attributes: Optional[Dict[str, Any]] = Field(
        {},
        description="The attributes of the resource experiencing policy violation.",
        title="Entity Attributes",
    )
    monthly_unblended_cost: Optional[float] = Field(
        None,
        description="The monthly unblended cost of the resource experiencing policy violation.",
        title="Monthly Unblended Cost",
    )
    assignment: TicketAssignment = Field(
        ..., description="Assignment state of the ticket"
    )
    assigned_to: Optional[UUID4] = Field(
        None,
        description="The unique identifier of the user the current ticket is assigned to",
        title="Assigned To",
    )
    last_run_id: UUID4 = Field(
        ...,
        description="Id of the last policy violation/anomaly run",
        title="Last Run Id",
    )
    last_run_at: AwareDatetime = Field(
        ...,
        description="Datetime of the last policy violation/anomaly run",
        title="Last Run At",
    )
    first_run_at: AwareDatetime = Field(
        ...,
        description="Datetime of the first policy violation/anomaly run",
        title="First Run At",
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the ticket", title="Id"
    )
    status: Union[PolicyTicketStatus, AnomalyTicketStatus] = Field(
        ..., description="Status of the ticket", title="Status"
    )
    details: Union[TenantPolicyTicketDetailsMixin, TenantAnomalyTicketDetailsMixin] = (
        Field(..., description="Details of the ticket", title="Details")
    )


class TenantTicketFilters(BaseModel):
    monitor_ids: Optional[List[UUID5]] = Field(
        [],
        description="List of violation monitor ids/anomaly node ids for which tickets are to be fetched.",
        title="Monitor Ids",
    )
    ticket_categories: Optional[List[TicketCategory]] = Field(
        [],
        description="List of ticket categories for which tickets are to be fetched.",
        title="Ticket Categories",
    )
    states: Optional[List[TicketState]] = Field(
        [],
        description="List of ticket State for which tickets are to be fetched.",
        title="States",
    )
    statuses: Optional[Union[List[PolicyTicketStatus], List[AnomalyTicketStatus]]] = (
        Field(
            [],
            description="List of ticket Statuss for which tickets are to be fetched.",
            title="Statuses",
        )
    )
    policy_ids: Optional[List[UUID4]] = Field(
        [],
        description="List of policy ids for which tickets are to be fetched.",
        title="Policy Ids",
    )


class TenantUserDetailsUpdateFieldsMixin(BaseModel):
    first_name: Optional[str] = Field(
        None, description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        None, description="Last name of the user", title="Last Name"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )


class TenantUserUpdateFieldsMixin(BaseModel):
    role: Optional[UserRole] = Field(None, description="Role of the user in the tenant")
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")


class TenantVerifyCurBucketRequest(BaseModel):
    cur_bucket_config: CurBucketConfig = Field(..., description="cur bucket config")
    cloud_id: str = Field(..., description="cloud id", title="Cloud Id")


class TenantVerifyCurBucketResponse(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigOutput] = Field(
        ..., description="provider config"
    )
    id: UUID4 = Field(..., description="Unique ID for the Tenant Provider", title="Id")
    is_parent_account: bool = Field(
        ..., description="billing account", title="Is Parent Account"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    is_billing_account: bool = Field(
        ..., description="is billing account", title="Is Billing Account"
    )
    is_verified: bool = Field(..., description="is verified", title="Is Verified")
    state: TenantProviderState = Field(..., description="state")


class UpdateHierarchyNodeAPIRequest(BaseModel):
    name: Optional[constr(max_length=30)] = Field(None, title="Name")
    parent_id: Optional[UUID4] = Field(
        None, description="Parent ID of the node", title="Parent Id"
    )
    category: Optional[
        OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1
    ] = None
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )


class UpdateHierarchyNodeRequest(BaseModel):
    name: Optional[constr(max_length=30)] = Field(None, title="Name")
    parent_id: Optional[UUID4] = Field(
        None, description="Parent ID of the node", title="Parent Id"
    )
    category: Optional[
        OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1
    ] = None
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    node_id: UUID4 = Field(..., description="The id of the node.", title="Node Id")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class UpdateHierarchyNodeResponse(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")
    parent_id: Optional[UUID] = Field(
        ..., description="Parent ID of the node", title="Parent Id"
    )
    category: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )


class UpdateTenantUserBySystemRequest(BaseModel):
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    first_name: Optional[str] = Field(
        None, description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        None, description="Last name of the user", title="Last Name"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantUserBySystemResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )


class UpdateTenantUserDetailsRequest(BaseModel):
    first_name: Optional[str] = Field(
        None, description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        None, description="Last name of the user", title="Last Name"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantUserDetailsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class UpdateTenantUserRequest(BaseModel):
    role: Optional[UserRole] = Field(None, description="Role of the user in the tenant")
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class UpdateTenantUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: Optional[UserStatus] = Field(
        "PENDING_INVITE", description="Status of the user like ACTIVE, BLOCKED etc."
    )
    first_name: Optional[str] = Field(
        ..., description="First name of the user", title="First Name"
    )
    middle_name: Optional[str] = Field(
        None, description="Middle name of the user", title="Middle Name"
    )
    last_name: Optional[str] = Field(
        ..., description="Last name of the user", title="Last Name"
    )
    email: Optional[Union[EmailStr, str]] = Field(
        None, description="Email of the user", title="Email"
    )
    mobile_country_code: Optional[str] = Field(
        None, description="Mobile country code of the user", title="Mobile Country Code"
    )
    mobile_number: Optional[str] = Field(
        None, description="Mobile number of the user", title="Mobile Number"
    )
    persona: Optional[UserPersona] = Field(None, description="Persona of the user")
    role: Optional[UserRole] = Field(
        "READER", description="Role of the user in the tenant"
    )
    job_title: Optional[str] = Field(
        None, description="Job title of the user", title="Job Title"
    )
    manager: Optional[UUID4] = Field(
        None, description="Manager of the user", title="Manager"
    )
    city: Optional[str] = Field(None, description="City of the user", title="City")
    state: Optional[str] = Field(None, description="State of the user", title="State")
    country: Optional[str] = Field(
        None, description="Country of the user", title="Country"
    )
    display_language: Optional[str] = Field(
        None, description="Display language of the user", title="Display Language"
    )
    preferred_currency: Optional[str] = Field(
        None, description="Preferred currency of the user", title="Preferred Currency"
    )
    timezone: Optional[str] = Field(
        None, description="Timezone of the user", title="Timezone"
    )
    display_date_format: Optional[str] = Field(
        None, description="Display date format of the user", title="Display Date Format"
    )
    display_time_format: Optional[str] = Field(
        None, description="Display time format of the user", title="Display Time Format"
    )
    sources: Optional[List[Auth0UserConnection]] = Field(
        ["Username-Password-Authentication"],
        description="Different sources from where user signed up. e.g. social signup, username-password",
        title="Sources",
    )
    last_login: Optional[AwareDatetime] = Field(
        None, description="Last login of the user", title="Last Login"
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Datetime of user creation", title="Created At"
    )
    ol_user_id: UUID4 = Field(
        ..., description="Unique onelens identifier for the user", title="Ol User Id"
    )
    id: UUID4 = Field(..., description="PK in the tenant users table", title="Id")


class UpdateUserAPIRequest(BaseModel):
    state: Optional[UserCatalogState] = Field(None, description="State of the user.")
    details: Optional[UserCatalogDetails] = Field(
        None, description="Details of the user in catalof DB."
    )


class UpdateUserResponse(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )
    id: UUID4 = Field(..., description="Unique identifier for the user", title="Id")


class OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria(BaseModel):
    field: str = Field(..., title="Field")
    operator: OnelensDomainUtilitiesRepositoriesDynamicFiltersOperator
    value: Union[List[str], str] = Field(..., title="Value")


class OnelensModelsServiceInterfacesTenantDataMetricsServiceFilterCriteria(BaseModel):
    field: str = Field(..., title="Field")
    operator: OnelensModelsServiceInterfacesTenantDataMetricsServiceOperator
    values: Union[List[str], str] = Field(..., title="Values")


class BulkUpdateTenantTicketsAPIResponse(BaseModel):
    data: BulkUpdateTenantTicketsRequestMixin = Field(
        ..., description="Updated tickets data"
    )
    error: Optional[List[BulkUpdateTenantTicketsErrorMixin]] = Field(
        [], description="Error of the response", title="Error"
    )


class CreateAuth0AndOnelensUserResponse(BaseModel):
    auth0_data: Auth0UserAllFields = Field(
        ..., description="The data of the user in Auth0."
    )
    onelens_data: CreateUserResponse = Field(
        ..., description="The data of the user in onelens."
    )


class CreateHierarchyNodeAPIRequest(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")
    parent_id: Optional[UUID] = Field(
        ..., description="Parent ID of the node", title="Parent Id"
    )
    category: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )


class CreateHierarchyNodeRequest(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")
    parent_id: Optional[UUID] = Field(
        ..., description="Parent ID of the node", title="Parent Id"
    )
    category: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class CreateHierarchyNodeResponse(BaseModel):
    name: constr(max_length=30) = Field(..., title="Name")
    parent_id: Optional[UUID] = Field(
        ..., description="Parent ID of the node", title="Parent Id"
    )
    category: OnelensModelsServiceInterfacesTenantMetadataCommonsHierarchyNodeCategory1
    resource_filters: Optional[List[HierarchyNodeResourceFilters]] = Field(
        None, description="Resource filters of the node", title="Resource Filters"
    )
    resource_filter_expression: Optional[constr(max_length=200)] = Field(
        None,
        description="Resource filter expression of the node",
        title="Resource Filter Expression",
    )
    is_shared: Optional[bool] = Field(
        False, description="is this node a shared node or not.", title="Is Shared"
    )
    attribution_details: Optional[HierarchyNodeAttributionDetails] = Field(
        None, description="Attribution details of the node."
    )
    id: UUID = Field(
        ..., description="The unique identifier of the hierarchy node.", title="Id"
    )
    state: HierarchyNodeState = Field(
        ..., description="The state of the hierarchy node."
    )
    sql_filter: Optional[str] = Field(
        None, description="The sql filter for the hierarchy node.", title="Sql Filter"
    )


class CreateTenantProviderRequest(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigInput] = Field(
        None, description="Provider config"
    )
    tenant_id: Optional[UUID4] = Field(None, description="Tenant ID", title="Tenant Id")


class CreateTenantProviderResponse(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigOutput] = Field(
        ..., description="provider config"
    )
    id: UUID4 = Field(..., description="Unique ID for the Tenant Provider", title="Id")
    is_parent_account: bool = Field(
        ..., description="billing account", title="Is Parent Account"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    is_billing_account: bool = Field(
        ..., description="is billing account", title="Is Billing Account"
    )
    is_verified: bool = Field(..., description="is verified", title="Is Verified")
    state: TenantProviderState = Field(..., description="state")


class GetAllPolicyViolationsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetAllPolicyViolationsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetAllTenantEmbedAppsLinksRequest(BaseModel):
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )


class GetAllUsersResponse(BaseModel):
    auth0_id: constr(min_length=1, max_length=255) = Field(
        ..., description="Auth0 user identifier", title="Auth0 Id"
    )
    state: Optional[UserCatalogState] = Field(
        "INACTIVE", description="State of the user."
    )
    details: UserCatalogDetails = Field(
        ..., description="Details of the user in catalof DB."
    )
    users: List[GetUserByIDResponse] = Field(
        ..., description="List of users", title="Users"
    )


class GetLeafNodesResponse(BaseModel):
    nodes: List[HierarchyNodeEntityDTO] = Field(
        ..., description="List of leaf nodes.", title="Nodes"
    )


class GetOrganizationsResponse(BaseModel):
    organizations: List[Organization] = Field(..., title="Organizations")


class GetPolicyTemplatePacksResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_template_packs: List[PolicyTemplatePack] = Field(
        ..., title="Policy Template Packs"
    )


class GetPolicyTemplatesRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[PolicyTemplateFilters] = Field(
        default_factory=lambda: PolicyTemplateFilters.model_validate(
            {
                "parent_ptp_ids": [],
                "states": ["ACTIVE"],
                "categories": [],
                "providers": [],
                "services": [],
                "execution_types": [],
            }
        ),
        description="Filters to apply to the policy templates.",
    )


class GetPolicyTicketStatsAPIRequest(BaseModel):
    metric: TenantTicketsStatsMetrics = Field(..., description="Metric to be fetched")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    group: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        None, description="Group by option"
    )
    sub_group: Optional[TenantTicketsStatsMetricsSubGroupBy] = Field(
        None, description="Sub group by option"
    )
    limit_items: Optional[bool] = Field(
        None,
        description="Limit the number of items to be fetched or not",
        title="Limit Items",
    )
    item_count: Optional[int] = Field(
        5, description="Count of the items to be fetched", title="Item Count"
    )


class GetPolicyTicketStatsRequest(BaseModel):
    metric: TenantTicketsStatsMetrics = Field(..., description="Metric to be fetched")
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    group: Optional[TenantTicketsStatsMetricsGroupBy] = Field(
        None, description="Group by option"
    )
    sub_group: Optional[TenantTicketsStatsMetricsSubGroupBy] = Field(
        None, description="Sub group by option"
    )
    limit_items: Optional[bool] = Field(
        None,
        description="Limit the number of items to be fetched or not",
        title="Limit Items",
    )
    item_count: Optional[int] = Field(
        5, description="Count of the items to be fetched", title="Item Count"
    )
    tenant_id: UUID = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetPolicyTicketsByEntityIdAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetPolicyTicketsByEntityIdRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetPolicyTicketsByEntityIdResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    entity_tickets: List[GetSinglePolicyTicketByEntityIdResponse] = Field(
        ..., description="List of tickets", title="Entity Tickets"
    )


class GetPolicyTicketsByPolicyIdAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetPolicyTicketsByPolicyIdRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetPolicyTicketsByPolicyIdResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_tickets: List[GetSinglePolicyTicketByPolicyIdResponse] = Field(
        ..., description="List of policy_tickets", title="Policy Tickets"
    )


class GetTenantAnomalySettingsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantAnomalySettingFilters] = Field(
        default_factory=lambda: TenantAnomalySettingFilters.model_validate(
            {"states": ["ACTIVE"]}
        ),
        description="Filters to apply to the tenant anomalies.",
    )


class GetTenantAnomalySettingsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantAnomalySettingFilters] = Field(
        default_factory=lambda: TenantAnomalySettingFilters.model_validate(
            {"states": ["ACTIVE"]}
        ),
        description="Filters to apply to the tenant anomalies.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantAnomalySettingsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    anomaly_settings: List[TenantAnomalySettings] = Field(
        ..., description="List of tenant anomalies.", title="Anomaly Settings"
    )


class GetTenantPoliciesWithSettingsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")


class GetTenantPoliciesWithSettingsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(None, description="Sorting criteria")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantPolicySettingsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantPolicySettingsFilters] = Field(
        default_factory=lambda: TenantPolicySettingsFilters.model_validate(
            {"states": ["ACTIVE"], "policy_ids": []}
        ),
        description="Filters to apply to the tenant policy settings.",
    )


class GetTenantPolicySettingsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantPolicySettingsFilters] = Field(
        default_factory=lambda: TenantPolicySettingsFilters.model_validate(
            {"states": ["ACTIVE"], "policy_ids": []}
        ),
        description="Filters to apply to the tenant policy settings.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantPolicySettingsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_settings: List[TenantPolicySettings] = Field(
        ..., description="List of tenant policy settings.", title="Policy Settings"
    )


class GetTenantPolicyStatsAPIRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field([], description="Filters to be applied", title="Filters")


class GetTenantPolicyStatsRequest(BaseModel):
    filters: Optional[
        List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria]
    ] = Field([], description="Filters to be applied", title="Filters")
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetTenantProviderByIDResponse(BaseModel):
    cloud_provider: str = Field(
        ..., description="Cloud provider", title="Cloud Provider"
    )
    cloud_id: str = Field(..., description="Cloud ID", title="Cloud Id")
    parent_id: Optional[UUID4] = Field(None, description="Parent ID", title="Parent Id")
    provider_config: Optional[ProviderConfigOutput] = Field(
        ..., description="provider config"
    )
    id: UUID4 = Field(..., description="Unique ID for the Tenant Provider", title="Id")
    is_parent_account: bool = Field(
        ..., description="billing account", title="Is Parent Account"
    )
    tenant_id: UUID4 = Field(..., description="Tenant ID", title="Tenant Id")
    is_billing_account: bool = Field(
        ..., description="is billing account", title="Is Billing Account"
    )
    is_verified: bool = Field(..., description="is verified", title="Is Verified")
    state: TenantProviderState = Field(..., description="State of the tenant")


class GetTenantProvidersRequest(BaseModel):
    filters: Optional[TenantProviderFilters] = Field(
        {}, description="Filters to apply to the policy templates."
    )
    attributes: Optional[List[TenantProviderAttributes]] = Field(
        [],
        description="List of items to be returned in the response",
        title="Attributes",
    )


class GetTenantProvidersResponse(BaseModel):
    tenant_provider_filter_data: Optional[List[TenantProvider]] = Field(
        ..., title="Tenant Provider Filter Data"
    )
    attributes_data: Optional[Dict[str, Any]] = Field(..., title="Attributes Data")


class GetTenantTicketsAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantTicketFilters] = Field(
        default_factory=lambda: TenantTicketFilters.model_validate(
            {
                "monitor_ids": [],
                "ticket_categories": [],
                "states": [],
                "statuses": [],
                "policy_ids": [],
            }
        ),
        description="Filters to apply to the tickets.",
    )


class GetTenantTicketsRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: Optional[TenantTicketFilters] = Field(
        default_factory=lambda: TenantTicketFilters.model_validate(
            {
                "monitor_ids": [],
                "ticket_categories": [],
                "states": [],
                "statuses": [],
                "policy_ids": [],
            }
        ),
        description="Filters to apply to the tickets.",
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTenantTicketsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    tenant_tickets: List[TenantTicket] = Field(
        ..., description="List of tickets of the tenant", title="Tenant Tickets"
    )


class GetTenantUsersWithFilterAPIRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(
        {"field": "updated_at", "direction": "desc"}, description="Sorting criteria"
    )


class GetTenantUsersWithFilterRequest(BaseModel):
    pagination: Optional[PaginationParams] = Field(
        default_factory=lambda: PaginationParams.model_validate(
            {"page": 1, "page_size": 10}
        ),
        description="Pagination parameters for the request.",
    )
    filters: List[OnelensDomainUtilitiesRepositoriesDynamicFiltersFilterCriteria] = (
        Field(..., description="Filters to be applied", title="Filters")
    )
    sort_criteria: Optional[SortCriteria] = Field(
        {"field": "updated_at", "direction": "desc"}, description="Sorting criteria"
    )
    tenant_id: UUID4 = Field(
        ..., description="The unique identifier of the tenant", title="Tenant Id"
    )


class GetTenantsResponse(BaseModel):
    tenants: List[Tenant] = Field(..., title="Tenants")


class MetricsChartConfigInput(BaseModel):
    chart_title: str = Field(
        ..., description="The title of the chart.", title="Chart Title"
    )
    chart_type: str = Field(
        ..., description="The type of the chart.", title="Chart Type"
    )
    table_name: str = Field(
        ..., description="The name of the table.", title="Table Name"
    )
    metric_name: str = Field(
        ..., description="The name of the metric.", title="Metric Name"
    )
    aggregation_type: MetricsAggregationType = Field(
        ..., description="The aggregation type of the metric."
    )
    look_back_period: MetricsLookBackPeriod = Field(
        ..., description="The look back period of the metric."
    )
    threshold: Optional[MetricsThreshold] = Field(
        None, description="The threshold of the metric."
    )


class MetricsChartConfigOutput(BaseModel):
    chart_title: str = Field(
        ..., description="The title of the chart.", title="Chart Title"
    )
    chart_type: str = Field(
        ..., description="The type of the chart.", title="Chart Type"
    )
    table_name: str = Field(
        ..., description="The name of the table.", title="Table Name"
    )
    metric_name: str = Field(
        ..., description="The name of the metric.", title="Metric Name"
    )
    aggregation_type: MetricsAggregationType = Field(
        ..., description="The aggregation type of the metric."
    )
    look_back_period: MetricsLookBackPeriod = Field(
        ..., description="The look back period of the metric."
    )
    threshold: Optional[MetricsThreshold] = Field(
        None, description="The threshold of the metric."
    )


class MetricsQuery(BaseModel):
    name: str = Field(..., title="Name")
    metric_name: str = Field(..., title="Metric Name")
    measures: List[MetricsAggregationType] = Field(..., title="Measures")
    filters: List[
        OnelensModelsServiceInterfacesTenantDataMetricsServiceFilterCriteria
    ] = Field(..., title="Filters")
    time_filter: OnelensModelsServiceInterfacesTenantDataMetricsServiceTimeDimension
    timezone: Optional[str] = Field("Asia/Kolkata", title="Timezone")


class PolicyTemplateDetailsInput(BaseModel):
    inputs: Optional[List[str]] = Field(
        None, description="The input dataset names for the policy.", title="Inputs"
    )
    config_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the policy config for this policy template.",
        title="Config Schema",
    )
    primary_violation_attributes_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the output violation.",
        title="Primary Violation Attributes Schema",
    )
    secondary_violation_attributes_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the .",
        title="Secondary Violation Attributes Schema",
    )
    rule_type: Optional[RuleType] = Field(
        None, description="The type of the rule, SQL etc."
    )
    rule_definition: Optional[str] = Field(
        None, description="The definition of the rule.", title="Rule Definition"
    )
    rule_definition_hash: Optional[str] = Field(
        None,
        description="The hash of the rule definition.",
        title="Rule Definition Hash",
    )
    default_policy_config: Optional[Dict[str, Any]] = Field(
        None,
        description="The default configuration for the policy.",
        title="Default Policy Config",
    )
    default_policy_config_hash: Optional[str] = Field(
        None,
        description="The hash of the default policy config.",
        title="Default Policy Config Hash",
    )
    metrics_details: Optional[List[MetricsChartConfigInput]] = Field(
        None, description="The metrics details for the policy.", title="Metrics Details"
    )


class PolicyTemplateDetailsOutput(BaseModel):
    inputs: Optional[List[str]] = Field(
        None, description="The input dataset names for the policy.", title="Inputs"
    )
    config_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the policy config for this policy template.",
        title="Config Schema",
    )
    primary_violation_attributes_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the output violation.",
        title="Primary Violation Attributes Schema",
    )
    secondary_violation_attributes_schema: Optional[Dict[str, Any]] = Field(
        None,
        description="The schema for the .",
        title="Secondary Violation Attributes Schema",
    )
    rule_type: Optional[RuleType] = Field(
        None, description="The type of the rule, SQL etc."
    )
    rule_definition: Optional[str] = Field(
        None, description="The definition of the rule.", title="Rule Definition"
    )
    rule_definition_hash: Optional[str] = Field(
        None,
        description="The hash of the rule definition.",
        title="Rule Definition Hash",
    )
    default_policy_config: Optional[Dict[str, Any]] = Field(
        None,
        description="The default configuration for the policy.",
        title="Default Policy Config",
    )
    default_policy_config_hash: Optional[str] = Field(
        None,
        description="The hash of the default policy config.",
        title="Default Policy Config Hash",
    )
    metrics_details: Optional[List[MetricsChartConfigOutput]] = Field(
        None, description="The metrics details for the policy.", title="Metrics Details"
    )


class PolicyTemplateUpdateFieldsMixin(BaseModel):
    title: Optional[str] = Field(
        None, description="The title of the policy template.", title="Title"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        None,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: Optional[PolicyExecutionType] = Field(
        None, description="The execution type of the policy template."
    )
    details: Optional[PolicyTemplateDetailsInput] = Field(
        None, description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: Optional[str] = Field(
        None,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: Optional[PolicyTemplateRecommendationDetailsInput] = Field(
        None, description="The recommendation details for the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class ResponseBulkUpdateTenantTicketsAPIResponse(BaseModel):
    data: BulkUpdateTenantTicketsAPIResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseCreateAuth0AndOnelensUserResponse(BaseModel):
    data: CreateAuth0AndOnelensUserResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetPolicyTemplatePacksResponse(BaseModel):
    data: GetPolicyTemplatePacksResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetPolicyTicketsByEntityIdResponse(BaseModel):
    data: GetPolicyTicketsByEntityIdResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetPolicyTicketsByPolicyIdResponse(BaseModel):
    data: GetPolicyTicketsByPolicyIdResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantAnomalySettingsResponse(BaseModel):
    data: GetTenantAnomalySettingsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantPolicySettingsResponse(BaseModel):
    data: GetTenantPolicySettingsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantProviderByIDResponse(BaseModel):
    data: GetTenantProviderByIDResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantProvidersResponse(BaseModel):
    data: GetTenantProvidersResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantTicketsResponse(BaseModel):
    data: GetTenantTicketsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantsResponse(BaseModel):
    data: GetTenantsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseTenantVerifyCurBucketResponse(BaseModel):
    data: TenantVerifyCurBucketResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseUpdateTenantUserDetailsResponse(BaseModel):
    data: UpdateTenantUserDetailsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseUpdateTenantUserResponse(BaseModel):
    data: UpdateTenantUserResponse
    message: Optional[str] = Field(None, title="Message")


class TenantPolicy(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    policy_template_id: UUID4 = Field(
        ..., description="The id of the policy template.", title="Policy Template Id"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    state: TenantPolicySystemState = Field(
        ..., description="The state of the tenant policy."
    )


class TenantPolicyWithSetting(BaseModel):
    policy: TenantPolicy = Field(..., description="The policy details.")
    setting: TenantPolicySettings = Field(
        ..., description="The policy setting details."
    )


class UpdatePolicyTemplateRequest(BaseModel):
    force_update: Optional[bool] = Field(
        False,
        description="Force update (TRUE/FALSE), default: FALSE",
        title="Force Update",
    )
    title: Optional[str] = Field(
        None, description="The title of the policy template.", title="Title"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: Optional[List[Union[AwsService, GcpService]]] = Field(
        None,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: Optional[PolicyExecutionType] = Field(
        None, description="The execution type of the policy template."
    )
    details: Optional[PolicyTemplateDetailsInput] = Field(
        None, description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: Optional[str] = Field(
        None,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: Optional[PolicyTemplateRecommendationDetailsInput] = Field(
        None, description="The recommendation details for the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )


class UpdatePolicyTemplateResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class CreatePolicyTemplateRequest(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsInput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsInput = Field(
        ..., description="The recommendation details for the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class CreatePolicyTemplateResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class GetMetricsAPIRequest(BaseModel):
    query: MetricsQuery


class GetMetricsRequest(BaseModel):
    query: MetricsQuery
    tenant_id: UUID4 = Field(
        ..., description="The id of the tenant.", title="Tenant Id"
    )


class GetPolicyTemplateByAliasResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class GetPolicyTemplateByIDResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class GetTenantPoliciesResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policies: List[TenantPolicy] = Field(
        ..., description="List of tenant policies.", title="Policies"
    )


class GetTenantPoliciesWithSettingsResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policies_data: List[TenantPolicyWithSetting] = Field(
        ..., description="The list of policies with settings.", title="Policies Data"
    )


class GetTenantPolicyByIdResponse(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    policy_template_id: UUID4 = Field(
        ..., description="The id of the policy template.", title="Policy Template Id"
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the tenant policy.", title="Id"
    )
    state: TenantPolicySystemState = Field(
        ..., description="The state of the tenant policy."
    )


class GetTenantPolicyWithSummaryResponse(BaseModel):
    policy: TenantPolicy = Field(..., description="The policy details.")
    recommendation_units: List[str] = Field(
        ...,
        description="List of recommendation units names.",
        title="Recommendation Units",
    )


class GetTicketByIdPolicyDetailsResponse(BaseModel):
    tenant_ticket: TenantTicket = Field(..., description="Tenant ticket details")
    policy_details: TenantPolicy = Field(..., description="Policy details")
    recommendation_units: List[str] = Field(
        ..., description="List of recommendation units", title="Recommendation Units"
    )
    hierarchy_details: Dict[str, Any] = Field(
        ..., description="The resource hierarchy details", title="Hierarchy Details"
    )
    resource_details: Dict[str, Any] = Field(
        ..., description="The resource details", title="Resource Details"
    )


class PolicyTemplate(BaseModel):
    parent_ptp_id: UUID4 = Field(
        ...,
        description="The id of the parent policy template pack.",
        title="Parent Ptp Id",
    )
    title: str = Field(
        ..., description="The title of the policy template.", title="Title"
    )
    alias: str = Field(
        ..., description="The alias of the policy template.", title="Alias"
    )
    description: Optional[str] = Field(
        None, description="The description of the policy template.", title="Description"
    )
    services: List[Union[AwsService, GcpService]] = Field(
        ...,
        description="The list of services associated the policy template.",
        title="Services",
    )
    execution_type: PolicyExecutionType = Field(
        ..., description="The execution type of the policy template."
    )
    details: PolicyTemplateDetailsOutput = Field(
        ..., description="The details of the policy template."
    )
    description2: Optional[str] = Field(
        None,
        description="The description2 of the policy template.",
        title="Description2",
    )
    resource_type: str = Field(
        ...,
        description="The resource type of the policy template.",
        title="Resource Type",
    )
    recommendation_details: PolicyTemplateRecommendationDetailsOutput = Field(
        ..., description="The recommendation details for the policy template."
    )
    category: PolicyCategory = Field(
        ..., description="The category of the policy template."
    )
    provider: Provider = Field(
        ..., description="The cloud provider of the policy template."
    )
    id: UUID4 = Field(
        ..., description="The unique identifier of the policy template.", title="Id"
    )
    state: PolicyTemplateState = Field(
        ..., description="The state of the policy template."
    )
    requirements: Optional[str] = Field(
        None,
        description="The requirements of the policy template.",
        title="Requirements",
    )


class ResponseCreatePolicyTemplateResponse(BaseModel):
    data: CreatePolicyTemplateResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetPolicyTemplateByIDResponse(BaseModel):
    data: GetPolicyTemplateByIDResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantPoliciesResponse(BaseModel):
    data: GetTenantPoliciesResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantPoliciesWithSettingsResponse(BaseModel):
    data: GetTenantPoliciesWithSettingsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTenantPolicyByIdResponse(BaseModel):
    data: GetTenantPolicyByIdResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseGetTicketByIdPolicyDetailsResponse(BaseModel):
    data: GetTicketByIdPolicyDetailsResponse
    message: Optional[str] = Field(None, title="Message")


class ResponseUpdatePolicyTemplateResponse(BaseModel):
    data: UpdatePolicyTemplateResponse
    message: Optional[str] = Field(None, title="Message")


class GetPolicyTemplatesResponse(BaseModel):
    pagination: PaginationFields = Field(..., description="Pagination fields.")
    policy_templates: List[PolicyTemplate] = Field(
        ..., description="List of policy templates.", title="Policy Templates"
    )


class ResponseGetPolicyTemplatesResponse(BaseModel):
    data: GetPolicyTemplatesResponse
    message: Optional[str] = Field(None, title="Message")
