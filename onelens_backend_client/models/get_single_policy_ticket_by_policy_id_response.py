# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.account_id import AccountId
from onelens_backend_client.models.account_name import AccountName
from onelens_backend_client.models.entity_id import EntityId
from onelens_backend_client.models.entity_name import EntityName
from onelens_backend_client.models.first_run_at import FirstRunAt
from onelens_backend_client.models.get_single_policy_ticket_by_policy_id_response_effort import (
    GetSinglePolicyTicketByPolicyIdResponseEffort,
)
from onelens_backend_client.models.get_single_policy_ticket_by_policy_id_response_state import (
    GetSinglePolicyTicketByPolicyIdResponseState,
)
from onelens_backend_client.models.node_ids import NodeIds
from onelens_backend_client.models.policy_display_alias import PolicyDisplayAlias
from onelens_backend_client.models.policy_id import PolicyId
from onelens_backend_client.models.policy_labels import PolicyLabels
from onelens_backend_client.models.policy_ticket_status import PolicyTicketStatus
from onelens_backend_client.models.policy_title import PolicyTitle
from onelens_backend_client.models.potential_savings import PotentialSavings
from onelens_backend_client.models.recommendation_unit_title import (
    RecommendationUnitTitle,
)
from onelens_backend_client.models.region import Region
from onelens_backend_client.models.resource_id import ResourceId
from onelens_backend_client.models.service1 import Service1
from onelens_backend_client.models.service_display_name import ServiceDisplayName
from onelens_backend_client.models.ticket_alias import TicketAlias
from onelens_backend_client.models.violation_attributes import ViolationAttributes
from typing import Set
from typing_extensions import Self


class GetSinglePolicyTicketByPolicyIdResponse(BaseModel):
    """
    GetSinglePolicyTicketByPolicyIdResponse
    """  # noqa: E501

    ticket_id: Optional[Any] = Field(description="The unique identifier of the ticket")
    status: PolicyTicketStatus = Field(description="Status of the ticket")
    state: Optional[GetSinglePolicyTicketByPolicyIdResponseState] = None
    violation_attributes: Optional[ViolationAttributes] = None
    entity_id: Optional[EntityId] = None
    entity_name: Optional[EntityName] = None
    region: Optional[Region] = None
    service: Optional[Service1] = None
    service_display_name: Optional[ServiceDisplayName] = None
    account_id: Optional[AccountId] = None
    recommendation_unit_title: Optional[RecommendationUnitTitle] = None
    potential_savings: Optional[PotentialSavings] = None
    resource_id: Optional[ResourceId] = None
    account_name: Optional[AccountName] = None
    policy_id: Optional[PolicyId] = None
    policy_title: Optional[PolicyTitle] = None
    policy_display_alias: Optional[PolicyDisplayAlias] = None
    policy_labels: Optional[PolicyLabels] = None
    effort: Optional[GetSinglePolicyTicketByPolicyIdResponseEffort] = None
    ticket_alias: Optional[TicketAlias] = None
    first_run_at: Optional[FirstRunAt] = None
    node_ids: Optional[NodeIds] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "ticket_id",
        "status",
        "state",
        "violation_attributes",
        "entity_id",
        "entity_name",
        "region",
        "service",
        "service_display_name",
        "account_id",
        "recommendation_unit_title",
        "potential_savings",
        "resource_id",
        "account_name",
        "policy_id",
        "policy_title",
        "policy_display_alias",
        "policy_labels",
        "effort",
        "ticket_alias",
        "first_run_at",
        "node_ids",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetSinglePolicyTicketByPolicyIdResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of state
        if self.state:
            _dict["state"] = self.state.to_dict()
        # override the default output from pydantic by calling `to_dict()` of violation_attributes
        if self.violation_attributes:
            _dict["violation_attributes"] = self.violation_attributes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_id
        if self.entity_id:
            _dict["entity_id"] = self.entity_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of entity_name
        if self.entity_name:
            _dict["entity_name"] = self.entity_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of region
        if self.region:
            _dict["region"] = self.region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict["service"] = self.service.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service_display_name
        if self.service_display_name:
            _dict["service_display_name"] = self.service_display_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account_id
        if self.account_id:
            _dict["account_id"] = self.account_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recommendation_unit_title
        if self.recommendation_unit_title:
            _dict["recommendation_unit_title"] = (
                self.recommendation_unit_title.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of potential_savings
        if self.potential_savings:
            _dict["potential_savings"] = self.potential_savings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resource_id
        if self.resource_id:
            _dict["resource_id"] = self.resource_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of account_name
        if self.account_name:
            _dict["account_name"] = self.account_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_id
        if self.policy_id:
            _dict["policy_id"] = self.policy_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_title
        if self.policy_title:
            _dict["policy_title"] = self.policy_title.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_display_alias
        if self.policy_display_alias:
            _dict["policy_display_alias"] = self.policy_display_alias.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_labels
        if self.policy_labels:
            _dict["policy_labels"] = self.policy_labels.to_dict()
        # override the default output from pydantic by calling `to_dict()` of effort
        if self.effort:
            _dict["effort"] = self.effort.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ticket_alias
        if self.ticket_alias:
            _dict["ticket_alias"] = self.ticket_alias.to_dict()
        # override the default output from pydantic by calling `to_dict()` of first_run_at
        if self.first_run_at:
            _dict["first_run_at"] = self.first_run_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of node_ids
        if self.node_ids:
            _dict["node_ids"] = self.node_ids.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        # set to None if ticket_id (nullable) is None
        # and model_fields_set contains the field
        if self.ticket_id is None and "ticket_id" in self.model_fields_set:
            _dict["ticket_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetSinglePolicyTicketByPolicyIdResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ticket_id": obj.get("ticket_id"),
                "status": obj.get("status"),
                "state": GetSinglePolicyTicketByPolicyIdResponseState.from_dict(
                    obj["state"]
                )
                if obj.get("state") is not None
                else None,
                "violation_attributes": ViolationAttributes.from_dict(
                    obj["violation_attributes"]
                )
                if obj.get("violation_attributes") is not None
                else None,
                "entity_id": EntityId.from_dict(obj["entity_id"])
                if obj.get("entity_id") is not None
                else None,
                "entity_name": EntityName.from_dict(obj["entity_name"])
                if obj.get("entity_name") is not None
                else None,
                "region": Region.from_dict(obj["region"])
                if obj.get("region") is not None
                else None,
                "service": Service1.from_dict(obj["service"])
                if obj.get("service") is not None
                else None,
                "service_display_name": ServiceDisplayName.from_dict(
                    obj["service_display_name"]
                )
                if obj.get("service_display_name") is not None
                else None,
                "account_id": AccountId.from_dict(obj["account_id"])
                if obj.get("account_id") is not None
                else None,
                "recommendation_unit_title": RecommendationUnitTitle.from_dict(
                    obj["recommendation_unit_title"]
                )
                if obj.get("recommendation_unit_title") is not None
                else None,
                "potential_savings": PotentialSavings.from_dict(
                    obj["potential_savings"]
                )
                if obj.get("potential_savings") is not None
                else None,
                "resource_id": ResourceId.from_dict(obj["resource_id"])
                if obj.get("resource_id") is not None
                else None,
                "account_name": AccountName.from_dict(obj["account_name"])
                if obj.get("account_name") is not None
                else None,
                "policy_id": PolicyId.from_dict(obj["policy_id"])
                if obj.get("policy_id") is not None
                else None,
                "policy_title": PolicyTitle.from_dict(obj["policy_title"])
                if obj.get("policy_title") is not None
                else None,
                "policy_display_alias": PolicyDisplayAlias.from_dict(
                    obj["policy_display_alias"]
                )
                if obj.get("policy_display_alias") is not None
                else None,
                "policy_labels": PolicyLabels.from_dict(obj["policy_labels"])
                if obj.get("policy_labels") is not None
                else None,
                "effort": GetSinglePolicyTicketByPolicyIdResponseEffort.from_dict(
                    obj["effort"]
                )
                if obj.get("effort") is not None
                else None,
                "ticket_alias": TicketAlias.from_dict(obj["ticket_alias"])
                if obj.get("ticket_alias") is not None
                else None,
                "first_run_at": FirstRunAt.from_dict(obj["first_run_at"])
                if obj.get("first_run_at") is not None
                else None,
                "node_ids": NodeIds.from_dict(obj["node_ids"])
                if obj.get("node_ids") is not None
                else None,
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
