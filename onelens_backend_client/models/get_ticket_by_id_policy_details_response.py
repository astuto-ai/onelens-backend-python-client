# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from onelens_backend_client.models.tenant_policy import TenantPolicy
from onelens_backend_client.models.tenant_ticket import TenantTicket
from onelens_backend_client.models.violation_metrics_details import ViolationMetricsDetails
from typing import Optional, Set
from typing_extensions import Self

class GetTicketByIdPolicyDetailsResponse(BaseModel):
    """
    GetTicketByIdPolicyDetailsResponse
    """ # noqa: E501
    tenant_ticket: TenantTicket = Field(description="Tenant ticket details")
    policy_details: TenantPolicy = Field(description="Policy details")
    recommendation_units: List[StrictStr] = Field(description="List of recommendation units")
    hierarchy_details: Dict[str, Any] = Field(description="The resource hierarchy details")
    resource_details: Dict[str, Any] = Field(description="The resource details")
    violation_metrics_details: List[ViolationMetricsDetails] = Field(description="The violation metrics details")
    account_details: Dict[str, Any] = Field(description="The account details")
    __properties: ClassVar[List[str]] = ["tenant_ticket", "policy_details", "recommendation_units", "hierarchy_details", "resource_details", "violation_metrics_details", "account_details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetTicketByIdPolicyDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tenant_ticket
        if self.tenant_ticket:
            _dict['tenant_ticket'] = self.tenant_ticket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_details
        if self.policy_details:
            _dict['policy_details'] = self.policy_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in violation_metrics_details (list)
        _items = []
        if self.violation_metrics_details:
            for _item in self.violation_metrics_details:
                if _item:
                    _items.append(_item.to_dict())
            _dict['violation_metrics_details'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetTicketByIdPolicyDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenant_ticket": TenantTicket.from_dict(obj["tenant_ticket"]) if obj.get("tenant_ticket") is not None else None,
            "policy_details": TenantPolicy.from_dict(obj["policy_details"]) if obj.get("policy_details") is not None else None,
            "recommendation_units": obj.get("recommendation_units"),
            "hierarchy_details": obj.get("hierarchy_details"),
            "resource_details": obj.get("resource_details"),
            "violation_metrics_details": [ViolationMetricsDetails.from_dict(_item) for _item in obj["violation_metrics_details"]] if obj.get("violation_metrics_details") is not None else None,
            "account_details": obj.get("account_details")
        })
        return _obj


