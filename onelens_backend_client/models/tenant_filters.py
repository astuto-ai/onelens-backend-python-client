# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Set
from typing_extensions import Self


class TenantFilters(BaseModel):
    """
    TenantFilters
    """  # noqa: E501

    ids: Optional[List[StrictStr]] = None
    names: Optional[List[StrictStr]] = None
    tenant_states: Optional[List[StrictStr]] = None
    short_ids: Optional[List[StrictStr]] = None
    regions: Optional[List[StrictStr]] = None
    org_ids: Optional[List[StrictStr]] = None
    status_reasons: Optional[List[StrictStr]] = None
    expiry_date: Optional[datetime] = None
    plans: Optional[List[StrictStr]] = None
    billing_owners: Optional[List[StrictStr]] = None
    billing_types: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "ids",
        "names",
        "tenant_states",
        "short_ids",
        "regions",
        "org_ids",
        "status_reasons",
        "expiry_date",
        "plans",
        "billing_owners",
        "billing_types",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if ids (nullable) is None
        # and model_fields_set contains the field
        if self.ids is None and "ids" in self.model_fields_set:
            _dict["ids"] = None

        # set to None if names (nullable) is None
        # and model_fields_set contains the field
        if self.names is None and "names" in self.model_fields_set:
            _dict["names"] = None

        # set to None if tenant_states (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_states is None and "tenant_states" in self.model_fields_set:
            _dict["tenant_states"] = None

        # set to None if short_ids (nullable) is None
        # and model_fields_set contains the field
        if self.short_ids is None and "short_ids" in self.model_fields_set:
            _dict["short_ids"] = None

        # set to None if regions (nullable) is None
        # and model_fields_set contains the field
        if self.regions is None and "regions" in self.model_fields_set:
            _dict["regions"] = None

        # set to None if org_ids (nullable) is None
        # and model_fields_set contains the field
        if self.org_ids is None and "org_ids" in self.model_fields_set:
            _dict["org_ids"] = None

        # set to None if status_reasons (nullable) is None
        # and model_fields_set contains the field
        if self.status_reasons is None and "status_reasons" in self.model_fields_set:
            _dict["status_reasons"] = None

        # set to None if expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_date is None and "expiry_date" in self.model_fields_set:
            _dict["expiry_date"] = None

        # set to None if plans (nullable) is None
        # and model_fields_set contains the field
        if self.plans is None and "plans" in self.model_fields_set:
            _dict["plans"] = None

        # set to None if billing_owners (nullable) is None
        # and model_fields_set contains the field
        if self.billing_owners is None and "billing_owners" in self.model_fields_set:
            _dict["billing_owners"] = None

        # set to None if billing_types (nullable) is None
        # and model_fields_set contains the field
        if self.billing_types is None and "billing_types" in self.model_fields_set:
            _dict["billing_types"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ids": obj.get("ids"),
                "names": obj.get("names"),
                "tenant_states": obj.get("tenant_states"),
                "short_ids": obj.get("short_ids"),
                "regions": obj.get("regions"),
                "org_ids": obj.get("org_ids"),
                "status_reasons": obj.get("status_reasons"),
                "expiry_date": obj.get("expiry_date"),
                "plans": obj.get("plans"),
                "billing_owners": obj.get("billing_owners"),
                "billing_types": obj.get("billing_types"),
            }
        )
        return _obj
