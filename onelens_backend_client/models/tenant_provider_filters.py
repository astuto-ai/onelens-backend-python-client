# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.tenant_provider_state import TenantProviderState
from typing import Optional, Set
from typing_extensions import Self

class TenantProviderFilters(BaseModel):
    """
    TenantProviderFilters
    """ # noqa: E501
    tenant_ids: Optional[List[StrictStr]] = None
    cloud_ids: Optional[List[StrictStr]] = None
    cloud_providers: Optional[List[StrictStr]] = None
    parent_ids: Optional[List[StrictStr]] = None
    is_parent_account: Optional[StrictBool] = None
    is_billing_account: Optional[StrictBool] = None
    is_verified: Optional[StrictBool] = None
    states: Optional[List[TenantProviderState]] = None
    __properties: ClassVar[List[str]] = ["tenant_ids", "cloud_ids", "cloud_providers", "parent_ids", "is_parent_account", "is_billing_account", "is_verified", "states"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantProviderFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if tenant_ids (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_ids is None and "tenant_ids" in self.model_fields_set:
            _dict['tenant_ids'] = None

        # set to None if cloud_ids (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_ids is None and "cloud_ids" in self.model_fields_set:
            _dict['cloud_ids'] = None

        # set to None if cloud_providers (nullable) is None
        # and model_fields_set contains the field
        if self.cloud_providers is None and "cloud_providers" in self.model_fields_set:
            _dict['cloud_providers'] = None

        # set to None if parent_ids (nullable) is None
        # and model_fields_set contains the field
        if self.parent_ids is None and "parent_ids" in self.model_fields_set:
            _dict['parent_ids'] = None

        # set to None if is_parent_account (nullable) is None
        # and model_fields_set contains the field
        if self.is_parent_account is None and "is_parent_account" in self.model_fields_set:
            _dict['is_parent_account'] = None

        # set to None if is_billing_account (nullable) is None
        # and model_fields_set contains the field
        if self.is_billing_account is None and "is_billing_account" in self.model_fields_set:
            _dict['is_billing_account'] = None

        # set to None if is_verified (nullable) is None
        # and model_fields_set contains the field
        if self.is_verified is None and "is_verified" in self.model_fields_set:
            _dict['is_verified'] = None

        # set to None if states (nullable) is None
        # and model_fields_set contains the field
        if self.states is None and "states" in self.model_fields_set:
            _dict['states'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantProviderFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenant_ids": obj.get("tenant_ids"),
            "cloud_ids": obj.get("cloud_ids"),
            "cloud_providers": obj.get("cloud_providers"),
            "parent_ids": obj.get("parent_ids"),
            "is_parent_account": obj.get("is_parent_account"),
            "is_billing_account": obj.get("is_billing_account"),
            "is_verified": obj.get("is_verified"),
            "states": obj.get("states")
        })
        return _obj


