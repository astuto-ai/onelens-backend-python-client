# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from onelens_backend_client.models.onelens_models_service_interfaces_utilities_commons_granularity_unit import (
    OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit,
)
from typing import Set
from typing_extensions import Self


class ResourceCatalogCostDataMixin(BaseModel):
    """
    Resource Catalog Cost Data
    """  # noqa: E501

    id: StrictStr = Field(description="The id of the resource catalog cost data.")
    resource_catalog_id: StrictStr = Field(
        description="The id of the resource catalog."
    )
    start_datetime: datetime = Field(description="The start datetime.")
    end_datetime: datetime = Field(description="The end datetime.")
    granularity: OnelensModelsServiceInterfacesUtilitiesCommonsGranularityUnit = Field(
        description="The granularity."
    )
    unblended_cost: Optional[Union[StrictFloat, StrictInt]] = None
    blended_cost: Optional[Union[StrictFloat, StrictInt]] = None
    net_unblended_cost: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "resource_catalog_id",
        "start_datetime",
        "end_datetime",
        "granularity",
        "unblended_cost",
        "blended_cost",
        "net_unblended_cost",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceCatalogCostDataMixin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if unblended_cost (nullable) is None
        # and model_fields_set contains the field
        if self.unblended_cost is None and "unblended_cost" in self.model_fields_set:
            _dict["unblended_cost"] = None

        # set to None if blended_cost (nullable) is None
        # and model_fields_set contains the field
        if self.blended_cost is None and "blended_cost" in self.model_fields_set:
            _dict["blended_cost"] = None

        # set to None if net_unblended_cost (nullable) is None
        # and model_fields_set contains the field
        if (
            self.net_unblended_cost is None
            and "net_unblended_cost" in self.model_fields_set
        ):
            _dict["net_unblended_cost"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceCatalogCostDataMixin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "resource_catalog_id": obj.get("resource_catalog_id"),
                "start_datetime": obj.get("start_datetime"),
                "end_datetime": obj.get("end_datetime"),
                "granularity": obj.get("granularity"),
                "unblended_cost": obj.get("unblended_cost"),
                "blended_cost": obj.get("blended_cost"),
                "net_unblended_cost": obj.get("net_unblended_cost"),
            }
        )
        return _obj
