# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.rule_type import RuleType
from typing import Optional, Set
from typing_extensions import Self

class PolicyTemplateDetails(BaseModel):
    """
    PolicyTemplateDetails
    """ # noqa: E501
    inputs: Optional[List[StrictStr]] = None
    config_schema: Optional[Dict[str, Any]] = None
    primary_violation_attributes_schema: Optional[Dict[str, Any]] = None
    secondary_violation_attributes_schema: Optional[Dict[str, Any]] = None
    rule_type: Optional[RuleType] = None
    rule_definition: Optional[StrictStr] = None
    default_policy_config: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["inputs", "config_schema", "primary_violation_attributes_schema", "secondary_violation_attributes_schema", "rule_type", "rule_definition", "default_policy_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyTemplateDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if inputs (nullable) is None
        # and model_fields_set contains the field
        if self.inputs is None and "inputs" in self.model_fields_set:
            _dict['inputs'] = None

        # set to None if config_schema (nullable) is None
        # and model_fields_set contains the field
        if self.config_schema is None and "config_schema" in self.model_fields_set:
            _dict['config_schema'] = None

        # set to None if primary_violation_attributes_schema (nullable) is None
        # and model_fields_set contains the field
        if self.primary_violation_attributes_schema is None and "primary_violation_attributes_schema" in self.model_fields_set:
            _dict['primary_violation_attributes_schema'] = None

        # set to None if secondary_violation_attributes_schema (nullable) is None
        # and model_fields_set contains the field
        if self.secondary_violation_attributes_schema is None and "secondary_violation_attributes_schema" in self.model_fields_set:
            _dict['secondary_violation_attributes_schema'] = None

        # set to None if rule_type (nullable) is None
        # and model_fields_set contains the field
        if self.rule_type is None and "rule_type" in self.model_fields_set:
            _dict['rule_type'] = None

        # set to None if rule_definition (nullable) is None
        # and model_fields_set contains the field
        if self.rule_definition is None and "rule_definition" in self.model_fields_set:
            _dict['rule_definition'] = None

        # set to None if default_policy_config (nullable) is None
        # and model_fields_set contains the field
        if self.default_policy_config is None and "default_policy_config" in self.model_fields_set:
            _dict['default_policy_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyTemplateDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inputs": obj.get("inputs"),
            "config_schema": obj.get("config_schema"),
            "primary_violation_attributes_schema": obj.get("primary_violation_attributes_schema"),
            "secondary_violation_attributes_schema": obj.get("secondary_violation_attributes_schema"),
            "rule_type": obj.get("rule_type"),
            "rule_definition": obj.get("rule_definition"),
            "default_policy_config": obj.get("default_policy_config")
        })
        return _obj


