# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.effort import Effort
from typing import Set
from typing_extensions import Self


class RecommendationUnitFilters(BaseModel):
    """
    RecommendationUnitFilters
    """  # noqa: E501

    search_query: Optional[StrictStr] = None
    ids: Optional[List[StrictStr]] = Field(
        default=None, description="Filter by recommendation unit id/alias."
    )
    services: Optional[List[StrictStr]] = Field(
        default=None, description="Filter by Services"
    )
    action_type_alias: Optional[List[StrictStr]] = Field(
        default=None, description="Filter by action type."
    )
    priorities: Optional[List[StrictInt]] = Field(
        default=None, description="Filter by priorities."
    )
    efforts: Optional[List[Effort]] = Field(
        default=None, description="Filter by effort."
    )
    __properties: ClassVar[List[str]] = [
        "search_query",
        "ids",
        "services",
        "action_type_alias",
        "priorities",
        "efforts",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RecommendationUnitFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if search_query (nullable) is None
        # and model_fields_set contains the field
        if self.search_query is None and "search_query" in self.model_fields_set:
            _dict["search_query"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RecommendationUnitFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "search_query": obj.get("search_query"),
                "ids": obj.get("ids"),
                "services": obj.get("services"),
                "action_type_alias": obj.get("action_type_alias"),
                "priorities": obj.get("priorities"),
                "efforts": obj.get("efforts"),
            }
        )
        return _obj
