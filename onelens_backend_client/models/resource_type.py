# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.onelens_models_service_interfaces_tenant_metadata_service_catalog_dto_metric import (
    OnelensModelsServiceInterfacesTenantMetadataServiceCatalogDtoMetric,
)
from onelens_backend_client.models.relationship_config_item import (
    RelationshipConfigItem,
)
from onelens_backend_client.models.resource_metric_config import ResourceMetricConfig
from typing import Set
from typing_extensions import Self


class ResourceType(BaseModel):
    """
    ResourceType
    """  # noqa: E501

    resource_type: StrictStr
    resource_table: StrictStr
    identifier_key: Optional[StrictStr] = None
    select_columns: List[StrictStr]
    resource_url_template: StrictStr
    is_tags_available: StrictBool
    relationship_config: List[RelationshipConfigItem]
    created_at_column: Optional[StrictStr] = None
    updated_at_column: Optional[StrictStr] = None
    metrics: Optional[
        List[OnelensModelsServiceInterfacesTenantMetadataServiceCatalogDtoMetric]
    ] = None
    metric_table: Optional[StrictStr] = None
    resource_metric_config: Optional[ResourceMetricConfig] = None
    __properties: ClassVar[List[str]] = [
        "resource_type",
        "resource_table",
        "identifier_key",
        "select_columns",
        "resource_url_template",
        "is_tags_available",
        "relationship_config",
        "created_at_column",
        "updated_at_column",
        "metrics",
        "metric_table",
        "resource_metric_config",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in relationship_config (list)
        _items = []
        if self.relationship_config:
            for _item in self.relationship_config:
                if _item:
                    _items.append(_item.to_dict())
            _dict["relationship_config"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item in self.metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict["metrics"] = _items
        # override the default output from pydantic by calling `to_dict()` of resource_metric_config
        if self.resource_metric_config:
            _dict["resource_metric_config"] = self.resource_metric_config.to_dict()
        # set to None if identifier_key (nullable) is None
        # and model_fields_set contains the field
        if self.identifier_key is None and "identifier_key" in self.model_fields_set:
            _dict["identifier_key"] = None

        # set to None if created_at_column (nullable) is None
        # and model_fields_set contains the field
        if (
            self.created_at_column is None
            and "created_at_column" in self.model_fields_set
        ):
            _dict["created_at_column"] = None

        # set to None if updated_at_column (nullable) is None
        # and model_fields_set contains the field
        if (
            self.updated_at_column is None
            and "updated_at_column" in self.model_fields_set
        ):
            _dict["updated_at_column"] = None

        # set to None if metrics (nullable) is None
        # and model_fields_set contains the field
        if self.metrics is None and "metrics" in self.model_fields_set:
            _dict["metrics"] = None

        # set to None if metric_table (nullable) is None
        # and model_fields_set contains the field
        if self.metric_table is None and "metric_table" in self.model_fields_set:
            _dict["metric_table"] = None

        # set to None if resource_metric_config (nullable) is None
        # and model_fields_set contains the field
        if (
            self.resource_metric_config is None
            and "resource_metric_config" in self.model_fields_set
        ):
            _dict["resource_metric_config"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "resource_type": obj.get("resource_type"),
                "resource_table": obj.get("resource_table"),
                "identifier_key": obj.get("identifier_key"),
                "select_columns": obj.get("select_columns"),
                "resource_url_template": obj.get("resource_url_template"),
                "is_tags_available": obj.get("is_tags_available"),
                "relationship_config": [
                    RelationshipConfigItem.from_dict(_item)
                    for _item in obj["relationship_config"]
                ]
                if obj.get("relationship_config") is not None
                else None,
                "created_at_column": obj.get("created_at_column"),
                "updated_at_column": obj.get("updated_at_column"),
                "metrics": [
                    OnelensModelsServiceInterfacesTenantMetadataServiceCatalogDtoMetric.from_dict(
                        _item
                    )
                    for _item in obj["metrics"]
                ]
                if obj.get("metrics") is not None
                else None,
                "metric_table": obj.get("metric_table"),
                "resource_metric_config": ResourceMetricConfig.from_dict(
                    obj["resource_metric_config"]
                )
                if obj.get("resource_metric_config") is not None
                else None,
            }
        )
        return _obj
