# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.agent_type import AgentType
from onelens_backend_client.models.message_input import MessageInput
from typing import Set
from typing_extensions import Self


class SendMessageRequest(BaseModel):
    """
    Request model for sending a message.
    """  # noqa: E501

    tenant_id: Optional[StrictStr] = None
    thread_id: Optional[StrictStr] = None
    agent_type: Optional[AgentType] = Field(
        default=None,
        description="Type of the workflow, required if thread_id is not provided to create a new thread for the workflow",
    )
    message: MessageInput = Field(description="Message to be sent")
    input_state: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = [
        "tenant_id",
        "thread_id",
        "agent_type",
        "message",
        "input_state",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SendMessageRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict["message"] = self.message.to_dict()
        # set to None if tenant_id (nullable) is None
        # and model_fields_set contains the field
        if self.tenant_id is None and "tenant_id" in self.model_fields_set:
            _dict["tenant_id"] = None

        # set to None if thread_id (nullable) is None
        # and model_fields_set contains the field
        if self.thread_id is None and "thread_id" in self.model_fields_set:
            _dict["thread_id"] = None

        # set to None if input_state (nullable) is None
        # and model_fields_set contains the field
        if self.input_state is None and "input_state" in self.model_fields_set:
            _dict["input_state"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SendMessageRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "tenant_id": obj.get("tenant_id"),
                "thread_id": obj.get("thread_id"),
                "agent_type": obj.get("agent_type"),
                "message": MessageInput.from_dict(obj["message"])
                if obj.get("message") is not None
                else None,
                "input_state": obj.get("input_state"),
            }
        )
        return _obj
