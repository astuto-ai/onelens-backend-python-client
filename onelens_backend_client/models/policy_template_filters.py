# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.action_type_filters_services_inner import ActionTypeFiltersServicesInner
from onelens_backend_client.models.policy_category import PolicyCategory
from onelens_backend_client.models.policy_execution_type import PolicyExecutionType
from onelens_backend_client.models.policy_template_state import PolicyTemplateState
from onelens_backend_client.models.provider import Provider
from typing import Optional, Set
from typing_extensions import Self

class PolicyTemplateFilters(BaseModel):
    """
    PolicyTemplateFilters
    """ # noqa: E501
    search_query: Optional[StrictStr] = None
    parent_ptp_ids: Optional[List[StrictStr]] = Field(default=None, description="Filter by parent policy template pack id.")
    states: Optional[List[PolicyTemplateState]] = Field(default=None, description="Filter by state. Default is ACTIVE.")
    categories: Optional[List[PolicyCategory]] = Field(default=None, description="Filter by type.")
    providers: Optional[List[Provider]] = Field(default=None, description="Filter by provider.")
    services: Optional[List[ActionTypeFiltersServicesInner]] = Field(default=None, description="Filter by services.")
    execution_types: Optional[List[PolicyExecutionType]] = Field(default=None, description="Filter by execution type.")
    __properties: ClassVar[List[str]] = ["search_query", "parent_ptp_ids", "states", "categories", "providers", "services", "execution_types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyTemplateFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item in self.services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['services'] = _items
        # set to None if search_query (nullable) is None
        # and model_fields_set contains the field
        if self.search_query is None and "search_query" in self.model_fields_set:
            _dict['search_query'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyTemplateFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "search_query": obj.get("search_query"),
            "parent_ptp_ids": obj.get("parent_ptp_ids"),
            "states": obj.get("states"),
            "categories": obj.get("categories"),
            "providers": obj.get("providers"),
            "services": [ActionTypeFiltersServicesInner.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "execution_types": obj.get("execution_types")
        })
        return _obj


