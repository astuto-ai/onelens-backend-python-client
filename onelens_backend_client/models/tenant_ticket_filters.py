# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.statuses import Statuses
from onelens_backend_client.models.ticket_category import TicketCategory
from onelens_backend_client.models.ticket_state import TicketState
from typing import Optional, Set
from typing_extensions import Self

class TenantTicketFilters(BaseModel):
    """
    TenantTicketFilters
    """ # noqa: E501
    monitor_ids: Optional[List[StrictStr]] = Field(default=None, description="List of violation monitor ids/anomaly node ids for which tickets are to be fetched.")
    ticket_categories: Optional[List[TicketCategory]] = Field(default=None, description="List of ticket categories for which tickets are to be fetched.")
    states: Optional[List[TicketState]] = Field(default=None, description="List of ticket State for which tickets are to be fetched.")
    statuses: Optional[Statuses] = None
    policy_ids: Optional[List[StrictStr]] = Field(default=None, description="List of policy ids for which tickets are to be fetched.")
    __properties: ClassVar[List[str]] = ["monitor_ids", "ticket_categories", "states", "statuses", "policy_ids"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantTicketFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of statuses
        if self.statuses:
            _dict['statuses'] = self.statuses.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantTicketFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "monitor_ids": obj.get("monitor_ids"),
            "ticket_categories": obj.get("ticket_categories"),
            "states": obj.get("states"),
            "statuses": Statuses.from_dict(obj["statuses"]) if obj.get("statuses") is not None else None,
            "policy_ids": obj.get("policy_ids")
        })
        return _obj


