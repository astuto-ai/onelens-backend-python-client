# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.metrics_aggregation_type import MetricsAggregationType
from onelens_backend_client.models.metrics_look_back_period import MetricsLookBackPeriod
from onelens_backend_client.models.metrics_threshold import MetricsThreshold
from typing import Optional, Set
from typing_extensions import Self

class MetricsChartConfigOutput(BaseModel):
    """
    MetricsChartConfigOutput
    """ # noqa: E501
    chart_title: StrictStr = Field(description="The title of the chart.")
    chart_type: StrictStr = Field(description="The type of the chart.")
    chart_data_tooltip: Optional[StrictStr] = None
    table_name: StrictStr = Field(description="The name of the table.")
    metric_name: StrictStr = Field(description="The name of the metric.")
    aggregation_type: MetricsAggregationType = Field(description="The aggregation type of the metric.")
    look_back_period: Optional[MetricsLookBackPeriod] = None
    threshold: Optional[MetricsThreshold] = None
    __properties: ClassVar[List[str]] = ["chart_title", "chart_type", "chart_data_tooltip", "table_name", "metric_name", "aggregation_type", "look_back_period", "threshold"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetricsChartConfigOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of look_back_period
        if self.look_back_period:
            _dict['look_back_period'] = self.look_back_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of threshold
        if self.threshold:
            _dict['threshold'] = self.threshold.to_dict()
        # set to None if chart_data_tooltip (nullable) is None
        # and model_fields_set contains the field
        if self.chart_data_tooltip is None and "chart_data_tooltip" in self.model_fields_set:
            _dict['chart_data_tooltip'] = None

        # set to None if look_back_period (nullable) is None
        # and model_fields_set contains the field
        if self.look_back_period is None and "look_back_period" in self.model_fields_set:
            _dict['look_back_period'] = None

        # set to None if threshold (nullable) is None
        # and model_fields_set contains the field
        if self.threshold is None and "threshold" in self.model_fields_set:
            _dict['threshold'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetricsChartConfigOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "chart_title": obj.get("chart_title"),
            "chart_type": obj.get("chart_type"),
            "chart_data_tooltip": obj.get("chart_data_tooltip"),
            "table_name": obj.get("table_name"),
            "metric_name": obj.get("metric_name"),
            "aggregation_type": obj.get("aggregation_type"),
            "look_back_period": MetricsLookBackPeriod.from_dict(obj["look_back_period"]) if obj.get("look_back_period") is not None else None,
            "threshold": MetricsThreshold.from_dict(obj["threshold"]) if obj.get("threshold") is not None else None
        })
        return _obj


