# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class TenantPolicyTicketDetailsMixin(BaseModel):
    """
    TenantPolicyTicketDetailsMixin
    """ # noqa: E501
    policy_id: StrictStr = Field(description="The id of the policy being violated.")
    policy_template_id: StrictStr = Field(description="The id of the policy template being violated.")
    policy_config: Dict[str, Any] = Field(description="The config of the policy being violated.")
    policy_config_hash: Optional[StrictStr] = None
    policy_config_version: StrictInt = Field(description="The config version of the policy being violated.")
    violation_attributes: Dict[str, Any] = Field(description="The attributes of the violation.")
    potential_cost_saving: Union[StrictFloat, StrictInt] = Field(description="The potential cost accrued because of the violation.")
    preferred_recommendation_id: Optional[StrictStr] = None
    rule_definition_hash: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["policy_id", "policy_template_id", "policy_config", "policy_config_hash", "policy_config_version", "violation_attributes", "potential_cost_saving", "preferred_recommendation_id", "rule_definition_hash"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantPolicyTicketDetailsMixin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if policy_config_hash (nullable) is None
        # and model_fields_set contains the field
        if self.policy_config_hash is None and "policy_config_hash" in self.model_fields_set:
            _dict['policy_config_hash'] = None

        # set to None if preferred_recommendation_id (nullable) is None
        # and model_fields_set contains the field
        if self.preferred_recommendation_id is None and "preferred_recommendation_id" in self.model_fields_set:
            _dict['preferred_recommendation_id'] = None

        # set to None if rule_definition_hash (nullable) is None
        # and model_fields_set contains the field
        if self.rule_definition_hash is None and "rule_definition_hash" in self.model_fields_set:
            _dict['rule_definition_hash'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantPolicyTicketDetailsMixin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "policy_id": obj.get("policy_id"),
            "policy_template_id": obj.get("policy_template_id"),
            "policy_config": obj.get("policy_config"),
            "policy_config_hash": obj.get("policy_config_hash"),
            "policy_config_version": obj.get("policy_config_version"),
            "violation_attributes": obj.get("violation_attributes"),
            "potential_cost_saving": obj.get("potential_cost_saving"),
            "preferred_recommendation_id": obj.get("preferred_recommendation_id"),
            "rule_definition_hash": obj.get("rule_definition_hash")
        })
        return _obj


