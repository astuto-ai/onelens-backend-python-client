# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.filters import Filters
from onelens_backend_client.models.saved_view_item_payload_input_pagination import (
    SavedViewItemPayloadInputPagination,
)
from onelens_backend_client.models.saved_view_item_payload_input_sort_criteria import (
    SavedViewItemPayloadInputSortCriteria,
)
from onelens_backend_client.models.selected_fields import SelectedFields
from typing import Set
from typing_extensions import Self


class SavedViewItemPayloadInput(BaseModel):
    """
    SavedViewItemPayloadInput
    """  # noqa: E501

    filters: Optional[Filters] = None
    sort_criteria: Optional[SavedViewItemPayloadInputSortCriteria] = None
    pagination: Optional[SavedViewItemPayloadInputPagination] = None
    selected_fields: Optional[SelectedFields] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = [
        "filters",
        "sort_criteria",
        "pagination",
        "selected_fields",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SavedViewItemPayloadInput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set(
            [
                "additional_properties",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict["filters"] = self.filters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sort_criteria
        if self.sort_criteria:
            _dict["sort_criteria"] = self.sort_criteria.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pagination
        if self.pagination:
            _dict["pagination"] = self.pagination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of selected_fields
        if self.selected_fields:
            _dict["selected_fields"] = self.selected_fields.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SavedViewItemPayloadInput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "filters": Filters.from_dict(obj["filters"])
                if obj.get("filters") is not None
                else None,
                "sort_criteria": SavedViewItemPayloadInputSortCriteria.from_dict(
                    obj["sort_criteria"]
                )
                if obj.get("sort_criteria") is not None
                else None,
                "pagination": SavedViewItemPayloadInputPagination.from_dict(
                    obj["pagination"]
                )
                if obj.get("pagination") is not None
                else None,
                "selected_fields": SelectedFields.from_dict(obj["selected_fields"])
                if obj.get("selected_fields") is not None
                else None,
            }
        )
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj
