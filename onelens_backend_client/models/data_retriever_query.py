# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.query_filters import QueryFilters
from onelens_backend_client.models.query_order import QueryOrder
from onelens_backend_client.models.time_dimension import TimeDimension
from typing import Optional, Set
from typing_extensions import Self

class DataRetrieverQuery(BaseModel):
    """
    DataRetrieverQuery
    """ # noqa: E501
    measures: Optional[List[StrictStr]] = None
    dimensions: Optional[List[StrictStr]] = None
    filters: Optional[List[QueryFilters]] = None
    time_dimensions: Optional[List[TimeDimension]] = Field(default=None, alias="timeDimensions")
    segments: Optional[List[StrictStr]] = None
    limit: Optional[StrictInt] = None
    total: Optional[StrictBool] = None
    offset: Optional[StrictInt] = None
    order: Optional[List[QueryOrder]] = None
    timezone: Optional[StrictStr] = None
    renew_query: Optional[StrictBool] = Field(default=None, alias="renewQuery")
    ungrouped: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["measures", "dimensions", "filters", "timeDimensions", "segments", "limit", "total", "offset", "order", "timezone", "renewQuery", "ungrouped"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataRetrieverQuery from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in filters (list)
        _items = []
        if self.filters:
            for _item in self.filters:
                if _item:
                    _items.append(_item.to_dict())
            _dict['filters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in time_dimensions (list)
        _items = []
        if self.time_dimensions:
            for _item in self.time_dimensions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['timeDimensions'] = _items
        # set to None if measures (nullable) is None
        # and model_fields_set contains the field
        if self.measures is None and "measures" in self.model_fields_set:
            _dict['measures'] = None

        # set to None if dimensions (nullable) is None
        # and model_fields_set contains the field
        if self.dimensions is None and "dimensions" in self.model_fields_set:
            _dict['dimensions'] = None

        # set to None if filters (nullable) is None
        # and model_fields_set contains the field
        if self.filters is None and "filters" in self.model_fields_set:
            _dict['filters'] = None

        # set to None if time_dimensions (nullable) is None
        # and model_fields_set contains the field
        if self.time_dimensions is None and "time_dimensions" in self.model_fields_set:
            _dict['timeDimensions'] = None

        # set to None if segments (nullable) is None
        # and model_fields_set contains the field
        if self.segments is None and "segments" in self.model_fields_set:
            _dict['segments'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if total (nullable) is None
        # and model_fields_set contains the field
        if self.total is None and "total" in self.model_fields_set:
            _dict['total'] = None

        # set to None if offset (nullable) is None
        # and model_fields_set contains the field
        if self.offset is None and "offset" in self.model_fields_set:
            _dict['offset'] = None

        # set to None if order (nullable) is None
        # and model_fields_set contains the field
        if self.order is None and "order" in self.model_fields_set:
            _dict['order'] = None

        # set to None if timezone (nullable) is None
        # and model_fields_set contains the field
        if self.timezone is None and "timezone" in self.model_fields_set:
            _dict['timezone'] = None

        # set to None if renew_query (nullable) is None
        # and model_fields_set contains the field
        if self.renew_query is None and "renew_query" in self.model_fields_set:
            _dict['renewQuery'] = None

        # set to None if ungrouped (nullable) is None
        # and model_fields_set contains the field
        if self.ungrouped is None and "ungrouped" in self.model_fields_set:
            _dict['ungrouped'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataRetrieverQuery from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "measures": obj.get("measures"),
            "dimensions": obj.get("dimensions"),
            "filters": [QueryFilters.from_dict(_item) for _item in obj["filters"]] if obj.get("filters") is not None else None,
            "timeDimensions": [TimeDimension.from_dict(_item) for _item in obj["timeDimensions"]] if obj.get("timeDimensions") is not None else None,
            "segments": obj.get("segments"),
            "limit": obj.get("limit"),
            "total": obj.get("total"),
            "offset": obj.get("offset"),
            "order": obj.get("order"),
            "timezone": obj.get("timezone"),
            "renewQuery": obj.get("renewQuery"),
            "ungrouped": obj.get("ungrouped")
        })
        return _obj


