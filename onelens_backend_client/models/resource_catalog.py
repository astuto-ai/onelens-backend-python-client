# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ResourceCatalog(BaseModel):
    """
    Resource Catalog
    """ # noqa: E501
    ol_id: StrictStr = Field(description="The id of the resource catalog.")
    cloud_id: StrictStr = Field(description="Resource cloud identifier")
    region: StrictStr = Field(description="Resource region")
    service: StrictStr = Field(description="Resource service class")
    service_display_name: StrictStr = Field(description="Service name in UI")
    resource_type: StrictStr = Field(description="Resource type")
    resource_id: Optional[StrictStr] = None
    resource_url_template: StrictStr = Field(description="Resource url template")
    crn: StrictStr = Field(description="Cloud resource identifier")
    title: StrictStr = Field(description="Resource name")
    provider: StrictStr = Field(description="Resource provider")
    status: StrictStr = Field(description="Resource status")
    tags: Optional[Dict[str, Any]] = None
    additional_info: Dict[str, Any] = Field(description="Additional info of the resource.")
    run_id: StrictStr = Field(description="The run id.")
    last_updated_at: datetime = Field(description="The last updated at.")
    __properties: ClassVar[List[str]] = ["ol_id", "cloud_id", "region", "service", "service_display_name", "resource_type", "resource_id", "resource_url_template", "crn", "title", "provider", "status", "tags", "additional_info", "run_id", "last_updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResourceCatalog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if resource_id (nullable) is None
        # and model_fields_set contains the field
        if self.resource_id is None and "resource_id" in self.model_fields_set:
            _dict['resource_id'] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict['tags'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResourceCatalog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ol_id": obj.get("ol_id"),
            "cloud_id": obj.get("cloud_id"),
            "region": obj.get("region"),
            "service": obj.get("service"),
            "service_display_name": obj.get("service_display_name"),
            "resource_type": obj.get("resource_type"),
            "resource_id": obj.get("resource_id"),
            "resource_url_template": obj.get("resource_url_template"),
            "crn": obj.get("crn"),
            "title": obj.get("title"),
            "provider": obj.get("provider"),
            "status": obj.get("status"),
            "tags": obj.get("tags"),
            "additional_info": obj.get("additional_info"),
            "run_id": obj.get("run_id"),
            "last_updated_at": obj.get("last_updated_at")
        })
        return _obj


