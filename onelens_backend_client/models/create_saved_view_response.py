# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from onelens_backend_client.models.saved_view_item_payload_output import (
    SavedViewItemPayloadOutput,
)
from typing import Set
from typing_extensions import Self


class CreateSavedViewResponse(BaseModel):
    """
    CreateSavedViewResponse
    """  # noqa: E501

    name: Annotated[str, Field(min_length=3, strict=True)] = Field(
        description="Name of the saved view"
    )
    page: Annotated[str, Field(min_length=3, strict=True)] = Field(
        description="Page of the saved view"
    )
    payload: SavedViewItemPayloadOutput = Field(description="Payload of the saved view")
    is_default: Optional[StrictBool] = Field(
        default=False, description="Whether the saved view is default"
    )
    ol_user_id: StrictStr = Field(description="Unique onelens identifier for the user")
    id: StrictStr = Field(description="Unique identifier for the saved view")
    __properties: ClassVar[List[str]] = [
        "name",
        "page",
        "payload",
        "is_default",
        "ol_user_id",
        "id",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateSavedViewResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payload
        if self.payload:
            _dict["payload"] = self.payload.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateSavedViewResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "page": obj.get("page"),
                "payload": SavedViewItemPayloadOutput.from_dict(obj["payload"])
                if obj.get("payload") is not None
                else None,
                "is_default": obj.get("is_default")
                if obj.get("is_default") is not None
                else False,
                "ol_user_id": obj.get("ol_user_id"),
                "id": obj.get("id"),
            }
        )
        return _obj
