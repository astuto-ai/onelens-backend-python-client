# coding: utf-8

"""
onelens-backend

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.hierarchy_node_entity_with_details import (
    HierarchyNodeEntityWithDetails,
)
from onelens_backend_client.models.validate_node_filter_conflict_status import (
    ValidateNodeFilterConflictStatus,
)
from typing import Set
from typing_extensions import Self


class GetMappedResourceItem(BaseModel):
    """
    get mapped resource item
    """  # noqa: E501

    ol_id: StrictStr = Field(description="The id of the resource catalog.")
    cloud_id: StrictStr = Field(description="Resource cloud identifier")
    region: StrictStr = Field(description="Resource region")
    service: StrictStr = Field(description="Resource service class")
    service_display_name: StrictStr = Field(description="Service name in UI")
    resource_type: StrictStr = Field(description="Resource type")
    resource_id: Optional[StrictStr] = None
    resource_url_template: StrictStr = Field(description="Resource url template")
    crn: StrictStr = Field(description="Cloud resource identifier")
    title: StrictStr = Field(description="Resource name")
    provider: StrictStr = Field(description="Resource provider")
    status: StrictStr = Field(description="Resource status")
    tags: Optional[Dict[str, Any]] = None
    additional_info: Dict[str, Any] = Field(
        description="Additional info of the resource."
    )
    run_id: StrictStr = Field(description="The run id.")
    last_updated_at: datetime = Field(description="The last updated at.")
    account_name: Optional[StrictStr] = None
    tagged_resource: Optional[StrictBool] = None
    resource_created_at: Optional[datetime] = None
    resource_updated_at: Optional[datetime] = None
    conflict_status: ValidateNodeFilterConflictStatus = Field(
        description="conflict status"
    )
    mapped_to: List[HierarchyNodeEntityWithDetails] = Field(
        description="The list of node ids to which the resource is mapped."
    )
    __properties: ClassVar[List[str]] = [
        "ol_id",
        "cloud_id",
        "region",
        "service",
        "service_display_name",
        "resource_type",
        "resource_id",
        "resource_url_template",
        "crn",
        "title",
        "provider",
        "status",
        "tags",
        "additional_info",
        "run_id",
        "last_updated_at",
        "account_name",
        "tagged_resource",
        "resource_created_at",
        "resource_updated_at",
        "conflict_status",
        "mapped_to",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetMappedResourceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in mapped_to (list)
        _items = []
        if self.mapped_to:
            for _item in self.mapped_to:
                if _item:
                    _items.append(_item.to_dict())
            _dict["mapped_to"] = _items
        # set to None if resource_id (nullable) is None
        # and model_fields_set contains the field
        if self.resource_id is None and "resource_id" in self.model_fields_set:
            _dict["resource_id"] = None

        # set to None if tags (nullable) is None
        # and model_fields_set contains the field
        if self.tags is None and "tags" in self.model_fields_set:
            _dict["tags"] = None

        # set to None if account_name (nullable) is None
        # and model_fields_set contains the field
        if self.account_name is None and "account_name" in self.model_fields_set:
            _dict["account_name"] = None

        # set to None if tagged_resource (nullable) is None
        # and model_fields_set contains the field
        if self.tagged_resource is None and "tagged_resource" in self.model_fields_set:
            _dict["tagged_resource"] = None

        # set to None if resource_created_at (nullable) is None
        # and model_fields_set contains the field
        if (
            self.resource_created_at is None
            and "resource_created_at" in self.model_fields_set
        ):
            _dict["resource_created_at"] = None

        # set to None if resource_updated_at (nullable) is None
        # and model_fields_set contains the field
        if (
            self.resource_updated_at is None
            and "resource_updated_at" in self.model_fields_set
        ):
            _dict["resource_updated_at"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetMappedResourceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ol_id": obj.get("ol_id"),
                "cloud_id": obj.get("cloud_id"),
                "region": obj.get("region"),
                "service": obj.get("service"),
                "service_display_name": obj.get("service_display_name"),
                "resource_type": obj.get("resource_type"),
                "resource_id": obj.get("resource_id"),
                "resource_url_template": obj.get("resource_url_template"),
                "crn": obj.get("crn"),
                "title": obj.get("title"),
                "provider": obj.get("provider"),
                "status": obj.get("status"),
                "tags": obj.get("tags"),
                "additional_info": obj.get("additional_info"),
                "run_id": obj.get("run_id"),
                "last_updated_at": obj.get("last_updated_at"),
                "account_name": obj.get("account_name"),
                "tagged_resource": obj.get("tagged_resource"),
                "resource_created_at": obj.get("resource_created_at"),
                "resource_updated_at": obj.get("resource_updated_at"),
                "conflict_status": obj.get("conflict_status"),
                "mapped_to": [
                    HierarchyNodeEntityWithDetails.from_dict(_item)
                    for _item in obj["mapped_to"]
                ]
                if obj.get("mapped_to") is not None
                else None,
            }
        )
        return _obj
