# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from onelens_backend_client.models.storage_lens_config import StorageLensConfig
from typing import Optional, Set
from typing_extensions import Self

class TenantVerifyRequestWithUser(BaseModel):
    """
    TenantVerifyRequestWithUser
    """ # noqa: E501
    role_name: StrictStr = Field(description="Role name of the tenant")
    tenant_id: StrictStr = Field(description="Tenant ID")
    tenant_provider_id: StrictStr = Field(description="Tenant Provider ID")
    storage_lens_config: Optional[StorageLensConfig] = None
    user_id: StrictStr = Field(description="List of users")
    __properties: ClassVar[List[str]] = ["role_name", "tenant_id", "tenant_provider_id", "storage_lens_config", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantVerifyRequestWithUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of storage_lens_config
        if self.storage_lens_config:
            _dict['storage_lens_config'] = self.storage_lens_config.to_dict()
        # set to None if storage_lens_config (nullable) is None
        # and model_fields_set contains the field
        if self.storage_lens_config is None and "storage_lens_config" in self.model_fields_set:
            _dict['storage_lens_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantVerifyRequestWithUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "role_name": obj.get("role_name"),
            "tenant_id": obj.get("tenant_id"),
            "tenant_provider_id": obj.get("tenant_provider_id"),
            "storage_lens_config": StorageLensConfig.from_dict(obj["storage_lens_config"]) if obj.get("storage_lens_config") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj


