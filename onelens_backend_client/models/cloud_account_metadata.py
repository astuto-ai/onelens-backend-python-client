# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CloudAccountMetadata(BaseModel):
    """
    CloudAccountMetadata
    """ # noqa: E501
    ol_id: StrictStr = Field(description="The id of the cloud account metadata.")
    account_aliases: Optional[List[StrictStr]] = None
    organization_available_policy_types: Optional[List[Dict[str, Any]]] = None
    akas: Optional[List[StrictStr]] = None
    organization_master_account_arn: Optional[StrictStr] = None
    organization_master_account_email: Optional[StrictStr] = None
    organization_master_account_id: Optional[StrictStr] = None
    region: StrictStr = Field(description="Region")
    account_name: StrictStr = Field(description="Account name")
    cloud_id: StrictStr = Field(description="Cloud id")
    cloud_provider: StrictStr = Field(description="Cloud provider")
    arn: StrictStr = Field(description="Arn")
    organization_id: StrictStr = Field(description="Organization id")
    organization_arn: StrictStr = Field(description="Organization arn")
    run_id: StrictStr = Field(description="The run id.")
    last_updated_at: datetime = Field(description="The last updated at.")
    __properties: ClassVar[List[str]] = ["ol_id", "account_aliases", "organization_available_policy_types", "akas", "organization_master_account_arn", "organization_master_account_email", "organization_master_account_id", "region", "account_name", "cloud_id", "cloud_provider", "arn", "organization_id", "organization_arn", "run_id", "last_updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CloudAccountMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if account_aliases (nullable) is None
        # and model_fields_set contains the field
        if self.account_aliases is None and "account_aliases" in self.model_fields_set:
            _dict['account_aliases'] = None

        # set to None if organization_available_policy_types (nullable) is None
        # and model_fields_set contains the field
        if self.organization_available_policy_types is None and "organization_available_policy_types" in self.model_fields_set:
            _dict['organization_available_policy_types'] = None

        # set to None if akas (nullable) is None
        # and model_fields_set contains the field
        if self.akas is None and "akas" in self.model_fields_set:
            _dict['akas'] = None

        # set to None if organization_master_account_arn (nullable) is None
        # and model_fields_set contains the field
        if self.organization_master_account_arn is None and "organization_master_account_arn" in self.model_fields_set:
            _dict['organization_master_account_arn'] = None

        # set to None if organization_master_account_email (nullable) is None
        # and model_fields_set contains the field
        if self.organization_master_account_email is None and "organization_master_account_email" in self.model_fields_set:
            _dict['organization_master_account_email'] = None

        # set to None if organization_master_account_id (nullable) is None
        # and model_fields_set contains the field
        if self.organization_master_account_id is None and "organization_master_account_id" in self.model_fields_set:
            _dict['organization_master_account_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CloudAccountMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ol_id": obj.get("ol_id"),
            "account_aliases": obj.get("account_aliases"),
            "organization_available_policy_types": obj.get("organization_available_policy_types"),
            "akas": obj.get("akas"),
            "organization_master_account_arn": obj.get("organization_master_account_arn"),
            "organization_master_account_email": obj.get("organization_master_account_email"),
            "organization_master_account_id": obj.get("organization_master_account_id"),
            "region": obj.get("region"),
            "account_name": obj.get("account_name"),
            "cloud_id": obj.get("cloud_id"),
            "cloud_provider": obj.get("cloud_provider"),
            "arn": obj.get("arn"),
            "organization_id": obj.get("organization_id"),
            "organization_arn": obj.get("organization_arn"),
            "run_id": obj.get("run_id"),
            "last_updated_at": obj.get("last_updated_at")
        })
        return _obj


