# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.config_schema import ConfigSchema
from openapi_client.models.default_policy_config import DefaultPolicyConfig
from openapi_client.models.inputs import Inputs
from openapi_client.models.output_violation_schema import OutputViolationSchema
from openapi_client.models.policy_template_details_rule_type import PolicyTemplateDetailsRuleType
from openapi_client.models.rule_definition import RuleDefinition
from typing import Optional, Set
from typing_extensions import Self

class PolicyTemplateDetails(BaseModel):
    """
    PolicyTemplateDetails
    """ # noqa: E501
    inputs: Optional[Inputs] = None
    config_schema: Optional[ConfigSchema] = None
    output_violation_schema: Optional[OutputViolationSchema] = None
    rule_type: Optional[PolicyTemplateDetailsRuleType] = None
    rule_definition: Optional[RuleDefinition] = None
    default_policy_config: Optional[DefaultPolicyConfig] = None
    __properties: ClassVar[List[str]] = ["inputs", "config_schema", "output_violation_schema", "rule_type", "rule_definition", "default_policy_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyTemplateDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of inputs
        if self.inputs:
            _dict['inputs'] = self.inputs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config_schema
        if self.config_schema:
            _dict['config_schema'] = self.config_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of output_violation_schema
        if self.output_violation_schema:
            _dict['output_violation_schema'] = self.output_violation_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule_type
        if self.rule_type:
            _dict['rule_type'] = self.rule_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rule_definition
        if self.rule_definition:
            _dict['rule_definition'] = self.rule_definition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of default_policy_config
        if self.default_policy_config:
            _dict['default_policy_config'] = self.default_policy_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyTemplateDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "inputs": Inputs.from_dict(obj["inputs"]) if obj.get("inputs") is not None else None,
            "config_schema": ConfigSchema.from_dict(obj["config_schema"]) if obj.get("config_schema") is not None else None,
            "output_violation_schema": OutputViolationSchema.from_dict(obj["output_violation_schema"]) if obj.get("output_violation_schema") is not None else None,
            "rule_type": PolicyTemplateDetailsRuleType.from_dict(obj["rule_type"]) if obj.get("rule_type") is not None else None,
            "rule_definition": RuleDefinition.from_dict(obj["rule_definition"]) if obj.get("rule_definition") is not None else None,
            "default_policy_config": DefaultPolicyConfig.from_dict(obj["default_policy_config"]) if obj.get("default_policy_config") is not None else None
        })
        return _obj


