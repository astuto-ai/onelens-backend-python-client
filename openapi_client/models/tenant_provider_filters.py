# coding: utf-8

"""
    onelens-backend

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.cloud_ids import CloudIds
from openapi_client.models.cloud_providers import CloudProviders
from openapi_client.models.is_parent_account import IsParentAccount
from openapi_client.models.is_verified import IsVerified
from openapi_client.models.parent_ids import ParentIds
from openapi_client.models.states import States
from openapi_client.models.tenant_ids import TenantIds
from typing import Optional, Set
from typing_extensions import Self

class TenantProviderFilters(BaseModel):
    """
    TenantProviderFilters
    """ # noqa: E501
    tenant_ids: Optional[TenantIds] = None
    cloud_ids: Optional[CloudIds] = None
    cloud_providers: Optional[CloudProviders] = None
    parent_ids: Optional[ParentIds] = None
    is_parent_account: Optional[IsParentAccount] = None
    is_verified: Optional[IsVerified] = None
    states: Optional[States] = None
    __properties: ClassVar[List[str]] = ["tenant_ids", "cloud_ids", "cloud_providers", "parent_ids", "is_parent_account", "is_verified", "states"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TenantProviderFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of tenant_ids
        if self.tenant_ids:
            _dict['tenant_ids'] = self.tenant_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_ids
        if self.cloud_ids:
            _dict['cloud_ids'] = self.cloud_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cloud_providers
        if self.cloud_providers:
            _dict['cloud_providers'] = self.cloud_providers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parent_ids
        if self.parent_ids:
            _dict['parent_ids'] = self.parent_ids.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_parent_account
        if self.is_parent_account:
            _dict['is_parent_account'] = self.is_parent_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_verified
        if self.is_verified:
            _dict['is_verified'] = self.is_verified.to_dict()
        # override the default output from pydantic by calling `to_dict()` of states
        if self.states:
            _dict['states'] = self.states.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TenantProviderFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenant_ids": TenantIds.from_dict(obj["tenant_ids"]) if obj.get("tenant_ids") is not None else None,
            "cloud_ids": CloudIds.from_dict(obj["cloud_ids"]) if obj.get("cloud_ids") is not None else None,
            "cloud_providers": CloudProviders.from_dict(obj["cloud_providers"]) if obj.get("cloud_providers") is not None else None,
            "parent_ids": ParentIds.from_dict(obj["parent_ids"]) if obj.get("parent_ids") is not None else None,
            "is_parent_account": IsParentAccount.from_dict(obj["is_parent_account"]) if obj.get("is_parent_account") is not None else None,
            "is_verified": IsVerified.from_dict(obj["is_verified"]) if obj.get("is_verified") is not None else None,
            "states": States.from_dict(obj["states"]) if obj.get("states") is not None else None
        })
        return _obj


